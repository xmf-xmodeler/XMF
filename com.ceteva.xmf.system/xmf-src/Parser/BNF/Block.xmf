parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                                Clause Blocks                               *
 *                               ---------------                              *
 *                                                                            *
 *  When a clause is translated into a clause-normal-form it becomes a        *
 *  disjunctive sequence of(conjunctive sequence of(Recognizer)). Each element*
 *  of the outer sequence is an alternative that can be tried independently   *
 *  of the other alternatives. Each alternative is compiled to produce a      *
 *  clause block and the collection of clause blocks form the parse table for *
 *  a grammar. A clause block defines the number of local variables required  *
 *  to perform the recognizers in sequence and defines the basic token types  *
 *  that predict the block. In essence, a grammar is compiled to a collection *
 *  of clause blocks that are then run by a parsing machine.                  *
 *                                                                            *
 ******************************************************************************/ 

import Parser;
import BNF;

context BNF

  @Class Block extends Recognizer
  
    // The parsing machine uses stack frames to contain the
    // local variables used in a clause. The number of locals
    // required by a block is defined by locals...
  
    @Attribute locals         : Integer         (?,!)     end
    
    // The arg map is used to associate names with local 
    // positions at run-time...
    
    @Attribute argMap         : Seq(Integer)    (?,!)     end
    
    // The instructions of a block are the basic recognizers
    // that are performed by the parsing machine...
    
    @Attribute instrs         : Seq(Recognizer) (?,!)     end
    
    // The tokenizer produces tokens of the following types and
    // the instructions in the block are predicted by a token
    // of the appropriate type when the field is set...
    
    @Attribute namePredicts   : Boolean         (?,!)     end
    @Attribute intPredicts    : Boolean         (?,!)     end
    @Attribute floatPredicts  : Boolean         (?,!)     end
    @Attribute strPredicts    : Boolean         (?,!)     end
    @Attribute charPredicts   : Boolean         (?,!)     end
    @Attribute termPredicts   : Boolean         (?,!)     end
    @Attribute EOFPredicts    : Boolean         (?,!)     end
    
    // A sequence of token types for user defined tokens...
    
    @Attribute userPredicts   : Seq(Integer)    (?,!,+,-) end
    
    // A cache of the predictions...
    
    @Attribute predicts       : Set(String)     (?,!,+,-) end
    
    @Constructor(locals,instrs) ! end
    
    @Operation calcArgMap(args,locals)
    
      // The arg map records the position of the locals
      // as supplied as arguments to the block...
      
      self.argMap := args->collect(a | locals->indexOf(a))
    end
    
    @Operation calculateSets(grammar,clause):Boolean
    
      // Calculate the nullable, and first sets for this block...
      
      let changed = false
      in changed := self.calculateNullable(grammar,clause);
         @Count i from 0 to instrs->size do
           changed := changed or self.calculateFirst(grammar,clause,i);
           changed := changed or self.checkCall(grammar,clause,i)
         end;
         changed
      end
    end
           
    @Operation calculateFirst(grammar,clause,i):Boolean
    
      // C ::= G H I X
      // If G H I are all nullable then add the firsts of X
      // to C...
      
      if instrs->take(i)->forAll(b | b.nullable(grammar))
      then 
        let first = instrs->at(i).first(grammar)
        in if not first->forAll(n | clause.first()->includes(n))
           then 
             clause.setFirst(first + clause.first());
             true
           else false
           end
        end
      else false
      end
    end
                   
    @Operation calculateNullable(grammar,clause):Boolean
    
      // The owning clause is nullable if all the block instructions
      // can succeed without consuming any input...
      
      if instrs->forAll(p | p.nullable(grammar))
      then 
        if not clause.nullable() 
        then 
          clause.setNullable(true);
          true
        else false
        end
      else false
      end
    end     
    
    @Operation calculateFollow(grammar,clause,i):Boolean
    
      // Set the follow terminals for the ith instruction. The
      // follow non-terminals are those that occur after the
      // instruction has succeeded...
      
      if instrs->drop(i + 1)->forAll(b | b.nullable(grammar))
      then 
        let follow = instrs->at(i).follow(grammar)
        in if not clause.follow()->forAll(n | follow->includes(n))
           then 
             instrs->at(i).setFollow(grammar,follow + clause.follow());
             true
           else false
           end
        end
      else false
      end
    end
    
    @Operation checkCall(grammar,clause,i):Boolean   
    
      // Given C ::= X Y Call(Z) G H I
      // If G H I is nullable then add in follow(C) to follow(Z).
      // If G H is nullable then add in first(I) to follow(Z)
      
      let changed = false
      in if instrs->at(i).isKindOf(Call)
         then 
           changed := self.calculateFollow(grammar,clause,i);
           let rest = instrs->drop(i+1)
           in @Count j from 0 to rest->size do
                if rest->take(j-1)->forAll(b | b.nullable(grammar))
                then 
                  let follow = instrs->at(i).follow(grammar);
                      first = rest->at(j).first(grammar)
                  in if not first->forAll(n | follow->includes(n))
                     then changed := true
                     end;
                     instrs->at(i).setFollow(grammar,follow + first)
                  end
                end
              end
            end
          end;
          changed
       end
     end
     
     @Operation compileLocals(args,locals,grammar)
     
       // Various instructions are transformed into a more efficient
       // form...
       
       let locals = (locals + instrs->iterate(i L = Set{} | L + i.FV()))->asSeq.qsort(@Operation(x,y) x < y end)
       in self.locals := locals->size;
          self.calcArgMap(args,locals);
          self.instrs := instrs->collect(i |
            @CaseObj i of
              Bind[name] do
                // Use the locals index to update the stack frame...
                SetLoc(locals->indexOf(name))
              end
              Cons[ ] do
                // A Cons() instruction uses pseudo locals $head and
                // $tail. These are referenced by index in the stack 
                // frame...
                i.setHeadIndex(locals->indexOf("$head"));
                i.setTailIndex(locals->indexOf("$tail"));
                i
              end
              Call[name,args] do
                // Check that the arguments to a call are all bound. Note
                // that call args *must* be variables. If they are OK
                // then replace the names with the indices...
                let unbound = args->select(a | not locals->includes(a))
                in if unbound->isEmpty
                   then Call(name,args,args->collect(a | locals.indexOf(a)))
                   else self.ferror("Unbound arg(s) ~{,~;~S~} in call ~S(~{,~;~S~})",Seq{unbound,name,args})
                   end
                end
              end
              else i
            end
          )
       end
    end
    
    @Operation dprint()
      format(stdout,"  ~{,~;~S~}:~%",Seq{instrs});
      format(stdout,"    predict: ");
      if namePredicts then format(stdout,"Name,") end;
      if floatPredicts then format(stdout,"Float,") end;
      if intPredicts then format(stdout,"Int,") end;
      if strPredicts then format(stdout,"Str,") end;
      if charPredicts then format(stdout,"Char,") end;
      if termPredicts then format(stdout,"Term,") end;
      if EOFPredicts then format(stdout,"EOF,") end;
      format(stdout,"~{,~;~S~}~%",Seq{predicts->asSeq})
    end
    
    @Operation equal(block):Boolean
    
      // When a grammar is compiled we merge the parent clauses into
      // the child and re-compile. In many cases this results in blocks
      // that are the same as those in the parent. Therefore the blocks
      // can be shared. The sharing can only be known *after* copying and
      // compilation. This operation is used to check for equivalence...
      
      locals = block.locals() and
      (argMap * block.argMap())->forAll(pair | pair->at(0) = pair->at(1)) and
      instrs->size = block.instrs()->size and
      namePredicts = block.namePredicts() and
      intPredicts = block.intPredicts() and
      floatPredicts = block.floatPredicts() and
      strPredicts = block.strPredicts() and
      charPredicts = block.charPredicts() and
      termPredicts = block.termPredicts() and
      EOFPredicts = block.EOFPredicts() and
      predicts = block.predicts()
    end
    
    @Operation expected():Set(String)
    
      // Returns the system names of the expected token types...
      
      predicts + 
      if namePredicts then Set{"Builtin(Name)"} else Set{} end +
      if floatPredicts then Set{"Builtin(Float)"} else Set{} end +
      if intPredicts then Set{"Builtin(Int)"} else Set{} end +
      if strPredicts then Set{"Builtin(Str)"} else Set{} end +
      if charPredicts then Set{"Builtin(Char)"} else Set{} end +
      if termPredicts then Set{"Builtin(Term)"} else Set{} end +
      if EOFPredicts then Set{"Builtin(EOF)"} else Set{} end 
    end
      
    @Operation firsts(grammar,instrs)
    
      // Calculates the set of first symbols...
      
      if instrs->isEmpty
      then Set{}
      else 
        if instrs->head.nullable(grammar)
        then self.firsts(grammar,instrs->tail) + instrs->head.first(grammar)
        else instrs->head.first(grammar)
        end
      end
    end
    
    @Operation isUserPredicts(terminal:String):Boolean
    
      // A terminal of the form Builtin(name,type) is
      // defined by the user...
      
      terminal.hasPrefix("Builtin(")
    end
    
    @Operation predict(clause,grammar)
    
      // Calculates the set of predicted token types for
      // the block. The predictions are set in terms of the
      // prediction slots in the block...
      
      let P = self.firsts(grammar,instrs)
      in if instrs->forAll(i | i.nullable(grammar))
         then
           let F = clause.follow()
           in self.predict((P+F)->including("Builtin(EOF)"))
           end
         else self.predict(P)
         end
      end
    end
    
    @Operation predict(terminals:Set(String))
    
      // Sets the appropriate prediction state of the block..
      
      @For terminal in terminals do
        @Case terminal of
          "Builtin(EOF)" do
            self.setEOFPredicts(true)
          end
          "Builtin(Float)" do
            self.setFloatPredicts(true)
          end
          "Builtin(Int)" do
            self.setIntPredicts(true)
          end
          "Builtin(Name)" do
            self.setNamePredicts(true)
          end
          "Builtin(Str)" do
            self.setStrPredicts(true)
          end
          "Builtin(Char)" do
            self.setCharPredicts(true)
          end
          "Builtin(Line)" do
            self.setCharPredicts(true)
          end
          "Builtin(Term)" do
            self.setTermPredicts(true)
          end
          else 
            if self.isUserPredicts(terminal)
            then self.addToUserPredicts(self.userPredictsType(terminal))
            else self.addToPredicts(terminal)
            end
        end
      end
    end
    
    @Operation userPredictsType(terminal:String):Integer
    
      // Get the integer type part of the user defined
      // Builtin(name,type) terminal...
      
      let pair = terminal.splitBy(",",0,0) then
          arg2 = pair->at(1) then
          type = arg2.subString(0,arg2->size - 1)
      in type.asInt()
      end
    end
    
  end