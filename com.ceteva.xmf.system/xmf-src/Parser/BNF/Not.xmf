parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                                     Not                                    *
 *                               ---------------                              *
 *                                                                            *
 *  Surrounds a recognizer. If the parse of the recognizer succeeds then the  *
 *  Not succeeds and vice-versa.                                              *
 *                                                                            *
 ******************************************************************************/

import Parser::BNF;

context Parser::BNF

  @Class Not extends Recognizer

    @Attribute parser : Recognizer end
    
    @Constructor(parser) end
    
    @Operation code(outputChannel)
      format(outputChannel,"not(");
      parser.code(outputChannel);
      format(outputChannel,")")
    end
    
    @Operation FV():Set(String)
      Set{}
    end
    
    @Operation last(g:Grammar,called:[String]):{String}
      {}
    end
    
    @Operation terminals():Set(String)
      parser.terminals()
    end
    
    @Operation setOwner(owner)
      parser.setOwner(owner)
    end
    
    @Operation toExp(FV:Set(String))
      [| Root::Parser::BNF::Not(<parser.toExp(FV)>) |]
    end
    
    @Operation transform(FV:Set(String),grammar):Recognizer
      self.parser := parser.transform(FV,grammar)
    end
    
  end