parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                                  Grammars                                  *
 *                               ---------------                              *
 *                                                                            *
 *  A grammar is a collection of clauses. The grammar may inherit from a      *
 *  parent grammar in which case all the clauses from the parent are included *
 *  in the child. Each clause has a name, some args and a body. A clause is   *
 *  effective a rule that states what the next sequence of input tokens must  *
 *  be in order for a parse using that clause to succeed. As a parse proceeds *
 *  clauses from the sae grammar can call one another. Each clause can bind   *
 *  local variables and perform actions that reference the local variables.   *
 *  In this way a grammar is similar to a program that is run by a parsing    *
 *  machine in the context of a tokenizer that produces a sequence of tokens. *
 *                                                                            *
 *  Grammars are defined, translated to a normal form and then compiled into  *
 *  predictive parse tables that the parsing machine uses to perform a parse. *
 *  The normal form translation is a syntax transformation and is effectively *
 *  performed by the XMF compiler via compile/4 below. The construction of    *
 *  predictive parse tables is performed by sending the grammar a compile/0   *
 *  message at run-time.                                                      *
 *                                                                            *
 *  Grammars can inherit from parent grammars. The clauses are copied down    *
 *  and subject to the compile/0 compilation process. If the compiled clauses *
 *  are the same as those that were inherited then the inherited copies are   *
 *  discarded and the parent clauses used instead (to save space).            *
 *                                                                            *
 *  When inheriting clauses it is advisable to use different local names. The *
 *  merge rules for clauses with the same name are not particularly           *
 *  deterministic.                                                            * 
 *                                                                            *
 ******************************************************************************/

import Parser;
import Tokens;
import BNF;
import OCL;
import IO;

context Parser::BNF

  @Class Grammar extends NameSpace, Performable
  
    // A grammar inherits from a collection of parents.
    // All the clauses from the parent are copied down.
    // Advisable to avoid name clashes between clauses.
      
    @Attribute parents : Set(Grammar)          end  
    
    // All the clauses of the grammar defining how to
    // recognise legal sequences of inputs. Contains
    // copies of parent clauses.
    
    @Attribute clauses : Set(Clause)           end  
    
    // The name of the clause to start parsing by
    // default. When a grammar is attached to a class
    // the name of the class is set as the starting
    // non-terminal...
    
    @Attribute startingSymbol : String         end  
    
    // If true then diagnostic output is printed...
    
    @Attribute debug : Boolean                 end  
    
    // The set of terminal names used by this grammar...
    
    @Attribute terminals : Set(String)         end  
    
    // Dynamics for actions...
    
    @Attribute dynamics : Seq(Element)         end  
    
    // Clauses are looked up by name at run-time. The
    // following table is used as a cache...
    
    @Attribute clauseCache : Table = Table(20) end

    @Operation add(namedElement:NamedElement)
      if namedElement.isKindOf(Clause)
      then 
        self.addClause(namedElement);
        super(namedElement)
      else super(namedElement)
      end
    end
      
    @Operation addClause(clause)
      clause.setOwner(self);
      self.clauses := clauses->including(clause)
    end

    @Operation allClauses():Set(Clause)
      self.clauses->union(self.inheritedClauses())
    end

    @Operation allClauses(name:String):Set(Clause)
      self.localClauses(name)->union(self.inheritedClauses(name))
    end
      
    @Operation cacheTerminals() 
      self.terminals := self.localTerminals()->union(self.inheritedTerminals())
    end
  
    @Operation calculateSets()
      
     // Called to create the first and follow sets for  the
     // non-terminals. On completion, each clause records
     // the set of first and follow terminals and whether or
     // not the clause derives the empty set of input tokens.
        
     let changed = false
     in @Repeat
          changed := false;
          @For clause in clauses do
            changed := changed or clause.calculateSets(self)
          end
        until not changed
        end
     end
    end
      
    @Operation checkClauseOverlaps()
      
      // Although inherited clauses worked pre 2.0, they cause problems
      // and probably don't do what you think. Give a warning...
        
      let C = self.inheritedClauses()
      in @For clause in clauses do
           if C->exists(c | c.name().toString() = clause.name().toString())
           then format(stdout,"~%~%Warning: local clause definition for ~S conflicts with inherited clause.~%~%",Seq{clause.name()})
             end
         end
      end
    end
      
    @Operation clauseNamed(name)
      if clauseCache.hasKey(name)
      then clauseCache.get(name)
      else
        @Find(clause,clauses)
          when clause.name().toString() = name
          do clauseCache.put(name,clause);
             clause
          else null
        end
      end
    end
      
    @Operation clean()
      @For clause in clauses do
        clause.clean()
      end;
      self.cleanClauses();
      clauseCache.clear()
    end
  
    @Operation cleanClauses()
      let cleanClauses = Set{}
      in @For c in clauses do
           @Find(clause,self.inheritedClauses(c.name()))
             when clause.equal(c)
             do cleanClauses := cleanClauses->including(clause)
             else cleanClauses := cleanClauses->including(c)
           end
         end;
         self.clauses := cleanClauses
      end
    end
    
    @Operation compile()
    
      // Called when the grammar is loaded in order to
      // construct the predictive parse tables and do
      // some checking. Note that this is why there is a
      // pause when grammars are loaded - this is a lot of
      // work...
      
        self.checkClauseOverlaps();
        self.inheritClauses();
        self.cnf();
        self.calculateSets();
        self.predict();
        self.clean();
        self
      end
      
      @Operation compile(env,frame,isLast,saveSource)
      
        // Each operation (i.e. action) may refer to names that are name space
        // references. When a grammar is initialised, each action operation will
        // be updated so that the operation is owned by the grammar. The grammar
        // will have an owner and therefore name space references are reconciled
        // through the enclosing grammar.
        
        self.lift().compile(env.incNameSpaceRefs(),frame,isLast,saveSource)
      end 
    
      @Operation cnf()
      
        // Clause-normal-form occurs when there are no Ands and Ors left in
        // the bodies of the clause. All the Ors have been tramslated out to
        // the top-level and Ands have been translated to sequences of 
        // recognizers...
        
        let newClauses = clauses->collect(c | c.cnf(self)) then
            starClauses = clauses->reject(c | newClauses->exists(cc | c.name() = cc.name()))
        in self.clauses := newClauses + starClauses
        end
      end
      
      @Operation dprint()
        @For clause in clauses do
          clause.dprint()
        end
      end
      
      @Operation eval(target,env,imports)
        self.dynamics := imports->collect(i | Seq{2|i.contents});
        self.transform()
      end
      
      @Operation FV():Set(String)
        self.lift().FV()
      end
    
      @Operation inheritClauses()
      
        // Get the clauses from the parents.
        // Since clauses are copied down when
        // inherited, just do the direct parents...
        
        self.clauses := clauses + parents->iterate(parent C = Set{} | C + parent.clauses->map("copy"))->reject(c | c.isKindOf(StarClause))
      end

      @Operation inheritedClauses():Set(Clause)
        parents->iterate(parent clauses = Set{} |
          clauses->union(parent.allClauses()))
      end

      @Operation inheritedClauses(name:String):Set(Clause)
        parents->iterate(parent clauses = Set{} |
          clauses->union(parent.allClauses(name)))
      end
      
      @Operation inheritedTerminals():Set(String)
        parents->iterate(parent terminals = Set{} |
          terminals->union(parent.terminals()))
      end
      
      @Operation init(args):Element
        super(args);
        if args->size > 2
        then
          self.parents := args->at(0);
          @For clause in args->at(1) do
            self.add(clause)
          end;
          self.startingSymbol := args->at(2);
          if args->size = 4
          then self.imports := args->at(3)
          else self
          end
        else self
        end
      end
      
      @Operation last():{String}
        
        // Returns the set of all terminals based on the starting terminal...
        
        if startingSymbol <> null
        then self.last(startingSymbol)
        else {}
        end
      end
      
      @Operation last(name:String):{String}
        
        // Returns the set of all terminals based on the supplied terminal...
        
        if self.clauseNamed(name) = null
        then {}
        else self.clauseNamed(name).last(self,[])
        end
      end
      
      @Operation lift()
      
        // Called to produce the grammar creation expression. Various
        // transformations take place that need to occur to produce
        // operations (e.g. for actions). Lifting takes place that 
        // introduces extra clauses at this stage (for example clauses
        // for nested Ors)...
        
        self.liftOrs();
        let parentExps = SetExp("Set",parents->asSeq);
            clauseExps = SetExp("Seq",clauses->collect(clause | clause.lift())->asSeq);
            startingSymbolExp = StrExp(startingSymbol);
            importExps = SetExp("Seq",imports)
        in [| Root::Parser::BNF::Grammar(<parentExps>,<clauseExps>,<startingSymbolExp>,<importExps>).compile() |]
        end
      end
      
      @Operation liftOrs()
        @For clause in clauses do
          clause.liftOrs(self)
        end
      end
      
      @Operation localClauses(name:String):Set(Clause)
        clauses->select(clause | clause.name = name)
      end
      
      @Operation localTerminals():Set(String)
      
        // The terminals defined locally...
        
        clauses->iterate(clause terminals = Set{} |
          terminals->union(clause.body.terminals()))
      end
      
      @Operation maxLocals():Integer
        self.lift().maxLocals()
      end
      
      @Operation newClauseName(prefix)
        let i = 0
        in @While self.clauseNamed(prefix + i) <> null do
             i := i + 1
           end;
           prefix + i
        end
      end
      
      @Operation parseFile(name:String):Element
      
        // Use defaults to parse the named file...
        
        self.parseFile(name,startingSymbol,Seq{})
      end

      @Operation parseFile(file,startNT,imports)
      
        // Use the default tokenizer to parse the file starting
        // with the named non-terminal and using the improted
        // name-spaces to resolve @...
        
        @WithOpenFile(fin <- file)
          self.parseFile(file,startNT,imports,Tokenizer(fin))
        end
      end
      
      @Operation parseFile(file,startNT,imports,tokenizer)
      
        // Parse the input tokens from the supplied tokenizer
        // starting with the suplied non-terminal and the
        // supplied imports for @...
        
        let engine = Machine::Engine()
        in engine.parse(null,self,Seq{Call(startNT)},tokenizer,imports + Seq{XCore,Root})
        end
      end
      
      @Operation pprint(indent)
        let out = StringOutputChannel()
        in self.pprint(out,indent);
           out.getString()
        end
      end
      
      @Operation pprint(outputChannel,indent)
      
        // Write out the grammar in a readable format...
        
        let C = clauses->asSeq
        in @While not C->isEmpty do
              C->head.code(outputChannel,indent);
              C := C->tail
           end
        end
      end
    
      @Operation predict()
        @For clause in clauses do
          clause.predict(self)
        end
      end
      
      @Operation terminals():Set(String)
        if terminals = Set{}
        then self.cacheTerminals()
        else self
        end;
        terminals
      end
    
      @Operation toString()
        "<Grammar" +
          if owner.isReallyKindOf(NamedElement)
          then " for " + owner.name()
          else ""
          end + ">"
      end
       
      @Operation transform()
      
        // Update all the clauses to resolve the PreAction's
        // and transform them into actions by binding all the
        // variables bound by the clause body and turning the
        // action expression into an operation...
        
        let C = clauses->asSeq
        in @While C <> Seq{} do
             C->head.transform();
             C := C->tail
           end;
           self
        end
      end
      
    end
    
// The following is an example of adding new aspects to an existing model.
// We want all classifiers to have a new attribute 'grammar'. This is 
// not part of the Kernel and is only added if we load the parsing aspect
// of XMF.

context Classifier
  @Attribute grammar : Grammar end
  
Classifier.init();

let addGrammar =
  @Operation(addGrammar,element)
    if element.isReallyKindOf(Classifier)
    then Kernel_addAtt(element,"grammar",null)
    end;
    if element.isReallyKindOf(NameSpace)
    then 
      let keys = element.contents.keys()->asSeq
      in @While keys <> Seq{} do
           let key = keys->head
           in let value = element.contents.get(key)
              in if value <> element
                 then addGrammar(addGrammar,element.contents.get(key))
                 end;
                 keys := keys->tail
              end
           end
         end
      end
    end
  end
in addGrammar(addGrammar,Root)
end;