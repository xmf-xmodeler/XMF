parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                                Type Checking                               *
 *                             -------------------                            *
 *                                                                            *
 *  Similar to a predicate. This instruction checks that the current RESULT   *
 *  is of a required type. If it fails then the machine fails otherwise the   *
 *  parse continues.                                                          *
 *                                                                            *
 ******************************************************************************/

import Parser::BNF;
import OCL;

context Parser::BNF

  @Class TypeCheck extends Recognizer
 
    @Attribute type : Seq(String) end
    
    @Constructor(type) end
    
    @Operation code(outputChannel)
      format(outputChannel," : ~{::~;~S~}",Seq{type})
    end
    
    @Operation FV():Set(String)
      Set{}
    end
    
    @Operation last(g:Grammar,called:[String]):{String}
      {}
    end
    
    @Operation toString():String
      ":" + type->separateWith("::")
    end
     
    @Operation toExp(FV:Set(String))
      [| Root::Parser::BNF::TypeCheck(<SetExp("Seq",type->collect(t | StrExp(t)))>) |]
    end 
     
    @Operation transform(FV:Set(String),grammar):Recognizer
      self
    end
     
  end