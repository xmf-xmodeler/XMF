parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                             Token Expected Errors                          *
 *                             ---------------------                          *
 *                                                                            *
 *  A grammar is compiled to produce predictive parse tables. The parse       *
 *  machine gets the next token and uses the prediction tables to work out    *
 *  the next clause to use. If the prediction table has no entry for the next *
 *  token then a TokenExpected exception is thrown.                           *
 *                                                                            *
 ******************************************************************************/

import Exceptions;
import Parser;

context Parser

  @Class TokenExpected extends ParseError
     
    @Attribute token  : String      (?,!) end // The received token.
    @Attribute tokens : Seq(String) (?,!) end // The expected tokens.
    
    @Constructor() ! end
    
    @Constructor(input,errorPos,token,tokens)
      tokens := tokens->asSeq;
      self.tokens := tokens;
      self.setBacktrace();
      @Case tokens->size of
        0 do
          self.message := formats("Not expecting ~S at this point",Seq{token})
        end
        1 do
          self.message := formats("Encountered ~S but expecting token ~S",Seq{token,tokens->head})
        end
        else self.message := formats("Encountered ~S but expecting one of the following tokens ~{,~;~S~}",Seq{token,tokens})
      end
    end
    
    @Operation printBacktrace(short:Boolean)
      if short
      then format(stdout,"~S~%",Seq{self.pprint()})
      else super(short)
      end
    end
    
  end
      