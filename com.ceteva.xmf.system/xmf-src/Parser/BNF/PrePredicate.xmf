parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                            Precompiled Predicates                          *
 *                            ----------------------                          *
 *                                                                            *
 *  Same as precompiled actions.                                              *
 *                                                                            *
 ******************************************************************************/

import Parser::BNF;
import OCL;

context Parser::BNF

  @Class PrePredicate extends Recognizer
    
    @Attribute boolExp : Performable end
    
    @Constructor(boolExp) end
    
    @Operation compiledBody(FV:Set(String))
      let names = FV->asSeq.qsort(@Operation(x,y) x < y end)
      in names->iterate(var exp = boolExp | 
            [| let <var> = stack.ref(frame + 7 + <IntExp(names->indexOf(var))>) 
              in <exp> 
              end 
            |])
      end
    end
    
    @Operation code(out)
       format(out,"? ");
       boolExp.pprint(out,0)
    end
    
    @Operation FV():Set(String)
      Set{}
    end
    
    @Operation last(g:Grammar,called:[String]):{String}
      {}
    end
    
    @Operation toExp(FV:Set(String))
      let args = Seq{Varp("env")};
          cargs = Seq{Varp("stack"),Varp("frame")};
          type = NamedType();
          source = boolExp.pprint()
      in [| let compiledOp = <Operation("anonymous",cargs,type,self.compiledBody(FV))>
            in Root::Parser::BNF::Predicate(ocompiledOp,<StrExp(source)>) 
            end |]
      end
    end
    
    @Operation transform(FV:Set(String),grammar):Recognizer
      let predFun = Compiler::compileToFun("",self.body(FV),Seq{"env"},grammar.dynamics,true);
          source = "No Predicate Saved" 
      in Predicate(predFun,source)
      end
    end
    
  end