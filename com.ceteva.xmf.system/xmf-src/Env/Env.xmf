parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                               Environments                                 *
 *                            -------------------                             *
 *                                                                            *
 *   The abstract Env class implements the basic environment interface.       *
 *   In general you should use only the interface operations in environments  *
 *   except when creating an empty environment NullEnv().                     *
 *                                                                            *
 ******************************************************************************/ 


import Env;

context Env

  @Class Env isabstract
  
    @Doc
      The class Env is abstract and is the superclass of
      all environment implementation classes. Use Env as the 
      type for all environments.
    end
     
    @Operation add(e:Env):Env
    
      @Doc
        Merge two environments to produce a new environment.
        Note that the left hand environment shadows bindings
        in the right hand environment with the same name.
      end
      
      Pair(self,e)
    end
  
    @Operation lookup(key:Element):Element
    
      @Doc
        lookup(key) returns the value of the key in the environment.
        Causes an error is the key is not associated in the environment.
      end
       
      ("Env::lookup: error " + key + " not found in " + self.toString()).println()
    end
    
    @AbstractOp binding(key):Element
    
      @Doc
        Returns the most recently defined binding for the key or null.
      end
      
    end
    
    @Operation binds(key:Element):Boolean
    
      @Doc
        Returns true when the key is associated in the 
        environment otherwise returns false.
      end
       
      "Env::binds: error".println()
    end
    
    @Operation bind(name:String,value:Element):Env
    
      @Doc
         Adds an association between the key and the value. Returns
         a new environment which is a copy of the receiver exten-ded with
         the association.
      end
          
      let binding = Binding()
      in binding.name := name;
         binding.value := value;
         Pair(binding,self)
      end
    end
    
    @AbstractOp dom():Set(Element)
      @Doc
        Returns the set of elements bound in the environment.
      end
    end
    
    @Operation setValue(key,value):Element
    
      @Doc
        Set will update the current value of a key by side effect.
      end
       
       if self.binds(key)
       then self.binding(key).setValue(value)
       else self.error("Env::setValue: unbound key " + key.toString())
       end
       
    end
    
    @Operation toString():String
      @Letrec
        bindingsToString(env) =
          @Case env of
            NullEnv() do
              ""
            end
            Binding(name,value) do
              name + "=" + value.toString()
            end
            Pair(left,right) do
              @Case bindingsToString(left),bindingsToString(right) of
                "",s do
                  s
                end
                s,"" do
                  s
                end
                s1,s2 do
                  s1 + "," + s2
                end
              end
            end
          end
       in "[" + bindingsToString(self) + "]"
       end
     end
  end