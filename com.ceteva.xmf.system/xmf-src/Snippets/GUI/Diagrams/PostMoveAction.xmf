parserImport XOCL;parserImport Snippets;import Clients;import Diagrams;import DiagramsMapping;import ClassMapping;@Snippet "How to take action when a diagram node moves.";// Reset all listeners on classes...Class.removeDiagramListeners();Class.addDiagramListener(  DiagramNodeInstanceListener("ColorName",      // This type of listener is called on instances of Class when    // their corresponding nodes are moved on a diagram...        @Operation(diagramMap:PackageXClassDiagram,elementMap:ClassXClassNode,event:NodeEvent)          // Divide the diagram into quadrants 200 x 200 and colour the name box of the class node      // depending on the particular quadrant...            @When event.isKindOf(PostNodeMoveEvent) do        let red = Color(200,0,0);            green = Color(0,200,0);            blue = Color(0,0,200);            white = Color();            x = elementMap.node().x;            y = elementMap.node().y;            xlim = 200;            ylim = 200 then            color =               if x < xlim and y < ylim then red               elseif x < xlim and y >= ylim then green               elseif x >= xlim and y < ylim then blue               else white              end        in elementMap.node().name.setFillColor(color)        end      end    end));    context ElementXDiagram  @Operation elementXNodeChangedState(mapping:ElementXNode,event:DiagramEvent)          // Called when the element in the mapping is an object whose state has just changed.      // Allows diagram-wide actions to take place...            mapping.element().changedOnDiagram(self,mapping,event)    end