parserImport XOCL;
parserImport Tools::Basic;
parserImport Tools::DiagramTools::Types;
parserImport Tools::DiagramTools::Structure;
parserImport Tools::Menus;
parserImport Tools::Events;
parserImport Tools::DiagramTools::Types::DisplayTypes;
parserImport Snippets;

import Tools;
import DiagramTools;
import Structure;
import Graphs;
import DiagramEvents;

@Snippet "A diagram tool for simple class modelling.";

// This file provides an example of how to define a simple diagram editor 
// for a standard class modelling language. It can be used as the basis 
// for variations on a diagram language over XCore packages.
// The file defines a diagram XTool over XCore::Package, XCore::Class
// and XCore::Attribute. Classes are shown as standard boxes on a diagram.
// Attributes with simple types are shown as properties within the appropriate
// class-box. Attributes whose types are other classes are shown as edges
// where the source of the edge is the owning class, and the target of the 
// edge is the type of the attribute. Multiplicities of exactly 1 are supported.
//
// An XTool diagram editor consists of the following components:
//
// (1) A Tool Descriptor. This is added to the root element of the diagram
//     editor (in this case Package), and is used as a container for the other
//     elements of the XTool.
// (2) A Tool Type. This describes the features of the diagram in terms of
//     node and edge types, their respective display elements, menus and
//     creation buttons that appear in the tool palette.
// (3) An Element Manager. This describes handlers for a standard collection 
//     of diagram editing events. Each event occurs when the user interacts
//     with a diagram. The handlers can be used to manipulate the model
//     element (in this case packages, classes and attributes) that are
//     associated with the diagram view.
// (4) A collection of Observers. The model elements that are associated with 
//     a diagram can be explicitly observed by an XTool. If so, changes to 
//     the model element are fed to the appropriate observers, which in turn
//     can make updates to the diagram.
//
// Element managers and observers together implement the MVC pattern where
// diagram changes are propagated to the model via the element manager and
// the model element changes are propagated to the diagram via the observers.
// Normally an XTool will have both an element manager and observers.
//

@ToolDescriptor Package::PackageTool
  // A tool descriptor is defined within the name-space of the element
  // type being controlled by the XTool. In this case the element is Package
  // and the tool descriptor is called PackageTool.
end;
  
context Root

  // A tool type defines the featrues of the diagram editor. A diagram consists
  // of node types, edge types, and a tool bar. Most elements defined in a 
  // tool type have names so that they can be referenced. For example, a node
  // of type Class can reference the text element on the diagram using the path
  // ["nodeBox","nameBox","name"]. Most of the display elements have properties
  // that control how the display is drawn on the screen.
  
  @ToolType PackageEditor
    // Class nodes can be connected using inheritance and attribute edges...
    @NodeType Class(hasport)
      // Place a box round the contents of the class node...
      @Box nodeBox minWidth = 100
        // Place a box round the name of the class...
        @Box nameBox
          // Display the name of the class...
          @PaddedText name(CENTRE) "Class Name" pad = 3 end
        end
        // The body of the class is a sequence of simple valued attributes...
        @Box bodyBox
          // There can be any number of attributes in the box (starting with 0)...
          @Star
            // An attribute consists of a name, ':', then the type of the attribute...
           @PaddedBox attribute(HORIZONTAL,ALIGN,hideLeft,hideRight,hideTop,hideBottom) pad = 1
              @PaddedText name(LEFT)  "name"    pad = 2 end
              @Text sep(CENTRE)       ":"               end
              @PaddedText type(RIGHT) "Boolean" pad = 2 end
              // Attributes can be deleted, node layout is performed after a delete...
              @Menu @MenuAction Delete self.delete(true) end end
            end
          end
        end
      end
      @Menu
        // This menu will appear on each diagram node of type Class.
        @MenuAction Delete self.delete()                                           end
        // Adding a new attribute to the class class via its box...
        @MenuAction AddAtt self.ref1(Seq{"nodeBox","bodyBox"}).addNew("attribute") end
      end
    end
    // Inheritance arrows go from child to parent...
    @EdgeType Inheritance Class -> Class targetHead = whiteArrow
      @Menu @MenuAction Delete self.delete() end end
    end
    // Attribute arrows go from owner to type. The label is the name of the attribute...
    @EdgeType Attribute Class -> Class targetHead = arrow
      @Label name(end,10,10) "name" end
      @Menu @MenuAction Delete self.delete() end end
    end
    // A single group offers the creation buttons for the diagram components...
    @ToolBar 
      @ToolGroup Operations
        @ToolButton Class              icon = "XCore/Class.gif"          end 
        @ToolButton Inheritance isEdge icon = "XCore/Generalization.gif" end
        @ToolButton Attribute isEdge   icon = "XCore/Attribute.gif"      end
      end
    end
  end

context Root

// An element manager should be added to a name-space so that it can
// be referenced. Root is as good a place as any. In this case the 
// name of the element manager is PackageManager and can be referenced
// as Root::PackageManager. In addition, the element manager should be 
// added to a tool descriptor. In this case the tool descriptor is
// Package::PackageTool. The '!' below is optional and is used to
// print out those events that have no handlers...

@ElementManager Package::PackageTool::PackageManager !

  // An element manager consists of a collection of event handlers that
  // process events raised by modifications to the diagram created by
  // mouse-actions. The particular events depend on the tool type that
  // will be associated with the element manager. The names of the event
  // handlers are systematically created from a loist of event types
  // associated with the elements defined in a tool type. The event types 
  // are:
  //
  // New_N()            where N is the name of a node or edge type.
  // N_Removed()        where N is the name of a node or edge type.
  // P_Changed()        where P is a '_' separated path to text or edge label.
  // N_Target_Changed() where N is the name of an edge type.
  // N_Source_Changed() where N is the name of an edge type.
  // Add_To_P()         where P is a '_' separated path to a container.
  //
  // Other types of events are not used in this example. They handle things 
  // like mouse clicks, node movement, selection etc. They are defined in the
  // folder xmf-src/Tools/DiagramTools/DiagramEvents.
  //
  // In each case the event handler is supplied with the event which contains
  // properties relating to the diagram. Minimally, the tool that controls
  // the diagram is e.tool(). Other properties are as follows:
  //
  // NewNode:              e.node()
  // NewEdge:              e.edge(), e.source(), e.target()
  // NodeRemoved:          e.node()
  // EdgeRemoved:          e.edge(), e.source(), e.target()
  // AttributeChanged:     e.root(), e.path(),   e.value(), e.new(), e.old()
  // TargetChanged:        e.edge(), e.new(),    e.old()
  // SourceChanged:        e.edge(), e.new(),    e.old()
  // AttributeValueAdded:  e.root(), e.path(),   e.value()
  //
  // The display element that is nested on a diagram node can be referenced using
  // the node operations 'ref' and 'ref1' both of which take a path as an argument
  // and return the sequence of display elements or the first display element
  // found at the path respectively. These are used to pick out nested display 
  // elements on nodes where the paths correspond to those defined for the node
  // in the tool type.
  //
  // An XTool contains a table that can be used to register associations between
  // elements. Typically this is used to associate diagram elements with model
  // elements and implements the MVC relationship necessary to propagate events.
  // The operation 'register' is used to update the table and the operation 'find'
  // is used to perform lookup. When an association is no longer needed for an
  // element e, deregister(e) will remove it from the table.
  //
  // When new model elements are created within an event handler they should be
  // registered with the tool in order that changes to the element can be detected
  // by observers. For example, when a new class C is created within a node creation
  // event handler, C.observeBy(t) ensures that the observers associated with
  // the tool will get changes that occur to C. When C is no longer required, the
  // observation is terminated by C.ignoreBy(t).
  
  
  @EventHandler New_Class()
  
    // A new class node has been created on the diagram. Create a new class
    // and add it to the element that is managed by the tool (the package).
    // Housekeeping is then performed by associating the class with the node
    // using 'register', ensuring that changes to the class are fed to any
    // observers that are registered with the tool using 'observeBy' and setting
    // the name on the diagram node to be the same name as that of the class...
    
    let classNode = event.node() then
        nameBox = classNode.ref1(Seq{"nodeBox","nameBox","name"});
        className = event.tool.element.newName("Class") then
        class = XCore::Class(className)
    in register(classNode,class);
       register(class,classNode);
       class.observeBy(event.tool());
       event.tool.element.add(class);
       nameBox.setText(className)
    end
  end
  
  @EventHandler Class_Removed()
  
    // The association between the node and the class allows us to
    // easily remove the class from the package...
    
    event.tool.element.remove(find(event.node()))
  end
  
  @EventHandler Class_nodeBox_nameBox_name_Changed()
    
    // Note how the name of the event handler follows the path to the 
    // text as defined in the tool type. The root element on an event
    // takes us back to the node that contains the element that changed
    // on the diagram. This is associated with the class whose name
    // is changed to be the new value as defined on the diagram...
    
    let class = find(event.root())
    in class.setName(event.new())
    end
  end
  
  @EventHandler New_Inheritance()
  
    // An edge has been added on the diagram. Use the table to find the
    // two classes and update the child class to inherit from the parent 
    // class. Change the association between the edge so that the source 
    // and target classes can be found easily...
    
    let parent = find(event.target());
        child = find(event.source())
    in child.addParent(parent);
       register(event.edge(),Seq{child,parent})
    end
  end
  
  @EventHandler Inheritance_Removed()
  
    // The edge has been removed from the diagram...
    
    let parent = find(event.target());
        child = find(event.source())
    in child.removeParent(parent);
       deregister(event.edge())
    end
  end
  
  @EventHandler Inheritance_Target_Changed()
  
    // The target end of an inheritance has changed. This means that
    // the child class must be modified so that the old parent class
    // is removed and the new class is added...
    
    let child = find(event.edge())->at(0);
        parent = find(event.new())
    in child.removeParent(find(event.old()));
       child.addParent(parent);
       register(event.edge(),Seq{child,parent})
    end
  end
  
  @EventHandler Inheritance_Source_Changed()
  
    // If the source of an inheritance edge is changed, two classes must be
    // modified. The original child has the parent removed and the new
    // child has the parent added...
    
    let child = find(event.old());
        parent = find(event.edge())->at(1);
        newChild = find(event.new())
    in child.removeParent(parent);
       newChild.addParent(parent);
       register(event.edge(),Seq{newChild,parent})
    end
  end
  
  @EventHandler New_Attribute()
  
    // A new attribute edge has been added. Correspondingly, a new attribute
    // is created whose type is defined by the target class of the edge.
    // The attribute is registered against the edge and its label for ease of
    // reference when things change. The attribute is observed by the tool
    // so that of the attribute is modified then the appropriate observer is
    // activated...
    
    let class = find(event.source());
        type = find(event.target()) then 
        name = event.edge().ref("name");
        attributeName = class.newName("att") then
        attribute = XCore::Attribute(attributeName,type)
    in register(event.edge(),attribute);
       register(name,attribute);
       register(attribute,event.edge());
       attribute.observeBy(event.tool());
       class.add(attribute);
       name.textChanged(attributeName)
    end
  end
  
  @EventHandler Attribute_Removed()
    let class = find(event.source());
        attribute = find(event.edge())
    in class.remove(attribute)
    end
  end
  
  @EventHandler Attribute_name_Changed()
    let attribute = find(event.value())
    in attribute.setName(event.new())
    end
  end
  
  @EventHandler Attribute_Target_Changed()
    let newType = find(event.new());
        attribute = find(event.edge())
    in attribute.type := newType
    end
  end
  
  @EventHandler Attribute_Source_Changed()
  
    // Careful when performing changes to model elements where there are
    // observers. In this case we need to suspend the daemons on the class
    // because otherwise the corresponding observer will try to modify the
    // diagram and create a loop...
    
    let attribute = find(event.edge())
    in @WithoutDaemons(attribute.owner()) 
         attribute.owner().remove(attribute);
         find(event.new()).add(attribute)
       end
    end
  end
  
  @EventHandler Add_To_Class_nodeBox_bodyBox_attribute()
  
    // A nested box has been added to a class. Extract the name and the
    // type from the box and create an attribute. Register the attribute
    // and have it observed by the tool...
    
    let class = find(event.root()) then
        name = event.value().ref1(Seq{"name"});
        type = event.value().ref1(Seq{"type"});
        attributeName = class.newName("att") then
        attribute = XCore::Attribute(attributeName,Boolean)
    in @WithoutDaemons(class) class.add(attribute) end;
       register(name,attribute);
       register(type,attribute);
       register(attribute,event.value());
       attribute.observeBy(event.tool());
       name.setText(attributeName)
    end
  end
  
  @EventHandler Class_nodeBox_bodyBox_attribute_Removed()
    let attribute = find(event.display().ref1(Seq{"name"}))
    in attribute.owner().remove(attribute)
    end
  end
  
  @EventHandler Class_nodeBox_bodyBox_attribute_name_Changed()
  
    // The name text has been updated on the diagram. The corresponding
    // attribute name must be changed...
    
    let class = find(event.root()) then
        att = class.getAttribute(event.old())
    in if att <> null
       then att.setName(event.new())
       end
    end
  end
  
  @EventHandler Class_nodeBox_bodyBox_attribute_type_Changed()
    let attribute = find(event.value());
        typeName = event.new()
    in @Case typeName of 
         "Element" do attribute.type := Element end
         "String"  do attribute.type := String  end
         "Integer" do attribute.type := Integer end
         "Boolean" do attribute.type := Boolean end
         "Float"   do attribute.type := Float   end
         else 
           xmf.warning("Unknown type for attribute: " + typeName);
           event.value().setText(event.old())
       end
    end
  end
end

// Observers are added to the package manager. Each observer declares the type
// of model element, the attribute of the model element, and the observation
// mode. The modes are:
//
// +: Something is added to a collection.
// -: Something is removed from a collection.
// !: A non-collection based attribute changed value.
//
// In each case the following variables are available:
//
// new:        The value or values that have been added.
// old:        The value or values that have been removed.
// tool:       The tool that is observing.
// register:   An operation that makes an association in the tool.
// deregister: Remove an element from the association table.
// find:       Lookup an element in the tool association table.
//
// Typically an observer will use the assoiation table from the tool
// to find the appropriate diagram element and make some changes
// to the display elements. Care shoulw be taken to prevent the
// changines causing event ping-pong. The WithoutEvents construct
// is provided for this purpose.

@Observer Package::PackageTool::PackageManager(Package) classes +

  // Classes have been added to the package being monitored by the tool.
  // Create a new class node in the tool, register it agaist the class
  // and ensure that the class is being observed by the tool...
  
  @WithoutEvents(tool)
    @For newClass in new do
      if find(newClass) = null
      then 
        let toolNode = tool.newNode("Class",10,10,tool.diagram)
        in register(newClass,toolNode);
           register(toolNode,newClass);
           newClass.observeBy(tool);
           toolNode.ref1(Seq{"nodeBox","nameBox","name"}).setText(newClass.name)
        end
      end
    end
  end
end;

@Observer Package::PackageTool::PackageManager(Package) classes -

  // Classes have been removed. Delete the class node for each class,
  // deregister the class and stop observing it...
  
  @WithoutEvents(tool)
    @For oldClass in old do
      if find(oldClass) <> null
      then 
        find(oldClass).delete(); 
        deregister(find(oldClass));
        deregister(oldClass);
        oldClass.ignoreBy(tool)
      end
    end
  end
end;

@Observer Package::PackageTool::PackageManager(Class) name !

  // The name of a class has changed. Navigate to the text on the class
  // node and change the text...
  
  @WithoutEvents(tool)
    find(object).ref1(Seq{"nodeBox","nameBox","name"}).textChanged(new)
  end
end;

@Observer Package::PackageTool::PackageManager(Class) attributes +

  // Attributes have been added to a class...
  
  @WithoutEvents(tool)
    @For att in new do
    
      // Assume we only add simply typed attributes via non-diagram
      // edits. Otherwise, add an else clause that handles adding 
      // diagram edges...
      
      if att.type.isKindOf(DataType)
      then
        let class = att.owner then
            attBox = tool.find(class).ref1(["nodeBox","bodyBox"]).addNew("attribute")
        in attBox.ref1(["name"]).textChanged(att.name);
           attBox.ref1(["type"]).textChanged(att.type.name);
           att.observeBy(tool,true);
           register(att,attBox);
           register(attBox,att);
           register(attBox.ref1(["name"]),att)
        end
      end
    end
  end
end;

@Observer Package::PackageTool::PackageManager(Class) attributes -
  @WithoutEvents(tool)
    @For att in old do
      if att.type.isKindOf(DataType)
      then
        let attBox = find(att)
        in if attBox <> null
           then 
             attBox.delete();
             deregister(attBox);
             deregister(att);
             att.ignoreBy(tool)
           end
        end
      else
        let edge = find(att)
        in if edge <> null
           then 
             edge.delete();
             deregister(edge);
             deregister(att);
             att.ignoreBy(tool)
           end
        end
      end
    end
  end
end;

@Observer Package::PackageTool::PackageManager(Attribute) name !

  // An attribute may be represented as an edge or in a box on a node.
  // Look up the diagram element that is registered against the attribute
  // and perform an appropriate change to the text...
  
  @WithoutEvents(tool)
    @TypeCase(find(object))
      Tools::DiagramTools::Diagrams::Edge do 
        let edge = find(object)
        in edge.ref("name").textChanged(new)
        end
      end
      else find(object).ref1(Seq{"name"}).textChanged(new)
    end
    
  end
end;

@Observer Package::PackageTool::PackageManager(Attribute) type !

  // Assume that the only types we change are data types, therefore we
  // only need to deal with attribute boxes...
  
  @WithoutEvents(tool)
    if object.type.isKindOf(DataType)
    then find(object).ref1(Seq{"type"}).textChanged(object.type.name)
    end
  end
end;

context Root
  @Operation test()
  
    // This test will create a new package and use it as the basis for a tool.
    // A tool is created by supplying a tool type, and a tool manager. The
    // fourth argument is the managed object (in this case the package)...
    
    let package = XCore::Package("D") then
        tool = Tool(PackageEditor,"Package Editor",PackageManager,package)
    in // Remember to register the tool with the XMF tool manager...
       xmf.toolManager().addTool(tool);
       // Browse the package so that we see how the MVC works...
       package.browse();
       // Remember to observe the root object by the tool...
       package.observeBy(tool,true);
       // Show the view...
       tool.showDiagram();
       tool
    end
  end
