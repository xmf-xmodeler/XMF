parserImport XOCL;
parserImport XOCL;
parserImport Walkers;

import Walkers;
import Docs;

context Root
  @Package Engine
    // For documentation purposes...
    @Class Frame
      @Attribute indent : Integer (?,!) end
      @Attribute code : Seq(Doc) (?,!) end
      @Attribute cut : Seq(Fail) (?,!) end
      @Constructor(indent,code,cut) ! end
    end
    @Class Fail extends Frame
      @Attribute textPosition   : Integer (?,!)                    end
      @Attribute linePosition   : Integer (?,!)                    end
      @Attribute ribbonPosition : Integer (?,!)                    end
      @Constructor(indent,textPosition,linePosition,ribbonPosition,code,cut) ! end
    end
    @Class Machine
      @Attribute stack : Seq(Frame) end
      @Attribute fail  : Seq(Fail)  end
      @Attribute buffer : Buffer = Buffer(100,true) end
      @Attribute pageWidth      : Integer = 80               end
      @Attribute ribbonWidth    : Integer = 50               end
      @Attribute textPosition   : Integer                    end
      @Attribute linePosition   : Integer                    end
      @Attribute ribbonPosition : Integer                    end
      
      @Constructor(pageWidth,ribbonWidth) ! end
      
      @Operation fail()
        self.stack := fail->head.stack();
        self.stack := Seq{fail->head | stack};
        self.textPosition := fail->head.textPosition();
        self.linePosition := fail->head.linePosition();
        self.ribbonPosition := fail->head.ribbonPosition();
        self.fail := fail->tail
      end
      
      @Operation load(code)
        self.stack := Seq{};
        self.pushFrame(0,code,Seq{});
        self.textPosition := 0;
        self.linePosition := 0;
        self.ribbonPosition := 0;
        self.fail := Seq{};
        buffer.setSize(0)
      end
      
      @Operation newline()
        let frame = stack->head
        in emit("\n" + spaces(frame.indent()),buffer,textPosition);
           self.textPosition := textPosition + frame.indent() + 1;
           self.linePosition := frame.indent();
           self.ribbonPosition := 0
        end
      end
      
      @Operation pushFail(code)
        self.fail := Seq{
          Fail(stack->head.indent(),
               textPosition,
               linePosition,
               ribbonPosition,
               code,
               stack->head.cut()) | 
          fail}
      end
      
      @Operation pushFrame(indent,code,cut)
        self.stack := Seq{Frame(indent,code,cut) | stack}
      end
      
      
      @Operation run(w,r)
        @While not stack->isEmpty do
          self.pprint(w,r,5,0).println();
          if stack->head.code()->isEmpty
          then self.stack := stack->tail
          else
            let frame = stack->head then
                instr = frame.code()->head 
            in stack->head.setCode(frame.code()->tail);
            
               @Case instr of
                 Just(text) do
                   if canPrint(text,pageWidth,ribbonWidth,linePosition,ribbonPosition) or fail->isEmpty
                   then self.write(text)
                   else self.fail() 
                   end
                 end
                 Order(left,right) do
                   frame.setCode(Seq{left,right} + frame.code()) 
                 end
                 Indent(cols,doc) do
                   self.pushFrame(frame.indent() + cols,Seq{doc},frame.cut())
                 end
                 Block(doc) do
                   self.pushFrame(linePosition,Seq{doc},frame.cut())
                 end
                 Cut(doc) do 
                   self.fail := frame.cut()
                 end
                 Mark(doc) do
                   self.pushFrame(frame.indent(),Seq{doc},fail)
                 end
                 Newline() do
                   self.newline()
                 end
                 Alt(left,right) do
                   frame.setCode(Seq{left | frame.code()});
                   self.pushFail(Seq{right | frame.code()})
                 end
               end

            end
          end
        end
      end

        
      @Operation write(text)
        emit(text,buffer,textPosition);
        self.textPosition := textPosition + text->size;
        self.linePosition := linePosition + text->size;
        self.ribbonPosition := ribbonPosition + text->size
      end
        
    end
  end
  

  
@Handler Engine::Machine in PPrint(machine,depth,encountered)
  Block(
    Indent(2,
      Order(
        Just("Machine[" + 
          machine.pageWidth + ","  + 
          machine.ribbonWidth + "," +
          machine.textPosition + "," + 
          machine.linePosition + "," + 
          machine.ribbonPosition + ","),
        Order(Newline(),
          Order(Just("[" + machine.buffer.toString() + "],"),
            Order(Newline(),
              Order(self.dispatch(machine.stack,depth+1),
                Order(Just(","),
                  Order(Newline(),
                    Order(self.dispatch(machine.fail,depth+1),
                      Just("]")))))))))))
end;

@Handler Just in PPrint(just,depth,encountered)
  if depth > self.depth
  then Just("...")
  else just
  end
end;

@Handler Order in PPrint(order,depth,encountered)
  Alt(
    Order(self.dispatch(order.left(),depth),Order(Just(";"),self.dispatch(order.right(),depth+1))),
    Block(Order(self.dispatch(order.left(),depth+1),Order(Just(";"),Order(Newline(),self.dispatch(order.right(),depth+1))))))
end;

@Handler Indent in PPrint(indent,depth,en)
  Block(
    Order(Just("Indent[" + indent.cols()),
      Order(
        Indent(2,
          Order(Newline(),
            self.dispatch(indent.doc(),depth+1))),
        Just("]"))))
end;

@Handler Engine::Frame in PPrint(frame,depth,encountered)
  //Block(
    Order(
      Just("Frame[" + frame.indent() + ","),
      Indent(2,
        Order(Newline(),
          Order(Just("code = "),
            Order(self.dispatch(frame.code(),depth+1),
              Order(Order(Just(","),Newline()),
                Order(Just("cut = "),
                  Order(self.dispatch(frame.cut(),depth+1),
                    Order(Newline(),Just("]"))))))))))
end;