parserImport XOCL;
parserImport Walkers;

import Walkers;
import Docs;
import PPrint;

context PPrint
  @Operation printPair(pprint,pair,depth)
    let head = pprint.dispatch(pair->head,depth+1);
        tail = pprint.dispatch(pair->tail,depth+1)
    in Mark(
         Block(
           Order(
             SEQ,
             Alt(
               Order(head,Order(BAR,Order(tail,RCURL))),
               Order(Indent(2,
                 Order(Newline(),
                   Order(Order(head,BAR),
                     Order(Newline(),tail)))),
                 Order(Newline(),RCURL))))))
    end
  end
  
@Handler XCore::SeqOfElement in PPrint(seq,depth,encountered) 
  if not seq.isProperSequence()
  then PPrint::printPair(self,seq,depth)
  else
    let just = self.mark(seq)
    in if encountered
       then self.ref(seq)
       else
         let docs = seq->take(length.min(seq->size))->collect(e | self.dispatch(e,depth+1)) then
             docs = if docs->isEmpty then Seq{} else docs->butLast->collect(d | Order(d,COMMA)) + Seq{docs->last} end then
             singleLine = docs->iterate(d l = NOTHING | Order(l,d));
             nestedLine = Indent(2,docs->iterate(d l = Just("") | Order(l,Order(Newline(),d))))
         in Mark(
              Block(
                Order(
                  Order(just,LSQUARE),
                  Order(
                    Alt(singleLine,nestedLine),
                    Cut(Just(if seq->size <> docs->size then ",...]" else "]" end))))))
         end
       end     
     end
   end
  end;        