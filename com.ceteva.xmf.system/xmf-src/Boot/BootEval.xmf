/******************************************************************************
 *                                                                            *
 *                            Booting the Evaluator                           *
 *                            ---------------------                           *
 *                                                                            *
 *     Create an image that contains all the development facilities including *
 *     the compiler and evaluator.                                            *
 *                                                                            *
 ******************************************************************************/ 
 
@Operation(bootArgs)

  try

    // Load all packages that the evaluator depends on.
    // Assume that the base level XMF image is running.
  
    let hasArg = @Operation(name) bootArgs->exists(pair | pair->head = name) end;
        getArg = @Operation(name) bootArgs->select(pair | pair->head = name)->head->tail end then
        boot = 
          @Operation(packageName) 
            if (hasArg(packageName) andthen getArg(packageName).asBool()) or not hasArg(packageName)
            then (packageName + "/Boot.o").loadBin(false)
            end
          end;
        bootManifest = 
          @Operation(packageName) 
            if (hasArg(packageName) andthen getArg(packageName).asBool()) or not hasArg(packageName)
            then (packageName + "/Manifest.o").loadBin(true).load(packageName)
            end
          end
    in 
    
       // Each of the following calls to boot checks to see of the appropriate
       // command line argument has been supplied and whether the value is true.
       // If true then the appropriate boot file is loaded...
       
       boot("Comms");
       boot("Constraints");
       boot("Java");
       boot("Format");
       boot("Env");
       boot("Arrays");
       boot("Graphs");
       boot("Stacks");
       boot("OCL");
       boot("Parser");
       boot("Instrs");
       boot("Assembler");
       boot("Compiler");
       boot("Grammar");
       boot("Extensions");
       boot("Extensions/Compiler");
       boot("Undo");  
       boot("Aspects");
       boot("Doc");
       boot("Eval");
       boot("XMatch");
       boot("TopLevel");
       boot("Walkers");
       boot("XML");
       boot("XMap");
       boot("Manifests");
       boot("Associations");
       bootManifest("Deploy");
       bootManifest("Signatures");
       bootManifest("Languages");
       bootManifest("DocTables");
       bootManifest("Debug");
       bootManifest("XRules");
       bootManifest("CodeGen");
       bootManifest("PPrint");
       bootManifest("Comprehensions");
       bootManifest("Import");

       // Save the system.
  
       gc();

       let imageFile = if hasArg("image") then getArg("image") else "XMF.img" end then
           startup = saveMachineState(imageFile)
       in if startup = true
          then "Evaluator Build Completed."
          else 
      
            // If we supply an initialisation arg when the
            // image is loaded then it should be a binary file
            // which is loaded and evaluated. Otherwise, start
            // the top level loop.
       
            xmf.setStartupArgs(startup);
       
            let hasArg = @Operation(name) startup->exists(pair | pair->head = name) end;
                getArg = @Operation(name) startup->select(pair | pair->head = name)->head->tail end
            in 
               if hasArg("user")
               then xmf.setUser(getArg("user"))
               else xmf.setUser("Unknown User")
               end;
               if hasArg("home")
               then 
                 let home = getArg("home")
                 in xmf.setHomeDir(home)
                 end
               end;
               if hasArg("doc")
               then 
                 let doc = getArg("doc")
                 in xmf.setDocDir(doc)
                 end
               end;
               if hasArg("version")
               then 
                 xmf.setVersion(getArg("version"))
               end;
               if hasArg("compileAll")
               then 
                 let compileAll = getArg("compileAll")
                 in Compiler::compileAll := compileAll.asBool()
                 end
               end;
               if hasArg("saveSource")
               then 
                 let saveSource = getArg("saveSource")
                 in Compiler::saveSource := saveSource.asBool()
                 end
               end;
               if hasArg("projects")
               then 
                 let projects = getArg("projects")
                 in xmf.setProperty("projDir",projects);
                    XMF.add(@Operation projDir() self.property("projDir") end)
                 end
               end;
               if not hasArg("filename")
               then 
                 if hasArg("initfile")
                 then
                   try getArg("initfile").loadBin(false)
                   catch(exception)
                     xmf.raise(exception)
                   end
                 end;
                 let topLevel = TopLevel::Loop(stdin,stdout)
                 in xmf.setProperty("topLevel",topLevel);
                    XMF.add(@Operation topLevel() self.property("topLevel") end);
                    topLevel.loop()
                 end
               else 
                 try
                   getArg("filename").loadBin(false)
                 catch(exception)
                   xmf.raise(exception)
                 end
               end
            end
          end
       end
     end
  catch(exception)
    exception.message.println()
  end
end;
