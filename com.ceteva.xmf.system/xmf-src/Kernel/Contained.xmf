/******************************************************************************
 *                                                                            *
 *                           Contained Elements                               *
 *                           ------------------                               *
 *                                                                            *
 *   A contained element is something with an owner. In general the owner is  *
 *   a container and the element is in the contents field of the container.   *
 *   Generally contained elements are used when access to the container is    *
 *   required, for example to delete an element via the child, the child must *
 *   have access to the parent. Since the contents/owned relationship         *
 *   produces a cycle, you should be careful since a generic walker (for      *
 *   example) might walk all slots and therefore go into a loop. Often a      *
 *   contained element will lead via the owner slot to a name-space. Again,   *
 *   be careful with generic walkers since name-spaces are usually connected  *
 *   up to Root and therefore to a vast collection of elements.               *
 *                                                                            *
 *   NamedElement is a specialization of ContainedElement for things that     *
 *   live in name-spaces. You are likely to inherit from NamedElement to      *
 *   create elements the live in name-spaces.                                 *
 *                                                                            *
 ******************************************************************************/ 

context Contained
  @Operation addTo(container)
    self.owner := container;
    container
  end
  
context Contained
  @Operation allOwners():Seq(Container)
    @Doc
      Returns the sequence of containers found by continually
      traversing the owner slots starting with the receiver.
    end
    if self.owner().isReallyKindOf(Container) and 
       self.owner().isKindOf(Contained)
    then 
      if self.owner().owner() = self.owner()
      then Seq{self.owner()}
      else Seq{self.owner() | self.owner().allOwners()}
      end
    else 
      if self.owner() <> null then Seq{self.owner()} else Seq{} end
    end
  end

context Contained
  // Recursively delete self and all contents
  @Operation deleteRecursive()
    if self.owner.isReallyKindOf(Container)
    then
      self.owner.remove(self)
    end;
    self
  end

context Contained
  @Operation owner():Element
    @Doc
      Provides access to the container of the contained
      element. Use this in preference to the attribute
      with the same name.
    end
    self.owner 
  end