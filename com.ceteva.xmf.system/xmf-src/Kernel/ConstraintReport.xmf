parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                            Constraint Reports                              *
 *                            ------------------                              *
 *                                                                            *
 *   Used to represent the result of a constraint check via the classify(x)   *
 *   message. The report contains a structured description showing whether the*
 *   classification was successful and the sub-classifications that were      *
 *   performed. Where the classification fails, the report contains an        *
 *   optional reason.                                                         *
 *                                                                            *
 ******************************************************************************/ 

context XCore

  @Class ConstraintReport
  
    @Doc 
      A constraint report is produced by sen-ding a classify message
      to an element or a check constraints message to a classifier.
      A report is a tree structured element describing the constraints
      that were performed and their outcomes. Note that internal
      nodes of the tree may have dummy constraint reports used as
      containers of sub-constraint reports. Such dummies have a
      null constraint and an empty reason, but the satisfied boolean
      is the conjunction of the sub-reports.
    end
  
    @Attribute children   : Seq(ConstraintReport) (?,+) end    
    @Attribute candidate  : Element               (?) end
    @Attribute constraint : Constraint            (?) end
    @Attribute satisfied  : Boolean               (?) end
    @Attribute reason     : String                (?) end
    
    @Constructor(candidate,constraint,satisfied) end
    @Constructor(candidate,constraint,satisfied,reason,children) end
    @Constructor(candidate,constraint,satisfied,reason) ! end
    
    @Operation failures():Seq(ConstraintReport)
    
      // Calculate all the contained constraint reports
      // that failed...
      
      children->iterate(report F = Seq{} |
        if report.satisfied()
        then F + report.failures()
        else F->including(report) + report.failures()
        end)
    end
    
    @Operation reportString():String
    
      // Return the report as a string...
      
      let out = IO::StringOutputChannel()
      in self.writeReport(out);
         out.getString()
      end
    end
    
    @Operation writeReport(out)
    
      // Write the report to the supplied output channel...
      
      let success = if satisfied then "succeeded" else "failed" end
      in if constraint <> null
         then
           format(out,"The constraint ~S ~S ~S ",Seq{constraint.name(),success,candidate});
           if reason = ""
           then format(out,"(no reason given)~%")
           else format(out,"~S~%",Seq{reason})
           end
         end;
         @For child in children do
           format(out,"~%");
           child.writeReport(out)
         end
      end
    end
      
    
  end