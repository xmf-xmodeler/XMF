parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                            Foreign Operations                              *
 *                            ------------------                              *
 *                                                                            *
 *   A foreign operation is one that has been defined as part of the VM and   *
 *   can be applied to arguments by the VM. Essentially these are Java        *
 *   methods that act as though they are XMF operations. Typically these are  *
 *   found in the Root name-space under names such as Kernel_xyz.             *
 *                                                                            *
 *   The foreign operation mechanism has been somewhat superceded by the Java *
 *   language interface where any Java class can be loaded and its static     *
 *   methods called directly. However, XMF knows about some of the Kernel_xyz *
 *   operations (e.g. in the compiler) and treats them specially.             *
 *                                                                            *
 *   The foreign operation mechanism was intended to allow the XMF system to  *
 *   escape out into Java when it needed to. You probably will not need to    *
 *   call these directly or add your own since the Java interface should      *
 *   suffice.                                                                 *
 *                                                                            *
 *   The operations defined in this file make the foreign operations behave   *
 *   as though they are basic XMF operations.                                 *     
 *                                                                            *
 ******************************************************************************/ 

context ForeignOperation
  @Operation arity():Integer
    self.arity
  end

context ForeignOperation
  @Operation addDaemon(d):Element
    self // cannot add a daemon to a ForeignOperation
  end

context ForeignOperation
  @Operation addMultiDaemon(d,target)
    self // cannot add a multidaemon to a ForeignOperation
  end  

context ForeignOperation
  @Operation daemons()
    Seq{} // no daemons on a ForeignOperation
  end

context ForeignOperation
  @Operation get(name:String)
    @Case name.toString() of 
      "arity"         do self.arity()      end
      "name"          do self.name()       end
      "documentation" do noDoc()           end
      "owner"         do self.owner()      end
      "type"          do Element           end
      else self.error("No slot named " + name.toString())
    end
  end
  
context ForeignOperation
  @Operation getStructuralFeatureNames():Set(String)
    Set{"name"}
  end
  
context ForeignOperation
  @Operation hasSlot(name:String):Boolean
    ForeignOperation.allAttributes().name->map("toString")->includes(name.toString())
  end
  
context ForeignOperation
  @Operation invoke(target,args)
    Kernel_invoke(self,target,args,Seq{})
  end
  
context ForeignOperation
  @Operation isVarArgs():Boolean
    false
  end
  
context ForeignOperation
  @Operation name():String
    self.name
  end
  
context ForeignOperation
  @Operation owner():NameSpace
    Root
  end

context ForeignOperation
  @Operation removeDaemon(d,target):Element
    self // cannot remove a daemon from a ForeignOperation
  end

context ForeignOperation
  @Operation set(name:String,value:Element)
    self
  end 
  
context ForeignOperation
  @Operation setTarget(target):NameSpace
    self
  end
  
context ForeignOperation
  @Operation target():NameSpace
    self
  end