parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                                  Vectors                                   *
 *                              ---------------                               *
 *                                                                            *
 *   Vectors are fixed size sequences of storage that are accessed and        *
 *   updated using 0-based indices. The i'th element is indexed using v.ref(i)*
 *   and updated using v.put(i,x). Vectors are useful to implement fast data  *
 *   storage and access when the size of the storage is known in advance.     *
 *   When you want to process arbitrary sized data recursively then use       *
 *   sequences (or when you want to share sub-parts of the sequence). Use     *
 *   buffers for a slightly less efficient, but arbitrary sized, indexable    *
 *   data storage.                                                            *
 *                                                                            *
 *   Although the operations on vectors (called ARRAY in the VM) are defined  *
 *   as operations in this file, the compiler may in-line code them so do not *
 *   rely on calling these operations in compiled code.                       *
 *                                                                            *
 *   Vectors have daemons that fire when the vector is updated.               *
 *                                                                            *
 ******************************************************************************/ 

context Vector
  @Operation asSeq():Seq(Element)
    @Doc
      Converts a vector into a sequence.
    end
    let i = self.size() - 1;
        seq = Seq{}
    in @While i >= 0 do
          seq := Seq{self.ref(i) | seq};
          i := i - 1
        end;
        seq
    end
  end
  
context Vector
  @Operation asString():String
    @Doc
      Converts a vector to a string.
    end
    Kernel_asString(self)
  end

context Vector
  @Operation copyInto(vector)
    @Doc
      Copies the elements of vector into self starting at 
      position 0.
    end
    @Count i from 0 to vector.size().min(self.size()) do
      self.put(i,vector.ref(i))
    end;
    self
  end 
 
context Vector
  @Operation daemons()
    Kernel_arrayDaemons(self)
  end
  
context Vector
  @Operation daemonsActive():Boolean
    Kernel_arrayDaemonsActive(self)
  end
  
context Vector
  @Operation init(args)
    Kernel_mkArray(args->at(0))
  end
  
context Vector
  @Operation indexOf(value):Integer
    @Doc
      Returns the index of the first occurrence
      of the supplied value or -1.
    end
    let i = 0;
        found = false
    in @While i < self->size and not found do
         if self.ref(i) = value
         then found := true
         else i := i + 1
         end
       end;
       if found
       then i
       else 0-1
       end
    end
  end
  
context Vector
  @Operation ref(index)
    @Doc
      Returns the value at position index in a vector.
    end
    if self.size() > index
    then Kernel_arrayRef(self,index)
    else throw Exceptions::IndexOutOfBounds(self,index)
    end
  end
  
context Vector
  @Operation put(index,value)
    @Doc
      Put the element value into a vector at position index.
    end
    if self.size() > index
    then Kernel_arraySet(self,index,value)
    else throw Exceptions::IndexOutOfBounds(self,index)
    end
  end
  
context Vector
  @Operation setDaemons(daemons)
    Kernel_arraySetDaemons(self,daemons)
  end
  
context Vector
  @Operation setDaemonsActive(active)
    Kernel_arraySetDaemonsActive(self,active)
  end
  
context Vector
  @Operation size():Integer
    @Doc 
      Returns the size of a vector.
    end
    Kernel_arrayLength(self)
  end
  
context Vector
  @Operation subst(new,old,all:Boolean)
    @Doc
      Substitutes occurrences of old with new.
      The all argument determines whether just the
      first or all occurrences are replaced.
      This is a destructive replacement.
    end
    let done = false;
        i = 0
    in @While i < self->size and (all or not done) do
         if self->at(i) = old
         then 
           self.put(i,new);
           done := true
         end;
         i := i + 1
       end;
       self
    end
  end
  
context Vector
  @Operation toString():String
    @Doc
      Returns a string representation of a vector.
    end
    let b = Buffer(200,true)
    in b.append("Vector{");
       @Count i from 0 to self.size() do
         b.append(self.ref(i).toString());
         if i < self.size() - 1
         then b.add(","->at(0))
         end
       end;
       b.add("}"->at(0));
       b.toString()
    end
  end
  
  