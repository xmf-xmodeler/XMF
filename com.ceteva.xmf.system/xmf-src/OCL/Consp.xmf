parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                                  Pair Patterns                             *
 *                           ---------------------------                      *
 *                                                                            *
 *  A pair pattern has a head and a tail pattern and is matched against a     *
 *  value. The value must be a pair and the corresponding head and tail must  *
 *  match.                                                                    *
 *                                                                            *
 ******************************************************************************/

import OCL;
import Exceptions;

context OCL

  @Class Consp extends Pattern
    
     @Attribute head : Pattern end
     @Attribute tail : Pattern end
     
     @Constructor(head,tail) ! end
     
     @Operation bind(value:Element,target:Element,env:Env::Env,imports:Seq(NameSpace)):Env::Env
     
       // This operation is called by the evaluator to match the value against the
       // pair pattern and update the supplied environment with any new bindings...
       
       if value.isKindOf(SeqOfElement)
       then head.bind(value->head,target,env,imports) + tail.bind(value->tail,target,env,imports)
       else throw PatternFailed(self,value)
       end
     end
     
     @Operation lift():Performable
       Apply(self.typeExp(),Seq{head.lift(),tail.lift()})
     end
     
     @Operation matchCode(value:Performable,success:Performable,fail:Performable):Performable
     
       // Return the code that will perform the match at run-time...
       
       let headVar = head.newVar();
           tailVar = tail.newVar()
       in 
          // The supplied value must be a non-empty sequence...
          
          [| if <value>.isKindOf(SeqOfElement) and <value> <> Seq{}
             then 
             
               // Extract the head and tail values...
               
               let <headVar> = <value> ->head;
                   <tailVar> = <value> ->tail
               in 
                   // ...and match them...
                   
                   <head.matchCode(Var(headVar),tail.matchCode(Var(tailVar),success,fail),fail)>
               end
             else <fail>
             end
          |]
       end
     end
     
     @Operation needsBacktrack():Boolean
       head.needsBacktrack() or
       tail.needsBacktrack()
     end
     
     @Operation pprint(out)
       format(out,"Seq{");
       head.pprint(out);
       format(out," | ");
       tail.pprint(out);
       format(out,"}")
     end
     
     @Operation toSig()
       ParametricType(Seq{"Seq"},Seq{NamedType()}).toSig()
     end
     
   end