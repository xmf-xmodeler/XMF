parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                                Path Expressions                            *
 *                           ---------------------------                      *
 *                                                                            *  
 *  A path expression represents a name-space lookup. The root expression     *
 *  should return a name-space and the names are then referenced in the name  *
 *  space to produce a named-element.                                         *    
 *                                                                            *
 ******************************************************************************/

import OCL;

context OCL

  @Class Path extends OCL::OCL
    
    @Attribute root  : OCL::OCL     end
    @Attribute names : Seq(Element) end
    
    @Constructor(root,names) ! end
  
    @Operation pprint(out,indent)
      root.pprint(out,indent);
      format(out,"~{::~S~}",Seq{names})
    end
    
    @Operation toPath(seq:Seq(String)):Path
    
      // Turns a sequence of names into a path expression.
      // This (static) operation is useful when translating
      // sequences of names into an expression...
      
      Path(Var(seq->head),seq->tail)
    end
    
  end