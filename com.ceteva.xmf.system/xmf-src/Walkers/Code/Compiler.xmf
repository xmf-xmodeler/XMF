parserImport XOCL;

import OCL;
import Walkers;
import Code;

context Code

  @Class CompilerWalker extends XOCLWalker
  
    // The basic walker for processing compilation units...

    @Operation walkCompilationModule(resource:String,elements:Seq(CompilationModuleElement),arg)
      CompilationModule[
        resource=self.walk(resource,arg),
        elements=elements->collect(x | self.walk(x,arg))
      ]
    end

    @Operation walkCompilationUnit(resource:String,exps:Seq(Performable),imports:Seq(Import),source:String,arg)
      CompilationUnit[
        resource=self.walk(resource,arg),
        exps=exps->collect(x | self.walk(x,arg)),
        imports=imports->collect(x | self.walk(x,arg)),
        source=self.walk(source,arg)
      ]
    end

    @Operation walkImport(nameSpace:Performable,arg)
      Import[
        nameSpace=self.walk(nameSpace,arg)
      ]
    end

    @Operation walkObject(o,arg)
      @CaseObj o of
        CompilationModule[elements,resource] do
          self.walkCompilationModule(resource,elements,arg)
        end
        CompilationUnit[resource,exps,imports,source] do
          self.walkCompilationUnit(resource,exps,imports,source,arg)
        end
        Import[nameSpace] do
          self.walkImport(nameSpace,arg)
        end
        else super(o,arg)
      end
    end
  end
