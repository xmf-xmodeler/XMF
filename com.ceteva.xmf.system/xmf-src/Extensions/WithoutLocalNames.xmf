parserImport Parser::BNF;
parserImport XOCL;

import XOCL;

context XOCL

  @Class WithoutLocalNames extends Performable
  
    @Doc
      Turns off local name recording for the duration of the
      body of the construct. This can slow down code that must 
      be highly efficient.
    end
    
    // Determines whether or not the compiler is affected statically
    // or dynamically...
    
    @Attribute isDynamic : Boolean end
  
    @Grammar extends OCL::OCL.grammar
    
      WithoutLocalNames ::= isDynamic = IsDynamic body = Exp 'end' { WithoutLocalNames(isDynamic,body) }.
      
      IsDynamic ::= 'isDynamic' { true } | { false }. 
      
    end 
    
    @Attribute body : Performable end
    
    @Constructor(body) ! end
    
    @Constructor(isDynamic,body) end
    
    @Operation compile(env,frame,isLast,saveSource)
      if isDynamic
      then self.compileDynamic(env,frame,isLast,saveSource)
      else self.compileStatic(env,frame,isLast,saveSource)
      end
    end
    
    @Operation compileDynamic(env,frame,isLast,saveSource)
      [| let localNames = Compiler::localNames
         in try
              Compiler::localNames := false;
              let value = <body>
              in Compiler::localNames := localNames;
                 value
              end
           catch(exception)
             Compiler::localNames := localNames;
             throw exception
           end
         end |].compile(env,frame,isLast,saveSource)
    end
    
    @Operation compileStatic(env,frame,isLast,saveSource)
      let localNames = Compiler::localNames
      in try
           Compiler::localNames := false;
           let instrs = body.compile(env,frame,isLast,saveSource)
           in Compiler::localNames := localNames;
              instrs
           end
         catch(exception)
           Compiler::localNames := localNames
         end
      end
    end
    
    @Operation eval(target,env,imports)
      body.eval(target,env,imports)
    end
   
    @Operation FV():Set(String)
      body.FV()
    end
    
    @Operation maxLocals():Integer
      body.maxLocals()
    end
    
    @Operation pprint(out,indent)
      format(out,"@WithoutLocalNames~%~V",Seq{indent+2});
      body.pprint(out,indent+2);
      format(out,"~%~Vend",Seq{indent})
    end
    
  end