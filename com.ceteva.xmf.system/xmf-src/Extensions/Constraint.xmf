parserImport Parser::BNF;
parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                         Constraint Definitions                             *
 *                         ----------------------                             *
 *                                                                            *
 *   A constraint definition is used to construct a syntax expression that    *
 *   instantiates XCore::Constraint.                                          *
 *                                                                            *
 ******************************************************************************/ 

import XOCL;
import OCL;
import Parser::BNF;

context XOCL

  @Class Constraint extends Sugar
  
    // The name of the constraint...
  
    @Attribute name   : String      end
    
    // The boolean expression that forms
    // the body of the constraint...
    
    @Attribute body   : Performable end
    
    // The string-valued expression that
    // produces the explanation of a failed
    // constraint...
    
    @Attribute reason : Performable end
    
    @Constructor(name,body,reason) end
    
    @Grammar extends OCL::OCL.grammar
    
      Constraint ::= 
      
        // A consraint has a name...
      
        name = Name 
        
        // A boolean valued body...
        
        body = Exp 
        
        // A string valued explanation for failure...
        
        reason = Reason 
        
        'end' 
        
        { Constraint(name,body,reason) }.
        
      Reason ::= 
      
        // The reason for failure is specified
        // by the keyword 'fail'...
      
        'fail' Exp 
        
      | { [| "Unspecified Reason" |] }.
      
    end
    
    @Operation desugar():Performable
    
      // Produce an expression that instantiates the class
      // XCore::Constraint...
      
      [| let name = <StrExp(name)>;
             body = @Operation <"body">(classifier) <body> end;
             reason = @Operation <"reason">(classifier) <reason> end
         in XCore::Constraint(XCore::Symbol(name),body,reason)
         end
      |]
    end
    
    @Operation pprint(out,indent)
      format(out,"@Constraint ~S~%~V",Seq{name,indent + 2});
      body.pprint(out,indent+2);
      format(out,"~%~V fail ",Seq{indent});
      reason.pprint(out,indent+2);
      format(out,"~%~Vend",Seq{indent})
    end
    
  end