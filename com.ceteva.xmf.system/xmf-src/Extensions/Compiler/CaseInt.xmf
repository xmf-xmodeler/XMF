parserImport XOCL;
parserImport Parser::BNF;

import XOCL;
import Instrs;

context CaseInt

  @Operation compile(env,frame,isLast,saveSource)
    
      // Compile the clauses into labelled instruction sequences.
      // Each label is added to the jumpTable at the indices given
      // in the clause head. The Dispatch instruction then uses
      // the value produced by the exp of the CaseInt to index into
      // the jump table and jumps to the appropriate offset for
      // the clause. Once the body of the clause is completed, the
      // machine jumps to the end of the case.
       
     if limit < self.rangeSizeLimit()
     then
       let jumpTable = Vector(limit);
           otherwiseLabel = Compiler::newLabel();
           endLabel = Compiler::newLabel()
       in @Count i from 0 to jumpTable.size() do
            jumpTable.put(i,otherwiseLabel)
          end;
          let expInstrs = exp.compile(env,frame,false,saveSource);
              taggedClauseInstrs = self.compileClauses(jumpTable,env,frame,isLast,saveSource);
              otherwiseInstrs = self.compileOtherwise(env,frame,false,saveSource) then
              taggedOtherwiseInstrs = Compiler::labelInstrs(otherwiseInstrs,otherwiseLabel);
              taggedEndInstrs = Compiler::labelInstrs(Seq{NoOp()},endLabel)
          in expInstrs +
             Seq{Dispatch(jumpTable)} +
             taggedClauseInstrs->iterate(tci is = Seq{} | is + tci + Seq{Skip(endLabel)}) +
             taggedOtherwiseInstrs +
             taggedEndInstrs
          end
        end
     else self.error("CaseInt range size " + limit + " too big in " + self.pprint())
     end
    end
    
context CaseInt

    @Operation compileClauses(jumpTable:Vector,env,frame,isLastExp,saveSource)
      @For clause in clauses produce
        // Should be OK to pass isLast in ???
        clause.compile(jumpTable,env,frame,isLastExp,saveSource)
      end
    end
    
context CaseInt

    @Operation compileOtherwise(env,frame,isLast,saveSource)
      if otherwise = null
      then [| self.error("CaseInt: out of clauses.") |].compile(env,frame,false,saveSource)
      else otherwise.compile(env,frame,false,saveSource)
      end
    end

context CaseInt
    
    @Operation FV():Set(String)
      if otherwise = null
      then clauses->iterate(c FV = exp.FV() | FV->union(c.FV()))
      else clauses->iterate(c FV = otherwise.FV()->union(exp.FV()) | FV->union(c.FV()))
      end
    end

context CaseInt
    
    @Operation maxLocals():Integer
       if otherwise = null
       then clauses->iterate(c maxLocals = exp.maxLocals() | maxLocals.max(c.maxLocals()))
       else clauses->iterate(c maxLocals = exp.maxLocals().max(otherwise.maxLocals()) | maxLocals.max(c.maxLocals()))
       end
    end