parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                        Send a Message To A Local                           *
 *             ------------------------------------------------               *
 *                                                                            *
 *  The same as SEND except that the target of the message is a local. The    *
 *  local offset is encoded as an instruction operand.                        *
 *                                                                            *
 ******************************************************************************/

import Instrs;

context Instrs

 @Class SendLocal extends Instr
 
    @Attribute arity         : Integer end
    @Attribute message       : Symbol end
    @Attribute localName     : String end
    @Attribute local         : Integer end
    @Attribute messageOffset : Integer end
    
    @Constructor(localName,local,message,arity) end
    
    @Operation toString():String
      "<SendLocal " + localName + " " + arity + "," + message.toString() + ">"
    end
    
    @Operation assemble(codeBox)
      self.messageOffset := codeBox.constOffset(message);
      if messageOffset < 256 and local < 256
      then
        // The operands will fit into a machine word...
        codeBox.addInstr(self)
      else 
        // Cannot fit into a machine word ...
        LocalRef(localName,local).assemble(codeBox);
        Send(message,arity).assemble(codeBox)
      end
    end
    
    @Operation operands():Integer
      Kernel_mk24bit(arity,messageOffset,local)
    end
    
  end
  