/******************************************************************************
 *                                                                            *
 *                         Compilation of Try Clauses                         *
 *                      --------------------------------                      *
 *                                                                            *
 *  A try clause has a handler and a body. The handle must be compiled to an  *
 *  operation that is installed in the call-frame of the try-body as the      *
 *  handler if a THROW instruction is ever performed. When the THROW instr is *
 *  performed the VM steps back through the call-frame and stops at the first *
 *  frame that contains a handler operation. The handler operation is then    *
 *  called and the VM continues from that point.                              *
 *                                                                            *
 ******************************************************************************/
 
import Compiler;
import OCL;

context Try
  @Operation compile(env,frame,isLast,saveSource)
    let op = [| @Operation(<name>) <handler> end |].compile(env,frame,isLast,saveSource);
        freeVars = body.FV(); 
        localVars = env.locals();
        globalVars = env.globals() then
        freeVars = freeVars->intersection(localVars+globalVars)->asSeq then
        funEnv = env.deleteLocals().newFrame().newGlobals(freeVars) then
        globalRefs = env.refs(freeVars); 
        bodyCode = body.compile(funEnv,frame + 1,false,saveSource);
        lineCode = if sourcePos and line > 0 then Seq{Instrs::Line(line)} else Seq{} end;
        source = if saveSource then self.pprint(4) else "No Source Available" end
    in lineCode + 
       globalRefs + 
       op + 
       Seq{Instrs::Try(freeVars->size,body.maxLocals(),source,bodyCode + Seq{Instrs::Return()})}
    end
  end 
  
context Try
  @Operation FV():Set(String)
    body.FV() + handler.FV()->excluding(name)
  end
  
context Try
  @Operation lift()
    Apply(self.typeExp(),Seq{IntExp(line),body.lift(),StrExp(name),handler.lift()})
  end
  
context Try
  @Operation maxLocals():Integer
    0
  end 