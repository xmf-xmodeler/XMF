/******************************************************************************
 *                                                                            *
 *                        Compilation of Operations                           *
 *                      ------------------------------                        *
 *                                                                            *
 *  Compilation of operation requires some analysis of the operation body in  *
 *  order to work out how many locals will be required in the call frame when *
 *  the operation is called. In addition, the operation may reference local   *
 *  variables that are currently in scope. Since the operation may be created *
 *  and then manipulated as data, storage must be allocated for these vars    *
 *  in the globals table which is allocated when the operation is created.    *
 *  Finally, the body of the operation is transformed into a code-box that    *
 *  lives in the constants table of the enclosing operation (there always is  *
 *  an enclosing operation), the MKOP instruction references the code box and *
 *  allocates the state-part of the operation to create a 'closure'.          *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import OCL;
import Instrs;
import Exceptions;

context Operation
  @Operation FV():Element
    performable.FV()->reject(name |
      self.newParams()->exists(p |
        p.name = name))
  end

context Operation  
  @Operation maxLocals():Element  
    0
  end      
   
context Operation

  @Operation compile(env:Element,frame:Element,isLast:Element,saveSource:Element):Element
    
    // Compiles an operation in the supplied environment. The frame argument defines the level
    // of lexical nesting scope for the operation where 0 is at the top level. The parameter
    // names are added to the environment as local variables. We calculate the free variables
    // of the operation and these are pushed onto the stack before the operation is created
    // (using the MkOp instruction). The free variables will wind up in the globals list of the
    // operation. The globals list of the new operation is linked to the globals list of 
    // the lexically surrounding operation...
    
    let newParams = self.newParams() then
        paramNames = newParams.name;
        matchBody = self.matchCode(newParams.name,parameters,performable) then
        matchBody = self.checkTypes(matchBody) then
        freeVars = matchBody.FV()->reject(v | paramNames->includes(v)); 
        localVars = env.locals();   
        globalVars = Seq{} then
        freeVars = freeVars->intersection(localVars+globalVars)->reject(fv | paramNames->includes(fv))->asSeq then
        funEnv = env.deleteLocals().newFrame().newGlobals(freeVars).newArgLocals(paramNames) then
        globalRefs = env.refs(freeVars); 
        docCode = self.doc().compile(env,frame,false,true);
        bodyCode = matchBody.compile(funEnv,frame + 1,true,saveSource);
        source = if saveSource and Compiler::saveSource then self.pprint(0) else "" end;
        properties = self.parserImportProperty()
    in Seq{Const(self.toSig() + properties)} +
       docCode + 
       globalRefs + 
       Seq{MkOp(name,parameters->size,isMultiArgs,freeVars->size,matchBody.maxLocals(),source,bodyCode + Seq{Return()})} 
    end
            
  end
  
context Operation
  @Operation checkTypes(body)
  
    // If the compiler flag checkTypes is set then
    // add code that checks the type of the bound
    // arguments...
    
    if Compiler::checkTypes
    then 
      parameters->iterate(parameter body = self.checkReturnType(body) |
        @Case parameter of
          Varp(argName,type) do
            [| if <Var(argName)>.isKindOf(<type.toExp()>)
               then <body>
               else throw Exceptions::ArgTypeError(<name.toString().lift()>,<argName.lift()>,<Var(argName)>,<type.toExp()>)
               end |]
          end
          else body
        end)
    else body
    end
  end
  
context Operation
  @Operation checkReturnType(body)
  
    // If the compiler flag checkTypes is set then
    // add code that checks the type of the return
    // value...
    
    if Compiler::checkTypes
    then 
      [| let result = <body>
         in if result.isKindOf(<type.toExp()>)
            then result
            else throw Exceptions::ResultTypeError(<name.toString().lift()>,result,<type.toExp()>)
            end 
         end |]
    else body
    end
  end
  
context Operation
  @Operation parserImportProperty()
  
    // Return a property list for the parser imports of this
    // operation definition. Many operations just import XOCL
    // and we use this as the default.
    
    if imports.equals(Seq{Seq{"Root","XOCL"}})
    then Seq{}
    else Seq{Seq{Symbol("parserImports") | imports}}
    end
  end
    
context Operation
  @Operation lift()
    let nameExp = 
         @TypeCase(name) 
           OCL::Drop do name.lift() end
           String do StrExp(name) end
           Symbol do StrExp(name.name) end
           else throw TypeError(name,String)
         end
    in Apply(self.typeExp(),Seq{nameExp,self.liftParameters(),type.lift(),performable.lift(),self.doc().lift(),BoolExp(isMultiArgs),imports.lift(),properties.lift()})
    end
  end 
  
context Operation 
  @Operation liftParameters()
    SetExp("Seq",parameters->collect(p | p.lift()))
  end   
  
context Operation
  @Operation matchCode(paramNames:Seq(String),patterns:Seq(Pattern),body:Performable):Performable
  
    // The arguments of an operation may be non-variable patterns. In 
    // this case the body of the operation is transformed into pattern
    // matching code and some new variable arguments are created...
    
    let isBacktracking = patterns->exists(pattern | pattern.needsBacktrack())
    in if isBacktracking
       then [| let backtrack = @Operation() self.error("Match failed.") end
               in <self.matchAll(paramNames,patterns,body,isBacktracking)>
               end
            |] 
       else self.matchAll(paramNames,patterns,body,isBacktracking)
       end
    end
  end
  
context Operation 
  @Operation matchAll(paramNames:Seq(String),patterns:Seq(Pattern),body:Performable,isBacktracking:Boolean):Performable
    
    // The parameter names define the variables that have been bound to the incoming values.
    // NB the parameter names will have been generated in the case that the pattern
    // is *not* a simple name. Code to match the patterns one-by-one is generated taking
    // into account any backtracking that might take place. Patterns of the form x:T are
    // treated specially because they generate type checking code which is not necessary for
    // operation parameters...
    
    if paramNames->isEmpty
    then body
    else 
      let paramName = paramNames->head;
          pattern = patterns->head;
          value = Var(paramNames->head);
          preMessage = "Match failed in operation " + name + ". Supplied parameter ";
          postMessage = " does not match " + patterns->head.pprint() then
          fail = 
           if isBacktracking
           then [| backtrack() |] 
           else [| self.error(<StrExp(preMessage)> + <value> + <StrExp(postMessage)>) |]
           end
       in if pattern.isKindOf(Varp) andthen pattern.pattern = null
          then self.matchAll(paramNames->tail,patterns->tail,body,isBacktracking)
          else pattern.matchCode(Var(paramName),self.matchAll(paramNames->tail,patterns->tail,body,isBacktracking),fail)
          end
       end
    end
  end  
  
context Operation
  @Operation newParams():Seq(Parameter)
  
    // The parameters of an operation are all patterns. Some of these
    // will need to be replaced with named parameters that are then
    // matched against the pattern...
    
    parameters->collect(p | p.newParam())
  end