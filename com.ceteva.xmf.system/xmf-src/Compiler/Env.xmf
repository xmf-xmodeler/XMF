parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                      Compiler Variable Environment                         *
 *                      -----------------------------                         *
 *                                                                            *
 *  During compilation, the compiler maintains information on variables in a  *
 *  table which is an instance of Env. An entry on this table corresponds to  *
 *  a variable that can be accessed in the code that the compiler is currently*
 *  translating to machine code. There are different types of variable and    *
 *  a reference to a variable that does not occur in the table is not an error*
 *  it means that the variable is assumed to be DYNAMIC and will be referenced*
 *  at run-time with respect to the currently imported name-spaces. The Env   *
 *  table keeps track of locals (with indices into the current call frame) and*
 *  to globals (that are referenced with respect to the current globals table *
 *  from the currently executing operation). When a new operation is compiled *
 *  the globals linked list will be extended by a single global vector and all*
 *  the indices are increased by 1 in the Env table.                          *
 *                                                                            *
 ******************************************************************************/

import Compiler; 

context Compiler

    @Class Env
    
      // The vars sequence contains all the variables
      // that are currently declared to the compiler and
      // which are currently in scope. Any variables that
      // are referenced which are not on this list are
      // assumed to be DYNAMIC...

      @Attribute vars : Seq(Var) end
      
      @Operation allocateLocals(names:Seq(String),nextLocal:Integer)
      
        // Allocate some new locals starting at the
        // supplied next available index...
        
        if names->isEmpty
        then self
        else self.consLocal(names->at(0),nextLocal).allocateLocals(names->drop(1),nextLocal + 1)
        end
      end
      
      @Operation arity():Integer
      
        // The operation arguments are allocated in the
        // ENV table as instances of ArgLocal so we can work
        // out how many arguments are currently in scope...
        
        vars->select(v | v.isKindOf(ArgLocal))->size
      end
      
      @Operation consLocal(name:String,offset:Integer)
      
        // It is important that entering a new binding contour
        // in the compiler does not permanently update the
        // vars since they must be removed on exit from the
        // contour. This is achieved by creating a NEW Env
        // table for each contour and passing this downwards.
        // When the compiler returns and continues, the original
        // Env table will be used...
        
        Env(Seq{Local(name,offset) | vars})
      end
      
      @Operation consNameSpaceRef(name:String,contour:Integer)
      
        // Add a variable of type NAMESPACEREF...
        
        let vars = vars->reject(v | v.name = name)
        in Env(Seq{NameSpaceRef(name,contour) | vars})
        end 
      end
      
      @Operation deleteLocals()
      
        // Remove any local variables. Used when we upgrade
        // locals to a different type of variable...
        
        Env(vars->reject(v | v.isKindOf(Local)))
      end
      
      @Operation init(args):Element
        let vars = if args->isEmpty then Seq{} else args->at(0) end
        in self.vars := vars
        end
      end
      
      @Operation incNameSpaceRefs()
      
        // We have entered a new name-space contour. Any references
        // to named-elements must increase the number of steps
        // they chain through the 'owner' slot...
        
        Env(vars->collect(var |
          if var.isKindOf(NameSpaceRef)
          then var.inc()
          else var
          end))
      end
      
      @Operation globals():Seq(String)
      
        // Get the names of the global variables currently
        // in scope...
        
        vars->select(v | v.isKindOf(Global))->collect(v | v.name)
      end
      
      @Operation isDynamic(name:String):Boolean
      
        // Returns true when a reference to the supplied name
        // results in the production of a Dynamic instruction...
        
        not vars->exists(v | v.name = name) and
        not name = "null"
        and not self.isKernelRef(name)
      end
      
      @Operation isGlobal(name:String):Boolean
      
        // Returns true when there is a variable in scope
        // with the given name and is of type GLOBAL...
        
        self.globals()->includes(name)
      end
      
      @Operation isKernelRef(name:String)
      
        // References to variables that start Kernel_
        // are treated differently in the compiler. This
        // operation returns true when the supplied name
        // is a reference to a kernel operation...
        
        let kernel = "Kernel_"
        in if name->size > kernel->size 
           then
             let index = 0;
                 isKernelRef = true
             in @While index < kernel->size and isKernelRef do
                  isKernelRef := name->at(index) = kernel->at(index);
                  index := index + 1
                end;
                isKernelRef
             end
           else false
           end
         end
      end

      @Operation isLocal(name:String):Boolean
      
        // Returns true when there is a local variable
        // with the supplied name in scope...
        
        @Find(var,vars)
          when var.isKindOf(Local) andthen var.name = name
          do true
          else false
        end
      end
      
      @Operation localIndex(name:String):Integer
      
        // Get the index of the named local in the
        // current call-frame...
        
        if not vars->exists(v | v.name = name and v.isKindOf(Local))
        then self.error("no local named " + name)
        else vars->select(v | v.name = name)->head.offset
        end
      end
      
      @Operation locals():Seq(String)
      
        // Get the names of the locals in scope...
        
        vars->select(v | v.isKindOf(Local))->collect(v | v.name)
      end

      @Operation maxLocal():Integer
      
        // How many locals have we got?...
        
        let maxLocals = 0
        in @For var in vars do
             if var.isKindOf(Local)
             then maxLocals := maxLocals + 1
             end
           end;
           maxLocals
        end 
      end
      
      @Operation newArgLocals(names:Seq(String))
      
        // Allocate some arguments in the call-frame...
        
        if names->isEmpty
        then self
        else
          let locals = 0.to(names->size - 1)->collect(i | ArgLocal(names->at(i),i))
          in Env(locals + vars)
          end
        end
      end
      
      @Operation newFrame():Env
      
        // We enter a new frame when we pass over an
        // operation definition boundary. This means that all
        // the global variables that are currently in scope will
        // increase their frame offset by 1...
        
        Env(vars->collect(v |
          if v.isKindOf(Global)
          then Global(v.name,v.frame + 1,v.offset)
          else v
          end))
      end

      @Operation newGlobals(names:Seq(String)):Env
      
        // Allocate some new global variables...
        
        if names->isEmpty
        then self
        else
          let globals = 0.to(names->size - 1)->collect(i | Global(names->at(i),0,i))
          in Env(globals + vars)
          end
        end
      end
      
      @Operation newLocals(names:Seq(String))
      
        // Allocate some new local variables...
        
        if names->isEmpty
        then self
        else
          let locals = 0.to(names->size - 1)->collect(i | Local(names->at(i),i))
          in Env(locals + vars)
          end
        end
      end
      
      @Operation nonArgLocals()
      
        // Returns a sequence of locals that are not arguments.
        // The sequence has been ordered in terms of the local
        // index...
        
        vars->select(v | v.isKindOf(Local) and not v.isKindOf(ArgLocal))->qsort(
          @Operation(l1,l2)
            l1.offset < l2.offset
          end)
      end
      
      @Operation refs(names:Set(String))
      
        // Reference all the supplied variables, produce the
        // appropriate instructions. This will leave the values
        // of the variables on the stack...
        
        names->collect(name | self.ref(name))->asSeq->flatten
      end

      @Operation ref(name:String)
      
        // Produce the instructions that push the value of the
        // named variable on the stack at run-time...
        
        @Find(var,vars)
          when var.name = name
          do var.ref()
          else 
            if name = "null"
            then Seq{Instrs::Null()}
            elseif self.isKernelRef(name)
            then Seq{Instrs::SymbolValue(Symbol(name))}
            else Seq{Instrs::Dynamic(Symbol(name))}
            end
        end
      end
      
      @Operation ref(name:String,line:Integer)
      
        // Called to reference the named variable at run-time
        // but with source code line information. If we are
        // recording the source position of variables then a
        // LINE instruction is produced before the variable
        // is referenced...
        
        if line > 0 and sourcePos
        then Seq{Instrs::Line(line)} + self.ref(name)
        else self.ref(name)
        end
      end

      @Operation setLocalsCode(names:Seq(String))
      
        // The new values of the variables have been pushed on
        // the stack, produce instructions that pop the values 
        // into the variable locations...
        
        if names->isEmpty
        then Seq{}
        else self.setLocalCode(names->at(0)) + self.setLocalsCode(names->drop(1))
        end
      end

      @Operation setLocalCode(name:String)
      
        // Used to generate the code for let x = v, get rid of the value
        // since the binding does not produce a value...
        
        Seq{Instrs::SetLocPop(name,self.localIndex(name))}
      end

      @Operation setVarCode(name:String)
      
        // Generate code for x := v. This expression produces a value
        // so don't pop it off the stack just yet...
        
        if self.isLocal(name)
        then Seq{Instrs::SetLocal(name,self.localIndex(name))}
        elseif self.isGlobal(name)
        then Seq{Instrs::SetGlobal(name,self.globalFrame(name),self.globalOffset(name))}
        else self.error(":= can only be used to set locals or globals (try using self.var): " + name + " " + self.toString())
        end
      end
      
      @Operation globalFrame(name:String):Integer
      
        // What is the frame index of the named variable
        // in the current globals linked list at run-time?...
        
        if not vars->exists(v | v.name = name and v.isKindOf(Global))
        then self.error("no global named " + name)
        else vars->select(v | v.isKindOf(Global) and v.name = name)->sel.frame
        end
      end
      
      @Operation globalOffset(name:String):Integer
      
        // What is the offset of the named global at run-time?...
        
        if not vars->exists(v | v.name = name and v.isKindOf(Global))
        then self.error("no global named " + name)
        else vars->select(v | v.isKindOf(Global) and v.name = name)->sel.offset
        end
      end
      
      @Operation toString():String
        "Env(" + vars.toString() + ")"
      end
      
     end