/******************************************************************************
 *                                                                            *
 *                           Integer Constant                                 *
 *                      ------------------------------                        *
 *                                                                            *
 *  Push an integer onto the stack.                                           *
 *                                                                            *
 ******************************************************************************/

import OCL;
import Instrs;
import Compiler;

context IntExp
  @Operation FV():Element
    Set{}
  end

context IntExp
  @Operation maxLocals():Element
    0
  end

context IntExp
  @Operation compile(env:Element,frame:Element,isLast:Element,saveSource:Element):Element
    
    // Generate line position information if the appropriate compiler
    // switch is on. Note that negative numbers are generated by subtracting
    // from 0 at run-time...
    
    if sourcePos and line > 0
    then Seq{Line(line)}
    else Seq{}
    end 
    +
    if value < 0
    then [| 0 - <IntExp(value.abs())> |].compile(env,frame,isLast,saveSource)
    else Seq{PushInteger(value)}
    end
  end
  
context IntExp
  @Operation lift()
    Apply(self.typeExp(),Seq{IntExp(line),IntExp(value)})
  end