parserImport XOCL;

/******************************************************************************
 *                                                                            *
 *                                   Buttons                                  *
 *                            -------------------                             *
 *                                                                            *
 * A button is an event handler. The label on the button is used to name an   *
 * argument that will be set in the event handling operation. The value is the*
 * value of the label argument. When an event occurs it is broadcast to all   *
 * the event handlers on the page. The event handler is responsible for       *
 * determining whether or not it should handle the event based on the supplied*
 * argument values. If the event is handed then the handler must return a new *
 * page to be displayed, otherwise it should return null.                     *
 *                                                                            *
 ******************************************************************************/ 

import DocTables;
import Basic;
import Forms;

context Forms

  @Class Button extends Entry, EventHandler

    @Attribute label : String (?,!) end
    @Attribute value : String (?,!) end
    
    @Constructor(value,handler) 
      self.label := self.generateLabel()
    end
    
    @Constructor(label,value,handler) ! end
    
    @Operation args()
      handler.sig()->butLast->collect(sigEntry | sigEntry->head.toString())
    end
    
    @Operation contents()
      Seq{}
    end
    
    @Operation handle(env)
      if env.binds(label)
      then 
        let values = self.args()->collect(a | 
              if env.binds(a)
              then env.lookup(a)->head
              elseif a = "env"
              then env
              else false
              end)
        in handler.invoke(handler.target(),values)
        end
      else null
      end
    end

  end
