parserImport XOCL;

import DocTables;
import Basic;
import Forms;
import IO; 
  
context Root

  @Package Drinks
  
    @Class DrinksClub
    
      // A drinks club manages a collection of people that share some drinks that
      // are used and paid for via credits. An administrator adds members and types
      // of drink. Each member has a number of credits that are depleted each time
      // they make a drink.
    
      @Attribute adminPassword : String (?) end
      @Attribute members       : Seq(Member) (+) end
      @Attribute drinks        : Seq(Drink) (+) end
      @Attribute transactions  : Seq(Transaction) (+) end
      
      @Constructor(adminPassword) ! 
        // Always create a drinks club with an admin password. Otherwise
        // you cannot add members or create drinks.
      end
      
      @Operation report():Page
        Page("Report",[Table("",transactions->collect(t | t.report()))])
      end
      
      @Operation run()
      
        @Letrec
        
          // The mutually recursive operations are used to handle
          // events, to update the instances of the drinks club, and
          // to create GUI pages. They are mutually recursive in order
          // to allow handlers in one page to refer to any other page.
        
          login() =
            // A page has an identifier and a sequence of entries.
            // The starting operation and all event handlers must produce
            // pages...
            Page("Login",[
              // A divider has style information and a sequence of
              // entries. The style declarations apply to all entries...
              Div("font-size:300%;",[Text("Drinks Club")]),
              Form("/DrinksClub/login",[
                Break(),
                // The following division creates a dashed border around some instructive text
                // with a coloured background...
                Div("border-color:blue;border-style:dashed;border-width:1px;background-color:lightsteelblue;font-size:120%;",[
                  Text("Welcome to the drinks club. This system manages your drinks account.
                        Type your password to login as a member or as an administrator If you
                        do not have an account, contact your administrator who will set one
                        up.")]),
                Break(),
                // A password field must occur in a form and has an identifier. Any event
                // handler in the form can reference the password by looking the value up
                // using the identifier in the environment supplied to the handler.
                PasswordField("password",20),
                Break(),
                // A button has a label and a handler. The handler should be an operation
                // whose arguments have names that are identifiers of data (fields etc) on
                // the containing form. The handler will be supplied with the values of
                // the fields...
                Button("Member Login",memberLogin),
                Break(),
                Button("Admin Login",adminLogin)
              ])
            ]);
            
          memberLogin(password) = 
          
            // This is called when the user pressed the Member Login button.
            // It is supplied with the value of the input field whose identifier
            // is "password". It must return a page...
            
            @Find(member,members)
              when member.password() = password
              do Page("Member Login",[
                   Div("font-size:300%;",[Text("Drinks Club")]),
                   Break(),
                   Div("background-color:lightsteelblue;font-size:120%;",[
                     Text("This screen allows you to purchase a drink.
                           Choose from the list of available drinks below.
                           You will be informed if you do not have sufficient funds.
                           Otherwise your account will be debited with the price of the drink.")]),
                     Break(),
              
                   // Tell the member how many credits they have...
                   
                   Text("Hello " + member.name() + " you have " + member.credits() + " credits."),
                   Form("/DrinksClub/login",
                   
                     // Create a button for each drink that can be bought...
                     
                     drinks->collect(drink | 
                       drink.buyButton(member,
                         // Note that each drink creates a button that is supplied with 
                         // a continuation that will be responsible for handling the
                         // button-push and returning a new page...
                         @Operation(transaction) 
                           if transaction <> null 
                           then self.addToTransactions(transaction) 
                           end; 
                           memberLogin(password) 
                         end)) +
                         
                     // Add a button for logging out...
                     
                     [Button("Logout",login)]
                   )
                 ])
                 
              // If the password was not recognized then loop
              // pack to the login page...
              
              else login()
            end;
          
          adminLogin(password) = 
            if password = adminPassword
            then 
              Page("Admin",[
                Div("font-size:300%;",[Text("Administration")]),
                Break(),
                Div("background-color:lightsteelblue;font-size:120%;",[
                  Text("Use the following functions to manage the drinks club.")]),
                Break(),
                Form("/DrinksClub/login",[
                  Button("Report",report),Text("Show all Drink Club activity."),Break(),
                  Button("Deposit",deposit),Text("Change the balance of a member."),Break(),
                  Button("Add Member",addMember),Text("Create a new member."),Break(),
                  Button("Add Drink",addDrink),Text("Create a new type of drink."),Break(),
                  Button("Logout",login)
                ])
            ])
                 
            // If the password was not recognized then loop
            // pack to the login page...
            
            else login()
            end;
            
          report() = 
            Page("Report",[
              Div("font-size:300%;",[Text("Transactions")]),
              Break(),
              Table("", transactions->collect(transaction | transaction.report())),
              Form("/DrinksClub/login",[Button("OK",@Operation() adminLogin(adminPassword) end)])
            ]);
          
          deposit()= 
            Page([
              Div("font-size:300%;",[Text("Deposit")]),
              Break(),
              Form("/DrinksClub/login",[
                Table("",
                  members->collect(member |
                    Row([
                      Col(Text(member.name())),
                      Col(TextField(member.name(),20,member.credits()))
                    ])
                  )
                ),
                Button("OK",
                  // The complete environment binding the identifiers and their values
                  // on the current form is supplied as the value of the special variable
                  // 'env',...
                  @Operation(env) 
                    @For member in members do
                      let amount = env.lookup(member.name())
                      in member.setCredits(amount.asInt())
                      end
                    end;
                    adminLogin(adminPassword) 
                  end)
              ])
            ]);
          
          addMember() = 
            Page("Add Member",[
              Div("font-size:300%;",[Text("Add Member")]),
              Break(),
              Form("/DrinksClub/login",[
                Table("",[
                  Row([Col(Text("Name")),Col(TextField("name",20))]),
                  Row([Col(Text("Password")),Col(TextField("password",20))]),
                  Row([Col(Text("Amount")),Col(TextField("amount",20))])
                ]),
                Button("Add",registerMember)
              ])
            ]);
            
          registerMember(name,password,amount) =
            (self.addToMembers(Member(name,password,amount.asInt()));
             adminLogin(adminPassword));
          
          addDrink() = 
            Page("Add Drink",[
              Div("font-size:300%;",[Text("Add Drink")]),
              Break(),
              Form("/DrinksClub/login",[
                Table("",[
                  Row([Col(Text("Name")),Col(TextField("name",20))]),
                  Row([Col(Text("Cost")),Col(TextField("cost",20))])
                ]),
                Button("Add",registerDrink)
              ])
            ]);
            
          registerDrink(name,cost) =
            (self.addToDrinks(Drink(name,cost.asInt()));
             adminLogin(adminPassword))
          
            
         in login()
         end
      end
      
      @Operation deposit(member,amount)
        @Find(m,members)
          when m.name() = member
          do member.deposit(amount)
        end
      end
      
      @Operation addMember(name,password,amount)
        self.addToMembers(Member(name,password,amount))
      end
      
      @Operation addDrink(name,cost)
        self.addToDrinks(Drink(name,cost))
      end
      
    end
    
    @Class Member
    
      @Attribute name     : String (?) end
      @Attribute password : String (?) end
      @Attribute credits  : Integer (?,!) end
      
      @Constructor(name,password,credits) ! end
      
      @Operation buy(drink,cont)
        if credits > drink.cost()
        then
          self.credits := credits - drink.cost();
          Page("OK",[
            Text("You bought a " + drink.name() + " for " + drink.cost() + "p"),
            Form("/DrinksClub/login",[
              Button("OK",@Operation() cont(Transaction(self,drink,xmf.date())) end)
            ])
          ])
        else
          Page("Insufficient Funds",[
            Form("/DrinksClub/login",[
              Button("OK",@Operation() cont(null) end)
            ])
          ])
        end
      end
      
    end
    
    @Class Drink
    
      @Attribute name : String (?) end
      @Attribute cost : Integer (?) end
      
      @Constructor(name,cost) ! end
      
      @Operation buyButton(member:Member,cont:Operation)
        Button("Buy " + name,
          @Operation()
            member.buy(self,cont)
          end
        )
      end
      
    end
    
    @Class Transaction
    
      @Attribute member : Member (?) end
      @Attribute drink : Drink (?) end
      @Attribute date : String     end
      
      @Constructor(member,drink,date) ! end
      
      @Operation report()
        Row([Col(Text(member.name())),Col(Text(member.credits())),Col(Text(drink.name())),Col(Text(date))])
      end
      
    end
    
  end
              