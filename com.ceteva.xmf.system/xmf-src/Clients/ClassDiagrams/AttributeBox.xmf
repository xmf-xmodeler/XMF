parserImport XOCL;
parserImport XMap;

import Clients;
import Diagrams;
import ClassDiagrams;

context ClassDiagrams

  @Class AttributeBox extends Box
  
    @Constructor(x,y,width)
      self.init(Seq{x,y,width,16,0,Color(),Color()})
    end
    
    @Operation add(att:AttributeText)
      super(att);
      att.pack()
    end
    
    @Operation classNode()
      owner.owner
    end
    
    @Operation expand()
    
      // In the case of AttributeBox the ordering is switched
      // because expand height rearranges the attribute text
      // which may effect the calculation of expand width
    
      self.expandHeight();
      self.expandWidth()
    end
    
    @Operation expandHeight()
    
      // Align all the types at the end of the longest name.
      
      let maxNameWidth = 0
      in @For attText in displays do
           maxNameWidth := maxNameWidth.max(attText.preTypeWidth())
         end;
         @For attText in displays do
           attText.type.move(maxNameWidth + attText.separator(),attText.type.y())
         end
      end;
      
      // Recalculate the y position of each attribute in case an
      // attribute is deleted and then reintroduced (via an undo)
      
      let height = 0
      in
        @For attText in displays do
          attText.moveY(height+3);
          height := height + 16
        end
      end;
      
      super()
    end
    
    @Operation maxHeight()
      if not shown 
      then 0
      elseif displays->isEmpty
      then 16
      else super() + 3
      end
    end
    
    @Operation maxWidth()
      if not shown
      then 0
      else super() + 3
      end
    end
    
    @Operation newAttribute(name,metaclass_,type)
      let text = self.nextAttribute(name,metaclass_,type)
      in text.new(self);
         self.add(text);
         text
      end
    end
    
    @Operation nextAttribute(name,metaclass_,type)
      AttributeText(name,metaclass_,type.name.toString(),2,self.displays->size * 16)
    end
    
    @Operation nextAttributeExtension(name,metaclass_,metaclassName,type)
      let extensionPoint = xmf.registry().getExtensionPoint("com.ceteva.diagrams.attribute.text") then
          class = (extensionPoint.find(metaclass_).values->head)()
      in class(name,metaclassName,type.name.toString(),2,self.displays->size * 16)
      end
    end
    
    @Operation packWidth()
    
      // Align all the types at the end of the longest name.
      
      @For attText in displays do
        attText.packWidth()
      end;
      
      let maxNameWidth = 0
      in @For attText in displays do
           maxNameWidth := maxNameWidth.max(attText.preTypeWidth())
         end;
         @For attText in displays do
           attText.type.move(maxNameWidth + attText.separator(),attText.type.y())
         end
      end;
      super()
    end
    
    @Operation remove(attributeText)
      super(attributeText);
      @For display in displays do
        if display.name.y > attributeText.name.y
        then 
          display.moveDown()
        end
      end;
      self.classNode().packHeight()
    end
       
     //Override Method  
    @Operation setShown(v : XCore::Element):XCore::Element
      @For display in displays do
        display.name.setEditable(v)
      end;
      self.shown := v
    end   
       
  end