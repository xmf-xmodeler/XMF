parserImport XOCL;
parserImport XMap;

import Clients;
import ClassDiagrams;

// textbox for inst level next to operation (and attribute later)

context Clients::ClassDiagrams

   @Class InstLevelText extends Clients::Diagrams::Box
   
		@Attribute instLevel : Clients::Diagrams::Text end
		@Attribute active : Boolean end
		@Attribute referringTo : CompiledOperation (!,?) end
		
		@Constructor(x,y)
			self.fillColor := Clients::Diagrams::Color();
			self.hideAllEdges();
			self.active := false;
            self.instLevel := Clients::Diagrams::Text("X",1,0,true,false,false,Clients::Diagrams::Color(255,255,255))
		end
		
		@Operation setActive(active : Boolean)
			self.active := active 
		end

		@Operation setLevel(level)
  		    self.instLevel.text := level;
  			self.checkDaemons()
		end
		
		@Operation maxWidth():XCore::Element
			if not shown
			then
				0
			else
				super() + 2
			end
   		 end
   		 
   		 @Operation minWidth():XCore::Element
      		if not active then
				0
			else
       			if self.width = 0
      			then
        			10
     			else
        			self.width
      			end
      		end
   		 end
   
    @Operation addDisplays()
      self.add(self.instLevel)
    end
   		 
   		@Operation maxHeight():XCore::Element
      		self.instLevel.maxHeight()
    	end
    	
  		@Operation checkDaemons() null
//  			@SlotValueChanged multi once InstLevelText::valueChanged(self.instLevel,"text") end
  		end
  		
  	@Operation valueChanged(obj, slot, new, old)
  			if new = " " or new = ""
   			then
   				referringTo.isIntrinsic := false;
   				@WithoutDaemons(instLevel)
   					obj.text := " ";
   					obj.renew(obj.owner)
   				end;
			   	obj.owner.setFillColor(Clients::Diagrams::Color())
			else
				try 
  					referringTo.isIntrinsic := true;
  					referringTo.instLevel := new.asInt();
  					obj.owner.setFillColor(Clients::Diagrams::Color(0,0,0))
				catch(exception)
   				  @WithoutDaemons(instLevel)
   					obj.text := old;
   					obj.renew(obj.owner)
   				  end
				end
			end
	  	end

	  @Operation expandWidth()
    
      	if self.width <> self.instLevel.width + 2 then
        	self.resize(self.instLevel.width + 2,height)
      	end
      end
      
    @Operation expandHeight()
    
      if self.height <> self.instLevel.height then
        self.resize(width,self.instLevel.height)
      end
    end
    
    @Operation setEditable(b)
      instLevel.setEditable(b)
    end
    
   end
