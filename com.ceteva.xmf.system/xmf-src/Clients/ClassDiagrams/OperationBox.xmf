parserImport XOCL;
parserImport XMap;

import Clients;
import Diagrams;
import ClassDiagrams;

context ClassDiagrams

  @Class OperationBox extends Box
  
    @Constructor(x,y,width)
      self.init(Seq{x,y,width,16,0,Color(),Color()})
    end
    
    @Operation add(opGroup:OperationGroup)
      super(opGroup);
      opGroup.pack()
    end
    
    @Operation classNode()
      owner.owner
    end
    
    @Operation expand()
    
      // In the case of AttributeBox the ordering is switched
      // because expand height rearranges the attribute text
      // which may effect the calculation of expand width
    
      self.expandHeight();
      self.expandWidth()
    end
    
    @Operation expandHeight()
      
      // Recalculate the y position of each attribute in case an
      // attribute is deleted and then reintroduced (via an undo)
      
      let height = 0
      in
        @For opGroup in displays do
          opGroup.moveY(height + 3);
          height := height + opGroup.name.maxHeight() + 3
        end
      end;
      
      super()
    end
    
    @Operation maxHeight()
      if not shown 
      then 0
      elseif displays->isEmpty
      then 16
      else super() + 3
      end
    end
    
    @Operation maxWidth()
      if not shown
      then 0
      else super() + 3
      end
    end
    
    @Operation newOperation(name,metaclass_,instLevel)    
      let text = OperationGroup()
      in text.initOperationGroup(name,metaclass_,instLevel,2,16 * displays->size);
        text.new(self);
        self.add(text)
      end
    end
    
    @Operation nextOperation(name,metaclass_,instLevel)
      let result = OperationGroup() in 
      result.initOperationGroup(name,metaclass_,instLevel,2,self.displays->size * 16)
      end
    end
    
    @Operation node()
      owner.owner
    end
    
    @Operation remove(operationText)
      super(operationText);
      @For display in displays do
        if display.name.y > operationText.name.y
        then display.moveDown()
        end
      end;
      self.classNode().packHeight()
    end
       
    //Override Method   
    @Operation setShown(v : XCore::Element):XCore::Element
      @For display in displays do
        display.name.setEditable(v);
        display.instLevel.setEditable(v);
        display.instLevel.setActive(v);
        display.instLevel.setShown(v)
      end;
      self.shown := v
    end   
    
      
    @Operation packWidth()       	 
	  let maxNameWidth = 0;
	  	  maxIntrinsicLevelName = 0;
	  	  separator = 13;
	  	  separatorIntrinsic = 5
	  in
		@For opGroup in displays do
          maxIntrinsicLevelName := maxIntrinsicLevelName.max(opGroup.instLevel.x + opGroup.instLevel.minWidth())
        end;
		@For opGroup in displays do
          opGroup.name.move(maxIntrinsicLevelName + separatorIntrinsic,opGroup.name.y())
        end;
        @For opGroup in displays do
          maxNameWidth := maxNameWidth.max(opGroup.name.x + opGroup.name.width())
        end;
        @For opGroup in displays do
          opGroup.metaclass_.move(maxNameWidth + separator,opGroup.metaclass_.y())
        end
      end;
      super()
    end
       
  end