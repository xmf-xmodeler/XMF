parserImport XOCL;

import Clients;
import Diagrams;
import Menus;
import ClassDiagrams;

context ClassDiagrams

  @Class AssociationEdge extends Edge
  
    @Attribute name      : Label          end
    @Attribute end1      : AssociationEnd end
    @Attribute end2      : AssociationEnd end
    @Attribute typePath  : Seq(String)    end
    @Attribute displayName1 : Label end
  
    @Constructor(name,end1,end2,source,target,typePath,xStart,yStart,xEnd,yEnd) 
      self.init(Seq{null,source,target,0,Edge::noArrow,Set{},Seq{/*WayPoint("start",1,xStart,yStart), WayPoint("end",2,xEnd,yEnd)*/},Color(),xStart,yStart,xEnd,yEnd});
      //if name.isKindOf(String)
      //then 
      //  self.name := Label(name,"",0,-53,true);
      //  self.name.arrow := 0;
      //  self.name.hide();
      //end;
      //if otherName.isKindOf(String)
      //then 
      //  self.otherName := Label(otherName,"",0,11,true);
      //  self.otherName.arrow := -1
      //end;
      if typePath->asSet <> Associations::Association.pathSeq()->asSet
      then self.add(StereotypeLabel(typePath->last))
      end;
        //self.end1 := end1;
        //self.end2 := end2;
      self.add(self.name);
      self.add(end1.displayName);
      self.add(end1.name);
      //self.end1.name.hide();
      self.add(end1.mult);
      self.add(end1.instLevel);
      self.add(end2.name);
      //self.end2.name.hide();
      self.add(end2.displayName);
      //self.end2.displayName.hide();
      self.add(end2.mult);
      self.add(end2.instLevel)
    end
    
    @Operation layoutId():String
      self.name()
    end
    
    @Operation name()
//      name.text()
		self.name
    end

    @Operation setName(name)
      null//self.name.text := name
    end
    
  end
  