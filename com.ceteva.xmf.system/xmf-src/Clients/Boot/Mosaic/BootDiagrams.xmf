parserImport XOCL;

import Comms;
import TopLevel;
import IO;

context XMF
  @Operation bootDiagrams()
    try 
        let diagramClient = Clients::Diagrams::DiagramClient("com.ceteva.diagram") then
            mappingClient = Clients::ClassMapping::MappingClient("com.ceteva.classMapping",diagramClient);
            mapClient = Clients::MappingMapping::MappingClient("com.ceteva.mappingMapping",diagramClient);
            snapClient = Clients::SnapshotMapping::MappingClient("com.ceteva.snapshots",diagramClient) then 
            fmmlxClient = Clients::FmmlxDiagrams::FmmlxDiagramClient("com.ceteva.fmmlxDiagram")
        in xmf.clientManager().add(diagramClient);
           xmf.clientManager().add(mappingClient);
           xmf.clientManager().add(mapClient);
           xmf.clientManager().add(snapClient);
           xmf.clientManager().add(fmmlxClient);
           @Fork(Diagrams)
             try
               diagramClient.start()
             catch(exception)
                format(stdout,"~S~%",Seq{exception})
             end
           end
        end
    catch(exception)
      format(stdout,"~S~%",Seq{exception})
    end
  end