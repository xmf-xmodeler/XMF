parserImport XOCL;

import Comms;
import TopLevel;
import IO;

context XMF
  @Operation bootTextEditor()
    try 
      let 
        textClient = Clients::TextEditor::TextEditorClient("com.ceteva.text")
      in 
        xmf.clientManager().add(textClient);
    
        // display the welcome message
       
        // textClient.showWelcomePage();
           
        @Fork(Text)
          try 
            textClient.start()
          catch(exception)
            format(stdout,"~S~%",Seq{exception})
          end
        end
      end
    catch(exception)
      format(stdout,"~S~%",Seq{exception})
    end
  end

context XMF
  @Operation textClient()
    self.findClient(Clients::TextEditor::TextEditorClient)
  end
  
context XMF
  @Operation browse(url:String)
    self.browseUsing(url,Clients::TextEditor::HTMLViewer)
  end
  
context XMF
  @Operation browseUsing(url:String,browserClass:Class)
    self.browseUsingInstance("",url,browserClass())
  end
  
context XMF
  @Operation browseUsingInstance(title:String,url:String,browser:HTMLViewer)
    let textClient = self.textClient() 
    in if textClient <> null
       then 
         textClient.newBrowser(browser);
         browser.setURL(url);
         browser.setName(title)
       end
    end
  end
  
context XMF
  @Operation browse(url:String,title:String)
    self.browseUsing(url,title,Clients::TextEditor::HTMLViewer)
  end
  
context XMF
  @Operation browseUsing(url:String,title:String,htmlViewerClass:Class)
    let textClient = self.textClient()
    in if textClient <> null
       then
         if textClient.hasBrowserForName(title)
         then
           let browser = textClient.getBrowserForName(title)
           in browser.setURL(url);
              browser.setFocus()
           end
         else
           let browser = self.browseUsing(url,htmlViewerClass)
           in if browser <> null
              then browser.setName(title)
              end;
              browser
           end
         end
       end
    end
  end