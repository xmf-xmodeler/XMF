parserImport XOCL;
//parserImport Clients::Mosaic;

import Clients::ExtensionPoints;

// setup the development perspective

//@Perspective("Development","development.gif")
//
//  @PlaceHolder Topleft(left,26)
//    @GraphicalTool "com.ceteva.browser" end
//  end
//  
//  @PlaceHolder BottomLeft(bottom,66,Topleft)
//    @GraphicalTool "com.ceteva.outline" end
//  end
//  
//  @PlaceHolder BottomRight(bottom,66)
//    @GraphicalTool "com.ceteva.form" end
//    @GraphicalTool "com.ceteva.console" end
//  end
//  
//end;

// drop down menus

let
  registry = xmf.registry();
  id = "com.ceteva.xmf.dropMenus"
in
  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","Projects","Open Project ..."},
        Clients::ProjectBrowser::openProject
      }
    )
  );
  
  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","Projects","New Project"},
        Clients::ProjectBrowser::newProject
      }
    )
  );

  registry.addContribution(id,
    Clients::ExtensionPoints::TypeLessContribution(
      Seq{
        Seq{"&File","Image","Save &Image ..."},
        XMF::saveImageAndInflater
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","System","&Debug","Main","Performance Monitor"},
        Clients::PerfMon::showPerfMon
      }
    )
  );
  
  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","System","&Debug","Main","Monitor Calls"},
        Debug::monitor
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","System","&Debug","Daemon","Monitor Daemon Firing"},
        Daemon::traceAll
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","System","&Debug","Daemon","Silent Daemon Firing"},
        Daemon::untraceAll
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","System","&Debug","Client","Monitor Client Communications"},
        XMF::monitorClientCommunications
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","System","&Debug","Client","Silent Client Communications"},
        XMF::silentClientCommunications
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","System","&Browse","File","Open &File Browser ..."},
        Root::createFileBrowser
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&Browse","Projects","&My Projects"},
        Clients::ProjectBrowser::showUserBrowser
      }
    )
  );
  
  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&Browse","Projects","&System Projects"},
        Clients::ProjectBrowser::showSystemBrowser
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&Browse","Projects","&Compile All"},
			@Operation compileAll()
			(xmf.homeDir() + "/Manifest.o").loadBin(false).build(xmf.homeDir()) 
			end
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&Browse","XTools","&XTools Manager"},
        Tools::Basic::showXToolsBrowser
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&Browse","File","Open &File Browser ..."},
        Root::createFileBrowser
      }
    )
  );

  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","Other","&Show Welcome Page"},
        Root::showWelcomePage
      }
    )
  );
  
  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","File","Open File &Browser ..."},
        Root::createFileBrowser
      }
    )
  );
  
  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","File","Open File ..."},
        Root::openSingleFile
      }
    )
  );
  
  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","Projects","Load Image"},
        	@Operation call()
 	        xmf.findClientByName("com.ceteva.mosaic").commandInterpreter().loadImage()
 		end
      }
    )
  );
  
  registry.addContribution(id,
    TypeLessContribution(
      Seq{
        Seq{"&File","Import","&Import","Main","CSV Data ..."},
        Arrays::importAndEditCSV
      }
    )
  )
  
end;

// namespace view protection

let
  registry = xmf.registry();
  id = "com.ceteva.xmf.protect.view"
in
  null
  // e.g. registry.addContribution(id,TypeLessContribution(XCore,Seq{}))
end;

// namespace delete protection

let
  registry = xmf.registry();
  id = "com.ceteva.xmf.protect.delete"
in
  registry.addContribution(id,TypeLessContribution(XCore,Seq{}));
  registry.addContribution(id,TypeLessContribution(OCL,Seq{}));
  registry.addContribution(id,TypeLessContribution(XOCL,Seq{}));
  registry.addContribution(id,TypeLessContribution(Parser,Seq{}));
  registry.addContribution(id,TypeLessContribution(Instrs,Seq{}));
  registry.addContribution(id,TypeLessContribution(Assembler,Seq{}));
  registry.addContribution(id,TypeLessContribution(Compiler,Seq{}));
  registry.addContribution(id,TypeLessContribution(IO,Seq{}));
  registry.addContribution(id,TypeLessContribution(Projects,Seq{}))  
end;

// boot init file

if xmf.hasProperty("initFile")
then
  let initFile = xmf.property("initFile")
  in xmf.setInitFile(initFile.subString(0,initFile->size - 2) + ".xmf")//;
    //if initFile.fileExists() and initFile.hasSuffix(".o")
    //then
    //  initFile.loadBin(false)
    //else xmf.warning("Cannot find Mosaic init file " + initFile)
    //end
  end
end;

context Root
@Operation compileAll()
(xmf.homeDir() + "/Manifest.o").loadBin(false).build(xmf.homeDir()) 
end

context Root
  @Bind XModelerStateRestorer =
    @XML::Parser::Grammar Test
      XModeler ::= <XModeler date=savedAt saver=user> Browser </XModeler>.
      Browser  ::= <Browser> BrowserElement* </Browser>.
      BrowserElement ::= <Directory p=path/> { 
        xmf.browseDirectory(p) 
      }.
    end
  end

context XMF
  @Operation loadXModelerState():Boolean
    if xmf.projDir().isKindOf(String) andthen xmf.projDir().fileExists()
    then self.loadXModelerState(xmf.projDir() + "/xmodeler.xml")
    else false
    end
  end
    
context XMF
  @Operation loadXModelerState(file:String):Boolean
    if file.fileExists()
    then 
      try
        @WithOpenFile(fin <- file)
          let xin = XML::Parser::ParserChannel(fin,XModelerStateRestorer)
          in xin.parse("XModeler")
          end
        end;
        true
      catch(exception)
        false
      end
    else false
    end
  end
  
context XMF
  @Operation saveXModelerState():Boolean    
    if self.projDir().isKindOf(String) andthen self.projDir().fileExists()
    then self.saveXModelerState(self.projDir() + "/xmodeler.xml")
    else false
    end
  end
  
context XMF
  @Operation saveXModelerState(file:String):Boolean   
    try
      @WithOpenFile(out -> file)
        @XML::PrintXML::XML(out)
          <XModeler savedAt=xmf.date() user=xmf.user()>
            <Browser>
              @For dir in xmf.browsedDirectories() do
                @XML::PrintXML::XML(out)
                  <Directory path=dir.name/>
                end
              end
            </Browser>
          </XModeler>
        end
      end;
      true
    catch(exception) 
      false
    end
  end
  
context XMF
  @Operation browseDirectory(path:String):Boolean
    if path.fileExists()
    then 
      let fileMappingClient = xmf.findClient(Clients::ModelBrowserXCore::MappingClient);
          dir = IO::Directory(path,Seq{".*.txt",".*.xmf",".*.xml",".*.java",".*.adb",".*.html"},0) 
      in fileMappingClient.add(dir);
         true    
      end
    else false
    end
  end
  