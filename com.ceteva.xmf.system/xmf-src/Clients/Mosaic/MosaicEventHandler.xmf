parserImport XOCL;

import Clients;
import Mosaic;

context Mosaic

  @Class MosaicEventHandler extends EventHandler

    @Operation dispatchEvent(message,parameters) 
      @Case message.name of
        "fileDropped"     do self.fileDropped(parameters)     end
        "shutdownRequest" do self.shutdown()                  end
        "shutDownAndSave" do self.shutDownAndSave(parameters) end
        "consoleDot"      do self.consoleDot(parameters)      end
        "nameLookup"      do self.nameLookup(parameters)      end
        "send"            do self.sendEvent(parameters)       end
      end
    end
    
    @Operation fileDropped(parameters)
      self.debug("fileDropped",parameters);
      let file = parameters.at(0)
      in if file.hasSuffix(".o")
         then file.loadBin(true)
         elseif file.hasSuffix(".xmf")
         then 
           Compiler::compileFile(file,true,true);
           (file.truncate(file->size - 4) + ".o").loadBin(true)
         end
      end
    end
      
    
    @Operation sendEvent(parameters)
      self.debug("send",parameters);
      let target = parameters.at(0);
          name = parameters.at(1);
          args = parameters.at(2).asSeq()
      in if xmf.handles().hasKey(target) 
         then 
           let element = xmf.handles().get(target)
           in element.send(name,args)
           end
         else xmf.message("Cannot find target for handle: " + target)
         end
      end
    end
      
    @Operation shutdown()
      self.debug("shutdown",Seq{});
      let answer = xmf.questionYesNoCancel("Save image before quit?") 
      in
      	if answer <> "" // do nothing on Cancel
      	then 
        	if (answer = "No") then
        	  self.owner().commandInterpreter().shutdown()
        	elseif (xmf.saveImageAndInflater() = true) then
        	  self.owner().commandInterpreter().shutdown()
        	end
      	end
      end
    end
    
    @Operation shutDownAndSave(parameters)
      self.debug("shutDownAndSave",parameters);
      let imagePath = parameters.at(0);
          inflationPath = parameters.at(1);
          answer = "Yes"
      in if imagePath.fileExists() and inflationPath.fileExists() // will typically be true, otherwise this method is not called
         then answer := xmf.questionYesNoCancel("Overwrite " + imagePath + " and .xml?")
         else
           if imagePath.fileExists()
           then answer := xmf.questionYesNoCancel("Overwrite " + imagePath + "?")
           end;
           if answer = "Yes" and inflationPath.fileExists()
           then answer := xmf.questionYesNoCancel("Overwrite " + inflationPath + "?")
           end
         end;
         if answer = "Yes"
         then 
           self.owner().commandInterpreter().saveInflater(inflationPath);
           if xmf.saveImage(imagePath)
           then self.owner().commandInterpreter().shutdown()
           else self.owner().commandInterpreter().inflate(inflationPath)
           end
         elseif answer = "No" then self.owner().commandInterpreter().shutdown()
         // else canceled
         end
      end
    end
    
    @Operation consoleDot(parameters)
      self.debug("consoleDot",parameters);
      let text = parameters.at(0) then
          type = ExpressionGrammar.parse(text,"exp")
      in if type = Null
         then self.owner().commandInterpreter().consoleDot(Seq{})
         else 
           @TypeCase(type)
              Class do
                let atts = type.allAttributes()->asSeq->iterate(a col = Seq{} | if not (a.isIntrinsic andthen a.instLevel < type.level )
												    then
						    							col.including(Seq{"field",a.name.toString()})
													else 
														col
													end);
                    //ops = type.allOperations()->asSeq->collect(o | Seq{"operation",o.name.toString() + "(" + o.paramNames()->separateWith(",") + ")"})
                    ops = type.allOperations()->asSeq->iterate(o col = Seq{} | if not (o.isIntrinsic andthen o.instLevel < (type.level-1) )
												    then
						    							col.including(Seq{"operation",o.name.toString() + "(" + o.paramNames()->separateWith(",") + ")"})
													else 
														col//col.including(Seq{"operation","SKIPPED: " + o.instLevel +"<"+ (type.level-1) + " " + o.name.toString() + "(...)"})
													end)
				in
//				then 
				  @While type.hasStructuralFeature("delegatesTo") andthen type.delegatesTo <> null
				  do 
					//(type + " hasStructuralFeature delegatesTo").println();
					type := type.delegatesTo;
					atts := atts + type.allAttributes()->asSeq->collect(a | Seq{"field",a.name.toString()});
                    ops  := ops  + type.allOperations()->asSeq->collect(o | Seq{"operation",o.name.toString() + "(" + o.paramNames()->separateWith(",") + ")"})                 
//					let pi = 3 // type = type.delegatesTo 
//					then atts = atts + type.allAttributes()->asSeq->collect(a | Seq{"field",a.name.toString()});
//                         ops = ops + type.allOperations()->asSeq->collect(o | Seq{"operation",o.name.toString() + "(" + o.paramNames()->separateWith(",") + ")"})                 
//                    in null end // let
                    //;type.println()
                    //;type.delegatesTo.println()
                  end; //while/do 
				self.owner().commandInterpreter().consoleDot(atts + ops)
                end //let/then/in
              end
              Classifier do
                let ops = type.allOperations()->asSeq->collect(o | Seq{"operation",o.name.toString() + "(" + o.paramNames()->separateWith(",") + ")"})
                in self.owner().commandInterpreter().consoleDot(ops)
                end
              end
           end
         end
      end
    end

    @Operation nameLookup(parameters)
      self.debug("nameLookup",parameters);
      let possiblePath = parameters.at(0) then
          path = possiblePath->splitBy(":",0,0)->reject(x | x = "")
      in if path->forAll(x | x.isKindOf(String)) and path->size > 0
         then 
           let root = path->head
           in if root.isBoundDynamic()
              then 
                let value = root.lookup()
                in if value.isKindOf(NameSpace)
                   then 
                     let element = value.lookupPath(path->tail,null)
                     in if element <> null and element.isKindOf(NameSpace)
                        then self.owner().commandInterpreter().namespace(element.names()->asSeq)
                        end
                     end
                   else self.owner().commandInterpreter().namespace(Seq{})
                   end
                end
              end
           end
         end
      end
    end
  end