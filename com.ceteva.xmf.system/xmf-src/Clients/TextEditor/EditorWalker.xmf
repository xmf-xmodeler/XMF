/******************************************************************************
 *                                                                            *
 *                               The Editor Walker                            *
 *                           -------------------------                        *
 *                                                                            *
 *  An editor walker is assigned to each text editor showing an XMF file and  *
 *  is used to process the abstract syntax structure (a compilation unit)     *
 *  contained in the file. The walker generates commands to the text editor   *
 *  client in order to inform it of markup for the text. For example the      *
 *  walker detects unbound variables in the source code and uses the position *
 *  information contained in the abstract syntax structure to inform the      *
 *  editor where to place visual indicators of the error. The walker will be  *
 *  called as required by the text editor client: at most it may be called    *
 *  every time the text changes, but it is likely that there could be a delay *
 *  in order to make the processing more efficient.                           *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import Signatures;
import NamedElement;
import XOCL;
import OCL;
import Walkers;
import Code;
import Clients;
import TextEditor;
import FileTextEditor;
import Stacks;

context TextEditor

  @Class EditorWalker extends CompilerWalker 

    @Attribute editor : FileTextEditor  end

    @Constructor(editor) ! end

    @Operation getNameSpace(path:Seq(String),nameSpaces:Seq(NameSpace)):NameSpace
      if path = []
      then nameSpaces->head
      else 
        let n:NameSpace = @Find(n,nameSpaces) when n.hasElement(path->head) do n.getElement(path->head) else null end
        in if n = null
           then null
           else self.getNameSpace(path->tail,[n]+nameSpaces)
           end
        end
      end
    end

    @Operation globalVar(name:String):Boolean

      // Global variables will not be in the environment managed by the walker.
      // Return true when the name is available everywhere...

      XCore.hasElement(name) orelse 
      Root.hasElement(name)  orelse 
      name="super"           orelse 
      name="declare"         orelse 
      name="hidden"
    end

    @Operation handleImports(imports:Seq(Import),env)
      // Add all the bindings from the imported name-space to the env...
      let nameSpaces = [Root]
      in @For i in imports do
           let path:Seq(String) = i.nameSpace then
               nameSpace:NameSpace = self.getNameSpace(path,nameSpaces);
               hasName(o) = o.isReallyKindOf(XCore::Object) andthen o.hasStructuralFeature("name") then
               getName(e) = if hasName(e) then e.name else "$" end then
               names(n:NameSpace):[Symbol] = n.contents()->collect(c | getName(c))->asSet + n.names()->asSet
           in if nameSpace.isReallyKindOf(XCore::NameSpace)
              then
                nameSpaces := [nameSpace]+nameSpaces;
                @For name in names(nameSpace) do
                  if nameSpace.hasElement(name)
                  then 
                    let e = nameSpace.getElement(name) 
                    in if e.isKindOf(XCore::Class)
                       then env := env.bind(name.toString(),TypeDescriptor(e.of(),e,i,"Defined in " + e.resourceName,[Action("edit",[e.resourceName])]))
                       else env := env.bind(name.toString(),ImportDescriptor(null,i))
                       end
                    end
                  end
                end
              end
           end
         end;
         env
       end
    end

    @Operation walkApply(charStart:Integer,charEnd:Integer,args:Seq(OCL),operator:OCL,env)
      self.walk(operator,env);
      @For arg in args do
        self.walk(arg,env)
      end;
      editor.ast("application",charStart,charEnd)
    end

    @Operation walkAttribute(line:Integer,charStart:Integer,charEnd:Integer,doc:Performable,init:Performable,meta:Performable,modifiers:AttributeModifiers,mult:String,name:String,properties:Seq(Element),type:Performable,env)
      self.walk(init,env);
      self.walk(type,env);
      editor.ast("attribute definition",charStart,charEnd)
    end

    @Operation walkBinExp(charStart:Integer,charEnd:Integer,binOp:String,left:OCL,right:OCL,env)
      self.walk(left,env);
      self.walk(right,env);
      editor.ast("binexp",charStart,charEnd)
    end

    @Operation walkBinding(charStart:Integer,charEnd:Integer,name:String,env)
      editor.ast("binding",charStart,charEnd)
    end

    @Operation walkBoolExp(line:Integer,charStart:Integer,charEnd:Integer,value:Boolean,env)
      editor.ast("bool",charStart,charEnd)
    end

    @Operation walkCollExp(charStart:Integer,charEnd:Integer,args:Seq(OCL),collOp:String,collection:OCL,env)
      self.walk(collection,env);
      @For arg in args do
        self.walk(arg,env)
      end;
      editor.ast("collection",charStart,charEnd)
    end

    @Operation walkClass(line:Integer,charStart:Integer,charEnd:Integer,defs:Seq(Performable),isAbstract:Boolean,metaClass:Performable,name:String,parents:Seq(Performable),env)
      let atts = defs->select(d | d.isKindOf(XOCL::Attribute)) then
          env0 = atts->iterate(a e=env | e.bind(a.name,AttDescriptor(a.type,a))) then
          env0 = parents->iterate(parent env = env0 | self.bindInheritedAtts(parent,env))
      in self.walk(metaClass,env);
         @For parent in parents do self.walk(parent,env) end;
         @For def in defs do self.walk(def,env0) end;
         editor.ast("class definition",charStart,charEnd)
      end
    end

    @Operation bindInheritedAtts(parent:Performable,env) 
      let getAtts(name:String):[XCore::Attribute] =
            if env.binds(name)
            then 
             let v:VarDescriptor = env.lookup(name)
             in if v.isKindOf(TypeDescriptor)
                then 
                  let c:Classifier = v.meta
                  in if c <> null andthen c.isKindOf(XCore::Class)
                     then c.allAttributes()->asSeq
                     else []
                     end
                  end
                else []
                end
             end
            elseif XCore.hasElement(name) andthen XCore.getElement(name).isReallyKindOf(XCore::Class)
            then XCore.getElement(name).allAttributes()->asSeq
            elseif Root.hasElement(name) andthen Root.getElement(name).isReallyKindOf(XCore::Class)
            then Root.getElement(name).allAttributes()->asSeq
            else []
            end
      in if parent.isKindOf(Var)
         then 
           let name:String = parent.name.toString()
           in @For a in getAtts(name) do 
                 env := env.bind(a.name.toString(),AttDescriptor(a.type,parent))
              end;
              env
           end
         else env
         end
     end
    end
        

    @Operation walkCompilationUnit(resource:String,exps:Seq(Performable),imports:Seq(Import),source:String,parserImports:Seq(ParserImport),env)
      let env0 = self.addCompilationUnitDefs(imports,exps,env);
          sig = exps->iterate(exp sig = [] | sig + self.toSigEntry(exp))
      in @For exp in exps do
           self.walk(exp,self.handleImports(imports,env0))
         end;
         editor.setSignature(sig)
      end
    end
    
    @Operation toSigEntry(exp:Performable):[[Element]]
    
      // Format of each signature entry is [charPos,shortLabel,longLabel,children]
      // These are processed by the client to provide a file index...
      
      @CaseObj exp of
        ContextDef[path,element] do
          self.toSigEntry(element)
        end
        OCL::Operation[charStart,name,parameters,type] do
          [[charStart,name+"()",name+"()",[]]]
        end
        XOCL::Attribute[charStart,name,type] do
          [[charStart,name+":"+type.pprint(),name+":"+type.pprint(),[]]]
        end
        XOCL::Package[charStart,name,defs] do
          [[charStart,name,name,defs->iterate(def sig=[] | sig + self.toSigEntry(def))]]
        end
        XOCL::Class[charStart,name,defs] do
          [[charStart,name,name,defs->iterate(def sig=[] | sig + self.toSigEntry(def))]]
        end
        else []
      end
    end

    @Operation addCompilationUnitDefs(imports:Seq(Import),exps:Seq(Performable),env)

      // A compilation unit typically contains definitions of the form context P D where P is
      // a path to a name space and D is a definition with a name. In addition there may be
      // path updates of the form P::N := M where P is a path to a name space and N is a named 
      // element to be added or updated. Assuming P is imported in the compilation unit, then 
      // the name of D is available as a free variable anywhere. This operation extends the 
      // supplied environment with variable descriptors for these definitions...

      @Letrec
        importedNames = imports->iterate(i paths = [["Root"],["XCore"]] | paths + [i.nameSpace]);
        equalPaths(p1:Seq(String),p2:Seq(String)):Boolean = 
          if p1 = [] and p2 = []
          then true
          elseif p1 = [] or p2 = []
          then false
          else p1->head = p2->head and equalPaths(p1->tail,p2->tail)
          end;
        isDef(e:Performable):Boolean = e.isKindOf(XOCL::Def) or e.isKindOf(OCL::Operation);
        toPath(p:Path):Seq(String) =
          if p.root.isKindOf(Var)
          then [p.root.name.toString()]+p.names->butLast
          else []
          end
      in @For exp in exps do
           if exp.isKindOf(ContextDef)
           then
             if isDef(exp.element)
             then 
               if importedNames->exists(p | equalPaths(exp.path,p))
               then env := env.bind(exp.element.name.toString(),VarDescriptor(null,exp.element))
               end
             end
           elseif exp.isKindOf(PathUpdate)
           then 
             if importedNames->exists(p | equalPaths(toPath(exp.path),p))
             then env := env.bind(exp.path.names->last.toString(),VarDescriptor(null,exp))
             end
           end
         end; 
         env
      end
    end
    

    @Operation walkConsExp(charStart:Integer,charEnd:Integer,head:OCL,tail:OCL,env)
      self.walk(head,env);
      self.walk(tail,env);
      editor.ast("cons",charStart,charEnd)
    end

    @Operation walkConst(charStart:Integer,charEnd:Integer,value:Element,env)
      editor.ast("const",charStart,charEnd)
    end

    @Operation walkConstructor(line:Integer,charStart:Integer,charEnd:Integer,body:Performable,doc:Performable,names:Seq(String),toString:Boolean,env)
       charStart := charStart + "@Constructor("->size;
       @For name in names do
         self.walkVar(line,charStart,charStart+name->size,name,env);
         charStart := charStart + name->size + 1
       end;
       editor.ast("constructor definition",charStart,charEnd)
    end

    @Operation walkContextDef(charStart:Integer,charEnd:Integer,element:OCL,isForward:Boolean,path:Seq(Element),env)
      self.walk(element,env);
      editor.ast("context definition",charStart,charEnd)
    end

    @Operation walkDot(charStart:Integer,charEnd:Integer,name:String,target:OCL,env)
      self.walk(target,env);
      editor.ast("slot reference",charStart,charEnd)
    end

    @Operation walkFind(line:Integer,charStart:Integer,charEnd:Integer,action:Performable,alternative:Performable,collection:Performable,name:String,test:Performable,env)
       let locStart = charStart + "@For ("->size then
           locEnd = locStart+name->size then
           loc = let loc = Located() in (loc.charStart := locStart).charEnd := locEnd end then
           env0 = env.bind(name,VarDescriptor(null,loc))
       in self.walk(collection,env);
          self.walk(action,env0);
          self.walk(alternative,env0);
          self.walk(test,env0);
          editor.ast("find definition",charStart,charEnd)
       end
    end

    @Operation walkFloatExp(line:Integer,postPoint:String,prePoint:String,env)
      null
    end

    @Operation walkFor(line:Integer,charStart:Integer,charEnd:Integer,body:Performable,colls:Seq(Performable),directive:String,guard:Performable,isExp:Boolean,names:Seq(String),env)
       @For c in colls do self.walk(c,env) end;
       @Letrec
         mkLocated(charStart:Integer,charEnd:Integer):Located =
           let l = Located() 
           in l.charStart := charStart; l.charEnd := charEnd; l
           end;
         bind(names:Seq(String),i:Integer,env) =
           if names=[]
           then env
           else 
             let name = names->head then
                 length = name->size
             in bind(names->tail,i+length+1,env.bind(name,VarDescriptor(null,mkLocated(i,i+length))))
             end
           end
       in self.walk(body,bind(names,charStart + "@For "->size,env));
          editor.ast("for definition",charStart,charEnd)
       end
    end

    @Operation walkFunBinding(name:String,args:Seq(Pattern),type:OCL,body:OCL,env)
      let env0 = args->select(p | p.isKindOf(Varp))->iterate(v e = env | e.bind(v.name,VarDescriptor(null,v))) 
      in self.walk(body,env0)
      end
    end

    @Operation walkHeadUpdate(seq:Performable,value:Performable,env)
      self.walk(seq,env);
      self.walk(value,env)
    end
    
    @Operation walkIf(line:Integer,charStart:Integer,charEnd:Integer,test:Performable,e1:Performable,e2:Performable,env)
      self.walk(test,env);
      self.walk(e1,env);
      self.walk(e2,env);
      editor.ast("if",charStart,charEnd)
    end

    @Operation walkInstantiate(args:Seq(KeyArg),class:Performable,env)
      self.walk(class,env);
      @For arg in args do
        self.walk(arg,env)
      end
    end

    @Operation walkIntExp(line:Integer,charStart:Integer,charEnd:Integer,value:Integer,env)
      editor.ast("int",charStart,charEnd)
    end

    @Operation walkIterExp(charStart:Integer,charEnd:Integer,body:OCL,collection:OCL,iterOp:String,name:String,env)
       let varStart = collection.charEnd + (iterOp + "->(")->size then
           varEnd = varStart + name->size then
           located = let l = Located() in (l.charStart := varStart).charEnd := varEnd end then
           env0 = env.bind(name,VarDescriptor(null,located))
       in self.walk(collection,env);
          self.walk(body,env0);
          editor.ast(iterOp,charStart,charEnd)
       end
    end

    @Operation walkIterate(charStart:Integer,charEnd:Integer,accumulator:String,body:OCL,collection:OCL,name:String,value:OCL,env)
      self.walk(collection,env);
      self.walk(value,env);
      self.walk(body,env.bind(accumulator,null).bind(name,VarDescriptor()));
      editor.ast("iterate",charStart,charEnd)
    end

    @Operation walkLet(line:Integer,charStart:Integer,charEnd:Integer,bindings:Seq(ValueBinding),body:OCL,env)
       @For b in bindings do self.walk(b,env) end;
       let env0 = bindings->iterate(b e=env | e.bind(b.name,VarDescriptor(b.type,b)))
       in self.walk(body,env0);
          editor.ast("let",charStart,charEnd)
       end
    end 

    @Operation walkLetrec(line:Integer,charStart:Integer,charEnd:Integer,bindings:Seq(ValueBinding),body:Performable,env)
       let env0 = bindings->iterate(b e=env | e.bind(b.name,VarDescriptor(b.type,b)))
       in @For b in bindings do self.walk(b,env0) end;
          self.walk(body,env0);
          editor.ast("letrec",charStart,charEnd)
       end
    end

    @Operation walkNamedType(charStart:Integer,charEnd:Integer,path:Seq(String),env)
       self.walkVar(0,charStart,charEnd,path->head.toString(),env)
    end

    @Operation walkNegate(exp:OCL,env)
      self.walk(exp,env)
    end

    @Operation walkOperation(charStart:Integer,charEnd:Integer,doc:Performable,imports:Seq(Seq(String)),isMultiArgs:Boolean,name:String,args:Seq(Pattern),body:Performable,type:TypeExp,properties,env)
      let env0 = args->select(p | p.isKindOf(Varp))->iterate(v e = env | e.bind(v.name,VarDescriptor(null,v)))
      in @For arg in args do self.walk(arg,env) end;
         self.walk(body,env0);
         self.walk(type,env);
         editor.ast("operation definition",charStart,charEnd)
      end
    end

    @Operation walkOrder(first:OCL,second:OCL,env)
      self.walk(first,env);
      self.walk(second,env)
    end

    @Operation walkPackage(line:Integer,charStart:Integer,charEnd:Integer,defs:Seq(Performable),meta:Performable,metaPackage:Performable,name:String,parents:Seq(Performable),defImports:Seq(Performable),env)
      let env0 = defs->iterate(def env=env | 
                   if def.isKindOf(XOCL::Class) 
                   then env.bind(def.name.toString(),VarDescriptor(XCore::Class,def)) 
                   else env 
                   end)
      in self.walk(meta,env);
         self.walk(metaPackage,env);
         @For parent in parents do
           self.walk(parent,env)
         end;
         @For i in defImports do
           self.walk(i,env)
         end;
         @For def in defs do
           self.walk(def,env0)
         end
      end
    end

    @Operation walkParametricType(charStart:Integer,charEnd:Integer,args:Seq(TypeExp),constructor:Seq(String),env)
      self.walkVar(0,charStart,charEnd,constructor->head,env);
      @For arg in args do
        self.walk(arg,env)
      end
    end

    @Operation walkPath(charStart:Integer,charEnd:Integer,names:Seq(Element),root:OCL,env)
      self.walk(root,env);
      editor.ast("path",charStart,charEnd)
    end

    @Operation walkPathUpdate(charStart:Integer,charEnd:Integer,path:Path,value:Performable,env)
      self.walk(path,env);
      self.walk(value,env);
      editor.ast("path update",charStart,charEnd)
    end

    @Operation walkSelf(line:Integer,charStart:Integer,charEnd:Integer,env)
      editor.ast("self",charStart,charEnd)
    end

    @Operation walkSend(charStart:Integer,charEnd:Integer,args:Seq(OCL),message:String,target:OCL,env)
      self.walk(target,env);
      @For arg in args do 
        self.walk(arg,env)
      end;
      editor.ast("send",charStart,charEnd)
    end

    @Operation walkSetExp(charStart:Integer,charEnd:Integer,line:Integer,collType:String,elements:Seq(OCL),env)
      @For e in elements do
        self.walk(e,env)
      end
    end

    @Operation walkSlotUpdate(name:String,target:OCL,value:OCL,env)
      self.walk(target,env);
      self.walk(value,env)
    end

    @Operation walkStrExp(line:Integer,value:String,env)
      null
    end

    @Operation walkTry(line:Integer,body:Performable,handler:Performable,name:String,env)
      
      // Bind the catch variable...
      
      let varStart = body.charEnd + "catch("->size then
          varEnd = varStart + name->size then
          located = let l = Located() in (l.charStart := varStart).charEnd := varEnd end then
          env0 = env.bind(name,VarDescriptor(null,located))
      in self.walk(body,env);
         self.walk(handler,env0)
      end
    end

    @Operation walkVar(line:Integer,charStart:Integer,charEnd:Integer,name:String,env)

      // Inform the editor of any unbound variables. The supplied
      // environment binds the names of the variables to information
      // bundles. Some name-spaces are implicitly imported everywhere
      // and those should be checked here...

      if env.binds(name)
      then 
        let d:VarDescriptor = env.lookup(name)
        in if d <> null 
           then d.sendEditor(editor,charStart,charEnd)
           end
        end
      elseif not(self.globalVar(name))
      then editor.unboundVar(name,charStart,charEnd)
      end;
      editor.ast("var",charStart,charEnd)
    end

    @Operation walkVarp(charStart:Integer,charEnd:Integer,name:String,pattern:Pattern,type:TypeExp,env)
      self.walk(type,env)
    end
  
  end