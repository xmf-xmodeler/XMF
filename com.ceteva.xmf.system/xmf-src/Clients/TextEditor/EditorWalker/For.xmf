/******************************************************************************
 *                                                                            *
 *                               The Editor Walker                            *
 *                           -------------------------                        *
 *                                                                            *
 *  An editor walker is assigned to each text editor showing an XMF file and  *
 *  is used to process the abstract syntax structure (a compilation unit)     *
 *  contained in the file. The walker generates commands to the text editor   *
 *  client in order to inform it of markup for the text. For example the      *
 *  walker detects unbound variables in the source code and uses the position *
 *  information contained in the abstract syntax structure to inform the      *
 *  editor where to place visual indicators of the error. The walker will be  *
 *  called as required by the text editor client: at most it may be called    *
 *  every time the text changes, but it is likely that there could be a delay *
 *  in order to make the processing more efficient.                           *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import NamedElement;
import XOCL;
import OCL;
import Signatures;
import Walkers;
import Code;
import Clients;
import TextEditor;
import FileTextEditor;
import Stacks;

context EditorWalker

  @Operation walkFor(line:Integer,charStart:Integer,charEnd:Integer,body:Performable,colls:Seq(Performable),directive:String,guard:Performable,isExp:Boolean,names:Seq(String),env):Type
     @For c in colls do self.walk(c,env) end;
     @Letrec
       mkLocated(charStart:Integer,charEnd:Integer):Located =
         let l = Located() 
         in l.charStart := charStart; l.charEnd := charEnd; l
         end;
       bind(names:Seq(String),i:Integer,env) =
         if names=[]
         then env
         else 
           let name = names->head then
               length = name->size
           in bind(names->tail,i+length+1,env.bind(name,VarDescriptor(null,mkLocated(i,i+length))))
           end
         end
     in self.walk(body,bind(names,charStart + "@For "->size,env));
        editor.ast("for definition",charStart,charEnd);
        Element.toType()
     end
  end