/******************************************************************************
 *                                                                            *
 *                               The Editor Walker                            *
 *                           -------------------------                        *
 *                                                                            *
 *  An editor walker is assigned to each text editor showing an XMF file and  *
 *  is used to process the abstract syntax structure (a compilation unit)     *
 *  contained in the file. The walker generates commands to the text editor   *
 *  client in order to inform it of markup for the text. For example the      *
 *  walker detects unbound variables in the source code and uses the position *
 *  information contained in the abstract syntax structure to inform the      *
 *  editor where to place visual indicators of the error. The walker will be  *
 *  called as required by the text editor client: at most it may be called    *
 *  every time the text changes, but it is likely that there could be a delay *
 *  in order to make the processing more efficient.                           *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import NamedElement;
import XOCL;
import OCL;
import Signatures;
import Walkers;
import Code;
import Clients;
import TextEditor;
import FileTextEditor;
import Stacks;

context EditorWalker

 @Operation walkClass(line:Integer,charStart:Integer,charEnd:Integer,defs:Seq(Performable),isAbstract:Boolean,metaClass:Performable,name:String,parents:Seq(Performable),env):Type
    let atts = defs->select(d | d.isKindOf(XOCL::Attribute)) then
        getType(p:Performble):Type =
          try p.eval(null,[],env.lookup("__NameSpaces__")).toType()
          catch(x) Element.toType()
          end then
        env0 = atts->iterate(a e=env | e.bind(a.name,AttDescriptor(getType(a.type),a))) then
        env0 = parents->iterate(parent env = env0 | self.bindInheritedAtts(parent,env))
    in self.walk(metaClass,env);
       @For parent in parents do self.walk(parent,env) end;
       @For def in defs do self.walk(def,env0) end;
       editor.ast("class definition",charStart,charEnd);
       Element.toType()
    end
  end