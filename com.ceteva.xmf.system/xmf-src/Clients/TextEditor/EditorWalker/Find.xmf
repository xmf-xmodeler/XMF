/******************************************************************************
 *                                                                            *
 *                               The Editor Walker                            *
 *                           -------------------------                        *
 *                                                                            *
 *  An editor walker is assigned to each text editor showing an XMF file and  *
 *  is used to process the abstract syntax structure (a compilation unit)     *
 *  contained in the file. The walker generates commands to the text editor   *
 *  client in order to inform it of markup for the text. For example the      *
 *  walker detects unbound variables in the source code and uses the position *
 *  information contained in the abstract syntax structure to inform the      *
 *  editor where to place visual indicators of the error. The walker will be  *
 *  called as required by the text editor client: at most it may be called    *
 *  every time the text changes, but it is likely that there could be a delay *
 *  in order to make the processing more efficient.                           *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import NamedElement;
import XOCL;
import OCL;
import Signatures;
import Walkers;
import Code;
import Clients;
import TextEditor;
import FileTextEditor;
import Stacks;

context EditorWalker

  @Operation walkFind(line:Integer,charStart:Integer,charEnd:Integer,action:Performable,alternative:Performable,collection:Performable,name:String,test:Performable,env):Type
     let locStart = charStart + "@For ("->size then
         locEnd = locStart+name->size then
         loc = let loc = Located() in (loc.charStart := locStart).charEnd := locEnd end then
         env0 = env.bind(name,VarDescriptor(null,loc))
     in self.walk(collection,env);
        self.walk(action,env0);
        self.walk(alternative,env0);
        self.walk(test,env0);
        editor.ast("find definition",charStart,charEnd);
        Element.toType()
     end
  end