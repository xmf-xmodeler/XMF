/******************************************************************************
 *                                                                            *
 *                               The Editor Walker                            *
 *                           -------------------------                        *
 *                                                                            *
 *  An editor walker is assigned to each text editor showing an XMF file and  *
 *  is used to process the abstract syntax structure (a compilation unit)     *
 *  contained in the file. The walker generates commands to the text editor   *
 *  client in order to inform it of markup for the text. For example the      *
 *  walker detects unbound variables in the source code and uses the position *
 *  information contained in the abstract syntax structure to inform the      *
 *  editor where to place visual indicators of the error. The walker will be  *
 *  called as required by the text editor client: at most it may be called    *
 *  every time the text changes, but it is likely that there could be a delay *
 *  in order to make the processing more efficient.                           *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import NamedElement;
import XOCL;
import OCL;
import Signatures;
import Walkers;
import Code;
import Clients;
import TextEditor;
import FileTextEditor;
import Stacks;

context EditorWalker

  @Operation walkLet(line:Integer,charStart:Integer,charEnd:Integer,bindings:Seq(ValueBinding),body:OCL,env):Type
     @For b in bindings do self.walk(b,env) end;
     let getType(t:TypeExp):Type = 
           if env.binds("__NameSpaces__")
           then 
             try t.toExp().eval(null,[],env.lookup("__NameSpaces__")).toType()
             catch(x)
               xmf.message(x.toString());
               Element.toType()
             end
           else Element.toType()
           end then
         env0 = bindings->iterate(b e=env | e.bind(b.name,VarDescriptor(getType(b.type),b)))
     in self.walk(body,env0);
        editor.ast("let",charStart,charEnd);
        Element.toType()
     end
  end 