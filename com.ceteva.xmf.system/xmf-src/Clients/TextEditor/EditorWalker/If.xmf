/******************************************************************************
 *                                                                            *
 *                               The Editor Walker                            *
 *                           -------------------------                        *
 *                                                                            *
 *  An editor walker is assigned to each text editor showing an XMF file and  *
 *  is used to process the abstract syntax structure (a compilation unit)     *
 *  contained in the file. The walker generates commands to the text editor   *
 *  client in order to inform it of markup for the text. For example the      *
 *  walker detects unbound variables in the source code and uses the position *
 *  information contained in the abstract syntax structure to inform the      *
 *  editor where to place visual indicators of the error. The walker will be  *
 *  called as required by the text editor client: at most it may be called    *
 *  every time the text changes, but it is likely that there could be a delay *
 *  in order to make the processing more efficient.                           *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import NamedElement;
import XOCL;
import OCL;
import Signatures;
import Walkers;
import Code;
import Clients;
import TextEditor;
import FileTextEditor;
import Stacks;

context EditorWalker

  @Operation walkIf(line:Integer,charStart:Integer,charEnd:Integer,test:Performable,e1:Performable,e2:Performable,env):Type
    editor.ast("if",charStart,charEnd);
    let type:Type = self.walk(test,env);
        e1Type:Type = self.walk(e1,env);
        e2Type:Type = self.walk(e2,env)
    in if editor.isTypeChecking(type)
       then
         if not(e1Type.equals(e2Type))
         then editor.typeError(e1.charStart,e1.charEnd,e2Type.classifier,e1Type.classifier)
         end;
         if type.isBool()
         then e1Type
         else 
           editor.typeError(test.charStart,test.charEnd,Boolean,type.classifier);
           Element.toType()
         end
       else Element.toType()
       end
    end
  end