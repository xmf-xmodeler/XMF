/******************************************************************************
 *                                                                            *
 *                               The Editor Walker                            *
 *                           -------------------------                        *
 *                                                                            *
 *  An editor walker is assigned to each text editor showing an XMF file and  *
 *  is used to process the abstract syntax structure (a compilation unit)     *
 *  contained in the file. The walker generates commands to the text editor   *
 *  client in order to inform it of markup for the text. For example the      *
 *  walker detects unbound variables in the source code and uses the position *
 *  information contained in the abstract syntax structure to inform the      *
 *  editor where to place visual indicators of the error. The walker will be  *
 *  called as required by the text editor client: at most it may be called    *
 *  every time the text changes, but it is likely that there could be a delay *
 *  in order to make the processing more efficient.                           *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import NamedElement;
import XOCL;
import OCL;
import Signatures;
import Walkers;
import Code;
import Clients;
import TextEditor;
import FileTextEditor;
import Stacks;

context EditorWalker

  @Operation walkVar(line:Integer,charStart:Integer,charEnd:Integer,name:String,env):Type

      // Inform the editor of any unbound variables. The supplied
      // environment binds the names of the variables to information
      // bundles. Some name-spaces are implicitly imported everywhere
      // and those should be checked here...

      editor.ast("var",charStart,charEnd);
      if env.binds(name)
      then 
        let d:VarDescriptor = env.lookup(name)
        in if d <> null 
           then 
             d.sendEditor(editor,charStart,charEnd);
             if d.type <> null then d.type else Element.toType() end
           else Element.toType()
           end
        end
      elseif not(self.globalVar(name))
      then 
        editor.unboundVar(name,charStart,charEnd);
        Element.toType()
      else self.globalType(name)
      end
    end