/******************************************************************************
 *                                                                            *
 *                               The Editor Walker                            *
 *                           -------------------------                        *
 *                                                                            *
 *  An editor walker is assigned to each text editor showing an XMF file and  *
 *  is used to process the abstract syntax structure (a compilation unit)     *
 *  contained in the file. The walker generates commands to the text editor   *
 *  client in order to inform it of markup for the text. For example the      *
 *  walker detects unbound variables in the source code and uses the position *
 *  information contained in the abstract syntax structure to inform the      *
 *  editor where to place visual indicators of the error. The walker will be  *
 *  called as required by the text editor client: at most it may be called    *
 *  every time the text changes, but it is likely that there could be a delay *
 *  in order to make the processing more efficient.                           *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import NamedElement;
import XOCL;
import OCL;
import Signatures;
import Walkers;
import Code;
import Clients;
import TextEditor;
import FileTextEditor;
import Stacks;

context EditorWalker
    
    @Operation walkGrammar(charStart,charEnd,bindings,imports,line,parents,contents,clauseCache,clauses,documentation,dynamics,name,startingSymbol,terminals,owner,debug,env)
      editor.ast("grammar",charStart,charEnd);
      env := clauses->iterate(clause env=env |
        // Add in the definition of each clause-name. The clause is used as
        // the definiting location and can be used to verify the arity and
        // type-signature for subsequent calls...
        env.bind(clause.name.toString(),VarDescriptor(Parser::BNF::Clause,clause)));
      @For clause in clauses do
        self.walk(clause,env)
      end;
      Parser::BNF::Grammar.toType()
    end