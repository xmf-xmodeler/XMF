/******************************************************************************
 *                                                                            *
 *                               The Editor Walker                            *
 *                           -------------------------                        *
 *                                                                            *
 *  An editor walker is assigned to each text editor showing an XMF file and  *
 *  is used to process the abstract syntax structure (a compilation unit)     *
 *  contained in the file. The walker generates commands to the text editor   *
 *  client in order to inform it of markup for the text. For example the      *
 *  walker detects unbound variables in the source code and uses the position *
 *  information contained in the abstract syntax structure to inform the      *
 *  editor where to place visual indicators of the error. The walker will be  *
 *  called as required by the text editor client: at most it may be called    *
 *  every time the text changes, but it is likely that there could be a delay *
 *  in order to make the processing more efficient.                           *
 *                                                                            *
 ******************************************************************************/
 
parserImport XOCL;

import NamedElement;
import XOCL;
import OCL;
import Signatures;
import Walkers;
import Code;
import Clients;
import TextEditor;
import FileTextEditor;
import Stacks;

context EditorWalker

  @Operation walkPackage(line:Integer,charStart:Integer,charEnd:Integer,defs:Seq(Performable),meta:Performable,metaPackage:Performable,name:String,parents:Seq(Performable),defImports:Seq(Performable),env):Type
      let env0 = defs->iterate(def env=env | 
                   if def.isKindOf(XOCL::Class) 
                   then env.bind(def.name.toString(),VarDescriptor(XCore::Class,def)) 
                   else env 
                   end)
      in self.walk(meta,env);
         self.walk(metaPackage,env);
         @For parent in parents do
           self.walk(parent,env)
         end;
         @For i in defImports do
           self.walk(i,env)
         end;
         @For def in defs do
           self.walk(def,env0)
         end;
         Element.toType()
      end
    end