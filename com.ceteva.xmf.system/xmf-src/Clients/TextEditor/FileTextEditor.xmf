parserImport XOCL;

import Clients;
import TextEditor;

context TextEditor

  @Class FileTextEditor extends Editor, FileEditor
  
    @Attribute lastModified  : Seq(Integer)              end
    @Attribute 
    
      // This is set by the editor and can be: ON, OFF, IGNORE_ELEMENT.
      // When the value is IGNORE_ELEMENT then the type checker will 
      // ignore errors that arise because an expression has the type
      // XCore::Element. This allows legacy code to be incrementally
      // extended with types: if you specify a type then the type checker
      // will enforce it.
      
      typeCheckMode : String = "IGNORE_ELEMENT" 
    end
  
    @Constructor(file,name,tooltip,editable)
      self.init(Seq{name,tooltip,editable});
      self.init(Seq{file});
      self.lastModified := self.getFileModifiedDate()
    end
    
    @Operation action(name:String,args:[Element],charStart:Integer,charEnd:Integer)
      self.commandInterpreter().action(self,name,args,charStart,charEnd)
    end

    @Operation ast(tooltip:String,charStart:Integer,charEnd:Integer)
      if charStart <> charEnd
      then self.commandInterpreter().ast(self,tooltip,charStart,charEnd) 
      end
    end  
    
    @Operation close()
      super();
      self.closeEvent()
    end
    
    @Operation dotError(charStart:Integer,charEnd:Integer,name:String)
      self.commandInterpreter().dotError(self,charStart,charEnd,name)
    end
    
    @Operation getFileModifiedDate()
      file.fullPath().getLastModified()
    end
    
    @Operation isTypeChecking(t:Type):Boolean
      (typeCheckMode = "ON") orelse ((typeCheckMode = "IGNORE_ELEMENT") andthen not(t.isElement()))
    end
    
    @Operation isModified(time,since)
      if time.hours > since.hours
      then true
      elseif time.hours = since.hours
      then
       if time.minutes > since.minutes
       then true
       elseif time.minutes = since.minutes
       then
         if time.seconds > since.seconds
         then true
         else false
         end
       else false
       end
     else false
     end
    end
    
    @Operation renew()
      super();
      self.setText(file.fullPath().readFile());
      self
    end
    
    @Operation focusGained()
      if self.getFileModifiedDate() <> false
      then
        if self.isModified(self.getFileModifiedDate(),lastModified)
        then
          if self.updateFileQuestion()
          then
            self.setText(file.fullPath().readFile());
            self.setClean()
          end
        end
      end;
      super()
    end
    
    @Operation setClean()
      super();
      self.lastModified := self.getFileModifiedDate()
    end
    
    @Operation setSignature(sig:[[Element]])
      self.commandInterpreter().setSignature(self,sig)
    end

    @Operation textChanged(text:String)
      try
        let unit = OCL::OCL.grammar.parseString(text,"CompilationUnit",[]);
            walker = EditorWalker(self)
        in self.commandInterpreter().clearErrors(self);
           self.commandInterpreter().rendering(self,false);
           walker.walk(unit,[]);
           walker.reset();
           self.commandInterpreter().rendering(self,true)
        end
      catch(exception)
        @TypeCase(exception)
           Parser::ParseError do
             self.commandInterpreter().syntaxError(self,exception.errorPos,exception.message);
           self.commandInterpreter().rendering(self,true)
           end
        else 
          xmf.message(exception.toString());
          Root::editorException := exception;
          self.commandInterpreter().rendering(self,true)
        end
      end
    end 
    
    @Operation typeCheckMode(mode:String)
      self.typeCheckMode := mode
    end
    
    @Operation typeError(charStart:Integer,charEnd:Integer,expected:Classifier,found:Classifier)
      self.commandInterpreter().typeError(self,charStart,charEnd,expected.name.toString(),found.name.toString())
    end

    @Operation unboundVar(name:String,charStart:Integer,charEnd:Integer)
      self.commandInterpreter().unboundVar(self,name,charStart,charEnd)   
    end  
    
    @Operation updateFileQuestion()
      xmf.question("The file " + file.name() + " has been changed outside of the system,"
        + " do you want to update the editor?")
    end

    @Operation varType(type:Classifier,charStart:Integer,charEnd:Integer)
       self.commandInterpreter().varType(self,type,charStart,charEnd)
    end

    @Operation varDeclared(charStart:Integer,charEnd:Integer,decStart:Integer,decEnd:Integer)
       self.commandInterpreter().varDeclared(self,charStart,charEnd,decStart,decEnd)
    end
  
  end