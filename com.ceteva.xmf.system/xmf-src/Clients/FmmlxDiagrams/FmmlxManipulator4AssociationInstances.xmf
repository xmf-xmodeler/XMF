parserImport XOCL;

import Clients;
import FmmlxDiagrams;

context FmmlxManipulator
  @Operation countOccurences(
    o : Object,
    p : FMMLxPackage,
    a : Association,
    countSourceOccurences : Boolean,
    countTargetOccurences : Boolean)
     
    let
      count = 0
    in
      if p.fmmlxAssociationInstances = null then 0 else
        @For link in p.fmmlxAssociationInstances do
          if countSourceOccurences andthen link.at(0) = o andthen link.at(2) = a then count := count + 1 end;
          if countTargetOccurences andthen link.at(1) = o andthen link.at(2) = a then count := count + 1 end
        end;
        count
      end
    end 
  end

context FmmlxManipulator
  @Operation countOccurencesForType(
    type        : Class,
    level       : int,
    package     : FmmlxPackage,
    association : Association,
    countSourceOccurences : Boolean,
    countTargetOccurences : Boolean)
   	  
    if not type.isKindOf(FMMLx::MetaClass) then null else
     
      let
        minCount = null;
        maxCount = null;
        count = null
      in
        @For instance in type.allMetaInstances() do
          if instance.level = level then
            count := self.countOccurences(instance, package, association, countSourceOccurences, countTargetOccurences);
            minCount := if minCount = null then count else if count < minCount then count else minCount end end;
            maxCount := if maxCount = null then count else if count > maxCount then count else maxCount end end
          end
        end;
      [minCount, maxCount]
      end
    end
  end
    
context FmmlxManipulator
  @Operation addAssociationInstance(
    p       : Package,
    objectS : Object,
    objectT : Object,
    a       : Association)
  
    let 
      typeS = a.end1.type;
      typeT = a.end2.type;
      instLevelS = a.end2.instLevel;
      instLevelT = a.end1.instLevel;
      typesOK = false;
      objTemp = null
    in 
     // First check if they aren't there already
      if not p.hasAssociationInstance(objectS, objectT, a)
      then
        if self.isInstanceOf(objectS, typeS, instLevelS) andthen self.isInstanceOf(objectT, typeT, instLevelT)
        then typesOK := true 
        else if self.isInstanceOf(objectT, typeS, instLevelS) andthen self.isInstanceOf(objectS, typeT, instLevelT)
        then typesOK := true; objTemp:=objectT; objectT:=objectS; objectS:=objTemp end end;
  	    
        // Now it is checked if the objects fit the type (typesOK). If that is the case, objectS and objectT may have swapped to fit the type.

        if typesOK then 
          let 
            sCount = self.countOccurences(objectS, p, a, true, false); // how many links to t go out of objectS
            tCount = self.countOccurences(objectT, p, a, false, true); // how many links to s go out of objectT
            sMult = a.end2.mult;  // how many links to t are allowed for objectS
            tMult = a.end1.mult // how many links to s are allowed for objectT
          in
            if ((not sMult.hasUpperBound) orelse (sMult.upperBound > sCount)) andthen 
               ((not tMult.hasUpperBound) orelse (tMult.upperBound > tCount))  
            then
              p.addAssociationInstance(objectS, objectT, a);
              []
            else // multiplicity does not allow new link
              [" The multiplicity does not allow a new link."]
            end // if multiplicity ok
          end
        else // types not OK
          ["The objects do not fit the type."]
        end // if typesOK
      else // p already has
        ["The link already exists."]
      end // if not already there
    end
  end
    
  context FmmlxManipulator
    @Operation removeAllAssociationInstances(a)
      let
        p = a.owner();
        toBeRemoved = {}
      in
        @For link in p.fmmlxAssociationInstances do
          if link.at(2) = a then
            toBeRemoved := toBeRemoved + {link}
          end
        end;
        @For link in toBeRemoved do
          p.removeAssociationInstance(link.at(0), link.at(1), link.at(2)) 
        end
      end
    end
    
  context FmmlxManipulator
    @Operation removeAssociationInstance(a, o1, o2)
      let
        p = a.owner()
      in
        p.removeAssociationInstance(o1, o2, a) 
      end;
      []
    end 
    