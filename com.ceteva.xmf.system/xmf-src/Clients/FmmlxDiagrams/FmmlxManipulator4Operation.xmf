parserImport XOCL;

import Clients;
import FmmlxDiagrams;

/*  context FmmlxManipulator 
    @Operation addOperation(class, opName, level, returnType, opString)
      let
        problems = [];
        opAS = null;
        opASfun = null;
        operation = null
      in 
        // first parse
        opAS := try [OCL::OCL.grammar.parseString(opString,"Exp1",Seq{XOCL}),null] catch(exception) [null,[exception.message]] end;

        // then compile
        if 
          opAS.at(0) <> null 
        then 
          opASfun := try [Compiler::compileToFun("",opAS.at(0),Seq{},Seq{Seq{2|Root.contents},Seq{2|XCore.contents}},true),null] catch(exception) [null,[exception.message]] end
        else
          opASfun := opAS
        end;

        // create an instance of the operation
        if 
          opASfun.at(0) <> null
        then 
          operation := try [(opASfun.at(0))(),null] catch(exception) [null,[exception.message]] end
        else
          operation := opASfun
        end;
        
        // check if the operation is allowed to be added
        if
          operation.at(0) <> null
        then 
          operation.at(0).isIntrinsic := true;
          operation.at(0).instLevel := level;
          problems := self.checkOperationAllowed(
                           class, 
                           operation.at(0).name.toString(), 
                           operation.at(0).arity, 
                           operation.at(0).isIntrinsic, 
                           level, 
                           FmmlxDiagramClient::isOperationMonitored(operation.at(0)), 
                           [])
        else
          problems := operation.at(1) 
        end;

        // if no problem, then add now
        if 
          problems.isEmpty() andthen operation.at(0) <> null
        then 
          class.operations := class.operations + {operation.at(0)};
          operation.at(0).owner := class;
          resetOperatorTable()
        end;
        
        // return any problem that occurred
        problems
      end 
    end
  */  
    
  context FmmlxManipulator 
    @Operation addOperation2(class, level, opString)
      let
        problems = [];
        opAS = null;
        opASfun = null;
        operation = null
      in 
        // first parse
        opAS := try [OCL::OCL.grammar.parseString(opString,"Exp1",Seq{XOCL}),null] catch(exception) [null,[exception.message]] end;

        // then compile
        if 
          opAS.at(0) <> null 
        then 
          opASfun := try [Compiler::compileToFun("",opAS.at(0),Seq{},Seq{Seq{2|Root.contents},Seq{2|XCore.contents}},true),null] catch(exception) [null,[exception.message]] end
        else
          opASfun := opAS
        end;

        // create an instance of the operation
        if 
          opASfun.at(0) <> null
        then 
          operation := try [(opASfun.at(0))(),null] catch(exception) [null,[exception.message]] end
        else
          operation := opASfun
        end;
        
        // check if the operation is allowed to be added
        if
          operation.at(0) <> null
        then 
          operation.at(0).isIntrinsic := true;
          operation.at(0).instLevel := level;
          problems := self.checkOperationAllowed(
                           class, 
                           operation.at(0).name.toString(), 
                           operation.at(0).arity, 
                           operation.at(0).isIntrinsic, 
                           level, 
                           FmmlxDiagramClient::isOperationMonitored(operation.at(0)), 
                           [])
        else
          problems := operation.at(1) 
        end;

        // if no problem, then add now
        if 
          problems.isEmpty() andthen operation.at(0) <> null
        then 
          class.operations := class.operations + {operation.at(0)};
          operation.at(0).owner := class;
          resetOperatorTable()
        end;
        
        // return any problem that occurred
        problems
      end 
    end
    
  context FmmlxManipulator
    @Operation removeOperation(class, name)
      let 
        o = self.findOperation(class, name) 
      in
        if o <> null then
          class.operations :=  class.operations - {o};
          o.owner := null;
          resetOperatorTable();
          []
        else
          ["Operation not found"]
        end
      end
    end
    
  context FmmlxManipulator        
    @Operation changeOperationName(class, oldName, newName)
      // for now assume that changeOperationName did not return any trouble
      let
        operation = self.findOperation(class, oldName)
      in        
        operation.name := newName.asSymbol();
        resetOperatorTable();
        []
      end
    end
    
  context FmmlxManipulator
    @Operation changeOperationLevel(class, operation, newLevel, isMonitored)
      let 
        problems = self.checkOperationAllowed(class, operation.name.toString(), operation.arity, operation.isIntrinsic, newLevel, isMonitored, [operation])
      in 
        if
          problems.isEmpty() and operation.isIntrinsic 
        then 
          operation.instLevel := newLevel; []
        else
          problems
        end
      end
    end

  context FmmlxManipulator 
    @Operation changeOperationBody(class, oldOp, opName, body)
      let
        problems = [];
        level = oldOp.instLevel;
        returnType = oldOp.type;
        problems = []
      then
        tempName = self.getFreeOpName(class, level)
      in
        //self.changeOperationName(class, opName, tempName); // temporarily rename the current operation
        class.remove(oldOp);
        resetOperatorTable();
        problems := try
          self.addOperation2(class, level, body)
        catch(e)
          ["Something unforeseen went wrong while updating the operation: " + e.message]
        end;
        
        if 
          problems.isEmpty()
        then // remove old op
          //problems := ["Compiled successfully!"]
          problems := []
          // already done: self.removeOperation(class, tempName)
        else // restore old op
          class.add(oldOp); 
          resetOperatorTable()
          //self.changeOperationName(class, tempName, opName)
        end;
        problems
      end
    end
    
  context FmmlxManipulator 
    @Operation findOperation(class, name) 
      let
        operation = null
      in
        @For o in class.operations do
          if o.name.toString() = name then
            operation := o
          end
        end;
        operation
      end
    end
       
  context FmmlxManipulator
    @Operation checkOperationAllowed(class, name, arity, isIntrinsic, instLevel, monitor, ignoreList)
       
      let
        problems = [];
        operations = class.allOperations().asSet() + class.allOperations2().asSet()
      in
        if not isIntrinsic 
          then problems := problems + ["Operation must be intrinsic to change the level."] end;
        if arity <> 0 and monitor = true 
          then problems := problems + ["Monitored Operation must have an arity of zero."] end;
        // First: Check whether the new operation would interfere with an existing one.
        @For operation in class.operations do // for now only check those in the same class
          if operation.name.toString() = name.toString() and not ignoreList.contains(operation) and arity = operation.arity then
            // and arity equal and level equal...
            // But for now no duplicate names at all (... unless arity)
            problems := problems + ["Operation " + name + " already exists in " + class.name + "."]
          end
        end; // done with conflicts from classes from above.
        /* @For instance in class.allMetaInstances() do  // check all instances which could be affected [on second thought, don't. they may overwite if they wish]
          let theirOperations = instance.allOperations().asSet() + instance.allOperations2().asSet()
          in
            @For operation in theirOperations do
              if operation.name.toString() = name.toString() and not ignoreList.contains(operation) and arity = operation.arity then
                // and arity equal and level equal...
                // But for now no duplicate names at all (... unless arity)
                problems := problems + ["Operation " + name + " already exists in " + class.name + "."]
              end // if
            end // for
          end // let
        end; // for */
        problems
      end // let
    end
    
  context FmmlxManipulator
    @Operation checkAddOperation(class, opName, level, body)
      []
    end
    
  context FmmlxManipulator        
    @Operation checkChangeOperationName(class, oldName, newName)
      let
        operation = null;
        problems = []
      in
		@For o in class.operations do
		  if o.name.toString() = oldName then
		    operation := o
		  end;
		  if o.name.toString() = newName then
		    problems := problems + ["Operation " + newName + " already exists in " + class.name + "."]
		  end
		end;
		if operation = null then problems := problems + ["Operation " + oldName + " not found in " + class.name + "."] 
		end
		// add further tests here...
		// todo: check parent and of classes...
      ;problems
      end
    end
    
  context FmmlxManipulator 
    @Operation isOpNameFree(class, testName, newLevel)
      let
        ok = true
      in
        @For o in class.allOperations() do
          ok := ok andthen o.name.toString() <> testName.toString()
        end;
        @For o in class.allOperations2() do
          ok := ok andthen (o.name.toString() <> testName.toString() or o.instLevel <> newLevel)
        end;    
        ok
      end
    end
      
  context FmmlxManipulator 
    @Operation getFreeOpName(class, newLevel)
      let name = "tempOp"; counter = 0; result = null
      in
        @While result = null do
          let testName = name + counter in
            if self.isOpNameFree(class, testName, newLevel) then// i.e. no problem
              result := testName
            end               
          end
        end;
        result
      end
    end
    
  context FmmlxManipulator 
    @Operation changeOperationOwner(oldOwner, operation, newOwner)
      let 
        level = operation.instLevel
      in
        if level >= newOwner.level then ["Level too high."]
        else 
          if self.isOpNameFree(newOwner, operation.name, level) then 
            oldOwner.operations := oldOwner.operations - {operation};
            operation.owner := newOwner;
            newOwner.operations := newOwner.operations + {operation};
            resetOperatorTable();
            []
          else ["Name " + operation.name + " already in use in " + newOwner.name + "."]
          end
        end
      end
    end  
