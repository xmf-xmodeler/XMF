parserImport XOCL;

import Clients;
import FmmlxDiagrams;

context FmmlxDiagrams

@Class FmmlxDiagramMapping

    @Attribute mapping : Set = {} end
    @Attribute labelMapping : Set = {} end
    @Attribute nextID : Integer = 0 end
    
    @Operation addOrGetObjectMapping(o : Object)
      let 
        foundMapping = null 
      in 
        @For mappingInfo in mapping do
          if mappingInfo.object = o
          then foundMapping := mappingInfo
          end // if
        end; // for
        if foundMapping <> null
        then 
          foundMapping
        else
          let 
            newMappingInfo = MappingInfo()
          in
            newMappingInfo.object := o;
            newMappingInfo.id := if o.isKindOf(Symbol) then o.toString() else o.path() end;
            newMappingInfo.lastKnownDiagramX := 0;
            newMappingInfo.lastKnownDiagramY := 0;
            self.mapping := self.mapping + {newMappingInfo};
            newMappingInfo
          end // let
        end // if 
      end // let 
    end
    
    @Operation getMappingId(o : Object)
      let 
        foundMapping = null 
      in 
        @For mappingInfo in mapping do
          if mappingInfo.object = o
          then foundMapping := mappingInfo
          end // if
        end; // for
        if foundMapping <> null
        then 
          foundMapping.id
        else
          null
        end // if 
      end // let 
    end
    
    @Operation setNewPosition(objectID, x, y)
      @For mappingInfo in mapping do
        if mappingInfo.id = objectID
        then
          mappingInfo.lastKnownDiagramX := x;
          mappingInfo.lastKnownDiagramY := y
        end // if
      end // for
    end
    
    @Operation setNewPositions(objectID, listOfPoints)
      @For mappingInfo in mapping do
        if mappingInfo.id = objectID
        then
          mappingInfo.points := listOfPoints.asSeq();
          @For i in 0.to(mappingInfo.points.size()-1) do mappingInfo.points := mappingInfo.points.replaceAt(i, mappingInfo.points.at(i).asSeq()) end          
        end // if
      end // for
    end
    
    @Operation getMapping(objectID) 
      let result = null in 
        @For mappingInfo in mapping do
          if mappingInfo.id = objectID.toString()
          then 
            result := mappingInfo
          end // if
        end; // for
        result
      end //let
    end
    
    //self.getMapping(requestID).updateKey(oldPath, class.path());
    @Operation updateKey(oldKey, newKey)
      let 
        item = self.getMapping(oldKey.toString());
        testForNewKey = self.getMapping(newKey.toString())
      in
        if 
          item <> null andthen testForNewKey = null
        then 
          item.id := newKey//if o.isKindOf(Symbol) then o.toString() else o.path() end
        else
          throw(Exception("Cannot change key. Either oldKey does not exist or newKey already exists."))
        end
      end
          
    end
    
    @Operation cleanUpMapping() null end
    
    @Operation storeLabelInfo(edgeID, localID, x, y)
      let 
        foundMapping = null 
      in 
        @For mappingInfo in labelMapping do
          if mappingInfo.at(0) = edgeID andthen mappingInfo.at(1) = localID
          then foundMapping := mappingInfo
          end // if
        end; // for
        
        if foundMapping = null orelse foundMapping.at(2) <> x orelse foundMapping.at(3) <> y then // new or changed 
          if foundMapping <> null then // if changed, remove old
            self.labelMapping := self.labelMapping.excluding(foundMapping)
          end;
          
          // create a new mapping
          foundMapping := [edgeID, localID, x, y];
          self.labelMapping := self.labelMapping.including(foundMapping)
        end // done updating
      end // let 
    end
    
    @Operation getAllLabels(edgeID)
      let 
        result = []
      in
        @For mappingInfo in labelMapping do
          if mappingInfo.at(0) = edgeID
          then result := result + [mappingInfo]
          end // if
        end; // for
        result
      end 
    end
    
    @Operation createDelegationKey(delegatesFrom, delegatesTo) ("DelegationMapping: "+delegatesFrom+"/"+delegatesTo).asSymbol() end
    @Operation createInheritanceKey(child, parent)             ("InheritanceMapping: "+child+"/"+parent).asSymbol() end
    @Operation createAssociationLinkKey(end1, end2, assoc)     ("AssociationLinkMapping: "+end1+"/"+end2+"/"+assoc).asSymbol() end
    @Operation createRoleKey(role, roleFiller)                 ("RoleFillerMapping: "+role+"/"+roleFiller).asSymbol() end
    
end // Class
