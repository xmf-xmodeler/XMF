parserImport XOCL;

import Clients;
import FmmlxDiagrams;

  context FmmlxManipulator 
    @Operation addConstraint(
      class      : FMML::MetaClass, 
      name       : Symbol, 
      bodyCode   : String, 
      reasonCode : String, 
      instLevel  : Integer)

      if
        class = null
      then
        ["Class not found. (Should have been detected earlier.)"]
      elseif
        class.hasElement(name)
      then
        ["Name " + name + " already exists."]
      elseif
        not name.isValidName()
      then
        ["Name " + name + " is not a valid name."]
      elseif
        not instLevel.isKindOf(Integer)
      then
        ["Instantiation level " + instLevel + " is not valid."]
      elseif
        instLevel >= class.level
      then
        ["Instantiation level " + instLevel + " not legal for a class on level " + class.level + "."]
      else
        let            
          bodyO = null;
          reasonO = null;
          problems = []
        in           
         
          bodyO   := self.createOperationForConstraint(bodyCode, "body");
          reasonO := self.createOperationForConstraint(reasonCode, "reason");
          
          if bodyO.at(0) <> null then
            bodyO.at(0).isIntrinsic := true;
            bodyO.at(0).instLevel := instLevel
          else
            problems := problems + bodyO.at(1) 
          end;
          
          if reasonO.at(0) <> null then
            reasonO.at(0).isIntrinsic := true;
            reasonO.at(0).instLevel := instLevel
          else
            problems := problems + reasonO.at(1) 
          end;
          
          if problems.isEmpty() then
            if bodyO.at(0) <> null and reasonO.at(0) <> null
            then
              try
                let 
                  con = Constraint(name, bodyO.at(0), reasonO.at(0))
                in
                  con.body.setProperty("raw", bodyCode);
                  con.reason.setProperty("raw", reasonCode);
                  class.add(con)
                end; []
              catch(e4)
                [e4.message]
              end
            else
              ["operation addConstraint mysteriously failed"]
            end
          else
            problems
          end
        end
      end      
    end
    
  context FmmlxManipulator
    @Operation createOperationForConstraint(code:String, requiredName:String)
      let code1 = null; code2 = null; code3 = null in
      
      /*if 
        addPrefix
      then
        if type = "body" then code := "@Operation body(classifier : Class, level : Integer) : Boolean " + code + " end"
        elseif type = "reason" then code:= "@Operation reason(classifier : Class, level : Integer) : String " + code + " end"
        else throw Exception("Illegal Type")
        end
      end;*/
      
      code1 := try [OCL::OCL.grammar.parseString(code,  "Exp1",Seq{XOCL}),null] catch(exception) [null,["Parse Error ("+requiredName+"): " + exception.message]] end;

      code2 := if code1.at(0) <> null  
      then try [Compiler::compileToFun("",code1.at(0),Seq{},Seq{Seq{2|Root.contents},Seq{2|XCore.contents}},true),null] catch(exception) [null,["Compile Error ("+requiredName+"): " + exception.message]] end
      else code1 
      end;
             
      code3 := if code2.at(0) <> null
      then try [(code2.at(0))(),null] catch(exception) [null,["Instantiation Error ("+requiredName+"): " + exception.message]] end
      else code2
      end;
      
      if 
        code3.at(0) <> null 
      then
        if 
          requiredName <> code3.at(0).name.toString() 
        then 
          [null,["operation ("+code3.at(0).name.toString()+" must be named \"" + requiredName+"\"."]]
        elseif 
          code3.at(0).arity <> 2
        then
          [null,["operation ("+code3.at(0).name.toString()+" must have arity 2."]]
        else
          code3
        end
      else
        code3
      end
      
            
    end end
    
  context FmmlxManipulator
    @Operation changeConstraintName(
      class         : FMML::MetaClass, 
      oldName       : String, 
      newNameSymbol : Symbol)
      
      let
        con = if class = null then null else class.getConstraint(name) end
      in
        if class = null then ["Class not found. (Should have been detected earlier.)"]
        elseif con = null then ["Constraint not found"]
        elseif class.hasElement(newNameSymbol) then ["Name " + newNameSymbol + " already exists."] 
        elseif not newNameSymbol.isValidName() then ["Name " + newNameSymbol + " is not a valid name."]
        else
          con.setName(newNameSymbol); []
        end
      end
    end

  context FmmlxManipulator
    @Operation changeConstraintLevel(
      class     : FMML::MetaClass, 
      name      : String, 
      instLevel : Integer)
      
      let
        con = if class = null then null else class.getConstraint(name) end
      in
        if class = null then ["Class not found. (Should have been detected earlier.)"]
        elseif con = null then ["Constraint not found"]
        elseif not instLevel.isKindOf(Integer) then ["Instantiation level " + instLevel + " is not valid."]
        elseif instLevel >= class.level then ["Instantiation level " + instLevel + " not legal for a class on level " + class.level + "."]
        else
          con.body.instLevel   := instLevel;
          con.reason.instLevel := instLevel
        end
      end
    end
    
  context FmmlxManipulator
    @Operation changeConstraintBodyAndReason(
      class      : FMML::MetaClass, 
      name       : String, 
      bodyCode   : String, 
      reasonCode : String)
      
      let
        con = if class = null then null else class.getConstraint(name) end;
        body = self.createOperationForConstraint(bodyCode, "body");
        reason = self.createOperationForConstraint(reasonCode, "reason")
      in
        if class = null then ["Class not found. (Should have been detected earlier.)"]
        elseif con = null then ["Constraint not found"]
        elseif body.at(0) = null or reason.at(0) = null then body.at(1) + reason.at(1)
        else
          body.at(0).isIntrinsic := true;
          body.at(0).instLevel := con.body.instLevel;
          con.body.owner := null;
          con.body := body.at(0);
          con.body.setProperty("raw", bodyCode);
          con.body.owner := con;

          reason.at(0).isIntrinsic := true;
          reason.at(0).instLevel := con.reason.instLevel;
          con.reason.owner := null;
          con.reason := reason.at(0);
          con.reason.setProperty("raw", reasonCode);
          con.reason.owner := con; []
        end
      end
    end
    
  context FmmlxManipulator
    @Operation changeConstraintOwner(
      oldClass : FMML::MetaClass, 
      newClass : FMML::MetaClass, 
      name     : String)
      
      let
        con = if oldClass = null then null else oldClass.getConstraint(name) end
      then
        instLevel = if con = null then null else con.body.instLevel end
      in
        if     oldClass = null then ["Old Class not found. (Should have been detected earlier.)"]
        elseif newClass = null then ["New Class not found. (Should have been detected earlier.)"]
        elseif con = null then ["Constraint not found"]
        elseif newClass.hasElement(name) then ["Name " + name + " already exists."] 
        elseif not newNameSymbol.isValidName() then ["Name " + name + " is not a valid name."]
        elseif not instLevel.isKindOf(Integer) then ["Instantiation level " + instLevel + " is not valid."]
        elseif instLevel >= newClass.level then ["Instantiation level " + instLevel + " not legal for a class on level " + newClass.level + "."]
        else
          oldClass.remove(con);
          newClass.add(con); []
        end
      end
    end
    
  context FmmlxManipulator
    @Operation removeConstraint(
      class : FMML::MetaClass, 
      name  : String)
      
      let
        con = if class = null then null else class.getConstraint(name) end
      in
        if class = null then ["Class not found. (Should have been detected earlier.)"]
        elseif con = null then ["Constraint not found"]
        else
          class.remove(con); []
        end
      end
    end