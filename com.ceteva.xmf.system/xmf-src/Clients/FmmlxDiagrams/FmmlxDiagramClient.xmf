parserImport XOCL;

import Clients;
import FmmlxDiagrams;

context FmmlxDiagrams

@Class FmmlxDiagramClient extends Client//, DiagramListener

	@Attribute package : Package end
	@Attribute communicator : Element end

    @Constructor(name)
//      self.setCommandInterpreter(DiagramCommandInterpreter());
//      self.setEventHandler(DiagramEventHandler())
        null
    end
    
    @Operation createDiagram(package,name)
        self.package := package;
        let 
          FmmlxDiagramCommunicator = xmf.javaClass("tool.clients.fmmlxdiagrams.FmmlxDiagramCommunicator");
          handle = xmf.getHandle(self)
        in
          self.communicator := FmmlxDiagramCommunicator();
          self.communicator.setHandle(handle);
          self.communicator.newDiagram()
        end;
//        let x = FmmlxDiagram()
//        in 
//          ("x: "+x).println();
//          x.newDiagram();
//          ("name: "+name).println();
//          ("self.newDiagram("+self.name+")").println();
//          x
//        end
        FmmlxDiagram() // vestigial return value for diagram manager
    end
    
    @Operation fibo_i(n) 
       if n <= 2
          then 1
          else self.fibo_i(n-1) + self.fibo_i(n-2)
      end
    end
    
    @Operation fibo(idRequest, n) 
       self.communicator.sendMessageToJava([idRequest, self.fibo_i(n)])
    end
    
    @Operation getAllObjects(idRequest)
        let 
          result = [] 
        in 
    	  @For c in package.getChildren() do
    	    if c.isKindOf(FMML::MetaClass) 
    	    then
    	      result := result.append([c.name.toString()])
    	    end
    	  end;
    	  self.communicator.sendMessageToJava([idRequest, result])
        end
    end
    
    @Operation getOwnAttributes(idRequest, className) 
        "getOwnAttributes".println();
        let 
          result = [] 
        in 
          @For c in package.getChildren() do 
            if c.isKindOf(FMML::MetaClass) and c.name.toString()  = className
            then 
              @For a in c.attributes do 
                result := result.append([[a.name.toString(), a.type.name.toString(), a.instLevel]])
              end
            end
          end;
    	  self.communicator.sendMessageToJava([idRequest, result])
        end
    end
    
    @Operation getSlots(idRequest, objectName) 
        "getSlots".println();
        let 
          result = [] 
        in 
          @For o in package.getChildren() do 
            if o.isKindOf(FMML::MetaClass) and o.name.toString() = objectName
            then 
              @For s in o.slots() do 
                result := result.append([[s.name.toString(), s.value.toString()]])
              end
            end
          end;
    	  self.communicator.sendMessageToJava([idRequest, result])
        end
    end
      
    @Operation getOwnOperations(idRequest, className) 
        "getOwnOperations".println();
        let 
          result = [] 
        in 
          @For c in package.getChildren() do 
            if c.isKindOf(FMML::MetaClass) and c.name.toString()  = className
            then 
              @For o in c.operations do 
                result := result.append([[o.name.toString(), o.type.name.toString(), o.instLevel]])
              end
            end
          end;
    	  self.communicator.sendMessageToJava([idRequest, result])
        end
    end  
end