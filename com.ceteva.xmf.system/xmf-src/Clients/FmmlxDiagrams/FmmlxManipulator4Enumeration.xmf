parserImport XOCL;

import Clients;
import FmmlxDiagrams;

  context FmmlxManipulator
    @Operation addEnumeration(package:Package, newEnumName:String)
      if 
        newEnumName.isValidName()
      then
        if 
          package.hasElement(newEnumName)
        then
          ["Name already in use"]
        else
          let
            e = Enum(newEnumName,[])
          in
            package.add(e)
            //;e.owner := package
          end;
          []
        end
      else
        ["Name not valid"]
      end
    end

  context FmmlxManipulator
    @Operation changeEnumerationName(package:Package, oldEnumName:String, newEnumName:String)
      if
        package.hasElement(oldEnumName) 
      then
        let 
          e = package.getElement(oldEnumName);
          oldNameSymbol = e.name
        in
          if 
            newEnumName.isValidName()
          then
            if 
              package.hasElement(newEnumName)
            then
              ["Name already in use"]
            else
              e.name := newEnumName.asSymbol();
              package.nameChanged(e,e.name,oldEnumName);
              []
            end
          else
            ["Name not valid"]
          end
        end
      else ["Enum does not exist"] end
    end

  context FmmlxManipulator
    @Operation removeEnumeration(p:Package, enumName:String) 
      ["Not yet implemented"]
    end

  context FmmlxManipulator
    @Operation addEnumerationValue(p:Package, enumName:String, newEnumValueName:String) 
      ["Not yet implemented"]
    end

  context FmmlxManipulator
    @Operation changeEnumerationValueName(p:Package, enumName:String, oldEnumValueName:String, newEnumValueName:String) 
      ["Not yet implemented"]
    end

  context FmmlxManipulator
    @Operation removeEnumerationValue(p:Package, enumName:String, enumValueName:String) 
      ["Not yet implemented"]
    end