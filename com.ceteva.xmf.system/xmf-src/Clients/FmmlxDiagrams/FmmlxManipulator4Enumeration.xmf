parserImport XOCL;

import Clients;
import FmmlxDiagrams;

  context FmmlxManipulator
    @Operation addEnumeration(package:Package, newEnumName:String)
      if 
        newEnumName.isValidName()
      then
        if 
          package.hasElement(newEnumName)
        then
          ["Name " + newEnumName + " already in use"]
        else
          let
            e = Enum(newEnumName,[])
          in
            package.add(e)
            //;e.owner := package
          end;
          []
        end
      else
        ["Name not valid"]
      end
    end

  context FmmlxManipulator
    @Operation changeEnumerationName(package:Package, oldEnumPath:String, newEnumName:String)
      let 
        e = self.evalString(oldEnumPath, package).at(0)
      then
        oldEnumName = if e <> null then e.name else null end
      in
        if // 1
          e = null
        then
          [oldEnumPath + " does not exist"]
        else
          if // 2
            not e.isKindOf(Enum)
          then
            [oldEnumPath + " is not an Enum"]
          else
            if // 3
              not package.getChildren().contains(e)
            then
              [oldEnumPath + " is not in this package"]
            else
              if // 4
                not newEnumName.isValidName()
              then
                [newEnumName + " is not a legal identifier"]
              else
                if // 5
                  package.hasElement(newEnumName)
                then
                  ["Name " + newEnumName + " already in use"]
                else
                  e.name := newEnumName.asSymbol();
                  package.nameChanged(e,e.name,oldEnumName);
                  []
                end // if 5                
              end // if 4
            end // if 3
          end // if 2
        end // if 1
      end // let
    end

  context FmmlxManipulator
    @Operation removeEnumeration(package:Package, enumPath:String)
      let 
        enumEval = self.evalString(enumPath, package)
      then
        e = enumEval.at(0)
      in
        if 
          e = null
        then
          [enumEval.at(1)]
        else
          if // 2
            not e.isKindOf(Enum)
          then
            [enumPath + " is not an Enum"]
          else
            if // 3
              not package.getChildren().contains(e)
            then
              [enumPath + " is not part of " + package.getName()]
            else
              let // 4
                usingAtts = package.getChildren()->iterate(c a = {} | a + c.attributes.asSet()) -> select(a | a.type = e).asSeq()
              in
                if // 5 
                  not usingAtts.isEmpty()
                then
                  [enumPath 
                  + " in use in " 
                  + usingAtts.at(0).owner.name 
                  + "::"
                  + usingAtts.at(0).name 
                  + if usingAtts.size()>1 then (" and " + (usingAtts.size()-1) + " others.") else "." end]
                else
                  package.remove(e); []
                end // if 5
              end // let 4
            end // if 3
          end // if 2
        end // if 1
      end // let
    end

  context FmmlxManipulator
    @Operation addEnumerationValue(package:Package, enumPath:String, newEnumValueName:String) 
      let 
        e = self.evalString(enumPath, package).at(0)
      in
        if // 1
          e = null
        then
          [enumPath + " does not exist"]
        else
          if // 2
            not e.isKindOf(Enum)
          then
            [enumPath + " is not an Enum"]
          else
            if // 3
              e.hasElement(newEnumValueName)
            then
              [newEnumValueName + " is already an element of " + enumPath]
            else
              if // 4
                newEnumValueName.isValidName()
              then
                if // 5
                  package.getChildren().contains(e)
                then
                  e.addEnumElement(newEnumValueName);[]
                else
                  [enumPath + " is not part of " + package.getName()]
                end // if 5
              else
                [newEnumValueName + " is not a legal identifier"]
              end // if 4
            end // if 3
          end // if 2
        end // if 1
      end // let
    end

  context FmmlxManipulator
    @Operation changeEnumerationValueName(package:Package, enumPath:String, oldEnumValueName:String, newEnumValueName:String) 
      let 
        e = self.evalString(enumPath, package).at(0)
      in
        if // 1
          e = null
        then
          [enumPath + " does not exist"]
        else
          if // 2
            not e.isKindOf(Enum)
          then
            [enumPath + " is not an Enum"]
          else
            if // 3
              not package.getChildren().contains(e)
            then
              [enumPath + " is not part of " + package.getName()]
            else
              if // 4
                e.hasElement(newEnumValueName)
              then
                [newEnumValueName + " is already an element of " + enumPath]
              else
                if // 5
                  not newEnumValueName.isValidName()
                then
                  [newEnumValueName + " is not a legal identifier"]
                else
                  if // 6
                    not e.hasElement(oldEnumValueName)
                  then
                    [oldEnumValueName + " is not an element of " + enumPath]
                  else
                    e.getElement(oldEnumValueName).name := newEnumValueName;[]
                  end // if 6
                end // if 5
              end // if 4
            end // if 3
          end // if 2
        end // if 1
      end // let
    end

  context FmmlxManipulator
    @Operation removeEnumerationValue(package:Package, enumPath:String, enumValueName:String) 
      let 
        e = self.evalString(enumPath, package).at(0)
      in
        if // 1
          e = null
        then
          [enumPath + " does not exist"]
        else
          if // 2
            not e.isKindOf(Enum)
          then
            [enumPath + " is not an Enum"]
          else
            if // 3
              not package.getChildren().contains(e)
            then
              [enumPath + " is not part of " + package.getName()]
            else
              if // 4
                not e.hasElement(enumValueName)
              then
                [enumValueName + " is not an element of " + enumPath]
              else
                e.removeEnumElement(enumValueName);[]
              end // if 4
            end // if 3
          end // if 2
        end // if 1
      end // let
    end