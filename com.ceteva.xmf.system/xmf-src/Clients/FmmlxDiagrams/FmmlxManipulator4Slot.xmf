parserImport XOCL;

import Clients;
import FmmlxDiagrams;

  context FmmlxManipulator
    @Operation changeSlotValue(obj, slotName, valueToBeAdded, requiredType, env:Package)
      if valueToBeAdded.isKindOf(requiredType) 
        orelse valueToBeAdded.isKindOf(Seq(requiredType))
        orelse valueToBeAdded.isKindOf(Set(requiredType))
      then
        obj.set(slotName, valueToBeAdded); null
      else
        valueToBeAdded + " is not of " + requiredType.name
      end
    end
    
  context FmmlxManipulator
    @Operation findAttributeForSlot(instanceWhereTheSlotResides, nameOfTheSlot)
      // EVIL HACK
      if nameOfTheSlot.equals("lastUpdated") then FMMLx::MetaClass.getAttribute("lastUpdated") else
      let
        class = instanceWhereTheSlotResides.of()
      then
        atts = class.allAttributesForLevel(instanceWhereTheSlotResides.level);
        foundAtt = null
      in
        @For att in atts do
          if att.name.toString() = nameOfTheSlot.toString() then
            foundAtt := att
          end
        end;
        foundAtt
      end
      end // HACK
    end


  context FmmlxManipulator
    @Operation repairSlots(obj : FMMLx::FmmlxObject)
      let
        atts = obj.of()
               .allAttributes()
               ->select(a | (not a.isIntrinsic) orelse a.instLevel.minLevel = obj.level.minLevel)
               ->reject(e | e.isKindOf(Associations::End) andthen not e.visible)
      then
        attNames  = atts.name->collect(n | n.toString());
        slotNames = obj.getStructuralFeatureNames()->collect(n | n.toString())
      then
        additionalSlotNames = slotNames - attNames;
        lackingSlotNames    = attNames  - slotNames
      in
        //("atts.size = " + atts.size()).println();
        //("slots.size = " + slots.size()).println();
        //("additionalSlotNames = " + additionalSlotNames).println();
        //("lackingSlotNames = " + lackingSlotNames).println();
        @For attName in lackingSlotNames do
          //("Adding " + attName).println();
          let
            att = atts->select(a | a.name.toString() = attName).asSeq().at(0)
          in
            Kernel_addAtt(obj,att.name,att.type.default())
          end
        end;
        @For attName in additionalSlotNames do
          //("Removing " + attName).println();
          obj.removeStructuralFeature(attName)
        end;
        null
      end
    end
   