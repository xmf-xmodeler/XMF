parserImport XOCL;

import Clients;
import FmmlxDiagrams;

  context FmmlxManipulator
    @Operation checkAddAttribute(class, name, level, type) 
      let 
        problems = []
      in 
        if type = null then problems := problems + [("null is not a valid type")] end;
        if not name.isValidName() then problems := problems + [("Identifier " + name + " not valid.")] end;
        @For attribute in class.allAttributes() do 
          if attribute.name.toString() = name
            then problems := problems + [("Identifier " + name + " already in use (see " +attribute.owner.name.toString()+ ").")] 
          end
        end;
        @For child in class.allMetaInstances() do
          @For attribute in child.of().allAttributes() do 
            if attribute.name.toString() = name
              then problems := problems + [("Identifier " + name + " already in use in " + child.name.toString() + " (see " +attribute.owner.name.toString()+ ").")] 
            end
          end
        end;
        problems
      end
    end
    
  context FmmlxManipulator   
    @Operation checkChangeAttributeName(class, oldName, newName)
      let
        attribute = null;
        problems = []
      in
		@For att in class.attributes do
		  if att.name.toString() = oldName then
		    attribute := att
		  end
		end;
		if attribute = null then problems := ["Attribute " + oldName + " not found in " + class.name + "."] 
		else
		  problems := self.checkAddAttribute(class, newName, attribute.instLevel, attribute.type, attribute.mult())
		  // add further tests here...
		end
       ;problems
     end
    end
    
  context FmmlxManipulator   
    @Operation checkChangeAttributeLevel(class, attName, oldLevel, newLevel)
      let
        attribute = null;
        problems = []
      in
	@For att in class.attributes do
	  if att.name.toString() = attName then
	    attribute := att
	  end
	end;
	if attribute = null then problems := ["Attribute " + attName + " not found in " + class.name + "."] 
	else
	  problems
      // add further tests here...
	end
       ;problems
     end
    end
    
    
  context FmmlxManipulator   
    @Operation checkChangeAttributeType(class, attName, oldType, newType)
      let
        attribute = null;
        problems = []
      in
	@For att in class.attributes do
	  if att.name.toString() = attName then
	    attribute := att
	  end
	end;
	if attribute = null then problems := ["Attribute " + attName + " not found in " + class.name + "."] 
	else
	  problems := problems + try self.getTypeForName(newType); [] catch(e) [e.message] end
	  // add further tests here...
	end
       ;problems
     end
    end
    
    context FmmlxManipulator   
    @Operation addAttribute(class, name, instLevel, type) 
      // for now assume that checkAddAttribute did not return any trouble
      let 
        a = Attribute(name);
        allInst = class.allMetaInstances()
      in 
        a.isIntrinsic := true;
        a.type := type;
        a.instLevel := instLevel;
        
        class.addAttribute(a);
        
        @For instance in allInst do
          if instance.level = instLevel then 
            //if a.init <> null
            //then
            //  Kernel_addAtt(instance,a.name,a.init.invoke(obj,Seq{}))
            //else
              Kernel_addAtt(instance,a.name,a.type.default())
            //end;
          end
        end;
        
        a
      end
    end
    
  context FmmlxManipulator   
    @Operation removeAttribute(class, attName, strategy)
      let 
        oldAtt = null 
      in
        @For attribute in class.ownAttributes() do
          if attribute.name.toString() = attName.toString() then 
            oldAtt := attribute
          end
        end;
        if oldAtt <> null then
            // remove attribute
            class.remove(oldAtt);
            // remove slots
            @For instance in class.allMetaInstances() do
              // this instance may have a slot, check level first, otherwise ignore (no else)
              if oldAtt.instLevel = instance.level then 
                // now, the slot with the given name should be the one we are looking for
                // UNLESS: by an unknown coincidence, there is another attribute from double inheritance,
                // should not happen, but check anyway
                if self.instanceHasAttribute(instance, attName, oldAtt.instLevel) then
                  "Double Inheritance! Won't remove Slot".println()
                else // now remove
                  instance.removeStructuralFeature(attName)
                end // if something wrong, print msg, otherwise do
            end end // foor-loop+if, once for each instance, where the slot existed
        end // if oldAtt Found
      end // let
    end
    
  context FmmlxManipulator   
    @Operation changeAttributeName(class, oldName, newName)
      // for now assume that changeAttributeName did not return any trouble
      let
        attribute = null;
        allInst = class.allMetaInstances()
      in
        @For att in class.attributes do
          if att.name.toString() = oldName then
            attribute := att
          end
        end;
        
        attribute.name := newName.asSymbol();
                
        @For instance in allInst do
          if instance.level = attribute.instLevel then 
            Kernel_addAtt(instance,newName,instance.get(oldName));
            instance.removeStructuralFeature(oldName)
          end
        end;
        
        null
      end
    end

  context FmmlxManipulator
    @Operation checkAttributeLevel(class, attName, oldLevel, newLevel)
      let
        attribute = null;
        problems = []
      in
	@For att in class.attributes do
	  if att.name.toString() = attName then
	    attribute := att
	  end
	end;
	if 
	  attribute = null 
	then 
	  problems := ["Attribute " + attName + " not found in " + class.name + "."] 
	end
	// add further tests here...
       ;problems
     end
    end
    
  context FmmlxManipulator
    @Operation changeAttributeLevel(class, attName, oldLevel, newLevel)
      let 
        attribute = null 
      in 
        @For att in class.attributes do
          if att.name.toString() = attName then
	        attribute := att
	      end
	    end;
        if oldLevel > newLevel then // move slots to instances
          self.changeAttributeLevelDown(class, attribute, oldLevel, newLevel) end;
        if newLevel > oldLevel then // just remove and recreate Attribute as we can't use the slots anyway
		  if attribute <> null then 
		    let 		   
              type = attribute.type
            in 
              self.removeAttribute(class, attName, "strategy:delete");
              self.addAttribute(class, attName, newLevel, type) 
            end // inner let
          end // if attribute <> null
        end // if newLevel > oldLevel
      end // outer let
      ;
      null
    end
    
    context FmmlxManipulator
      @Operation changeAttributeLevelDown(class, attribute, oldLevel, newLevel)
        let 
          attName = attribute.name;
          tempAttName = self.getFreeAttName(class, newLevel)
        then 
          instLevel = attribute.instLevel; // = oldLevel
          type = attribute.type
        then  
          newAtt = self.addAttribute(class, tempAttName, newLevel, type) 
        in
          @For instance in class.allMetaInstances() do
            if instance.level = oldLevel then
              // we found an old instance which ought to have a slot with a value
              let 
                value = instance.get(attribute.name)
              in
                // now find its instances and set the stored value in the slot with the temp name
                @For object in instance.allMetaInstances() do
                  if object.level = newLevel then
                    object.set(tempAttName, value) 
                  end // object.level = newLevel
                end // for
              end
            end // instance.level = oldLevel
          end; // for
          self.removeAttribute(class, attName, "strategy:delete"); // remove the old one
          self.changeAttributeName(class, tempAttName, attName) // rename the new one to the original name
        end
      end
      
    context FmmlxManipulator
    @Operation changeAttributeType(class, attName, oldTypeName, newTypeName)
      let 
        attribute = null;
        problems = [];
        parseResult = null
      in 
        @For att in class.attributes do
          if att.name.toString() = attName then
	        attribute := att
	      end
	    end;
	    parseResult := try [self.getTypeForName(newTypeName),null] catch(e) [null,e] end;
	    if parseResult.at(0) <> null then 
	      attribute.type := parseResult.at(0) 
	    else throw parseResult.at(1)
	    end
	  end; null
    end
    
    context FmmlxManipulator 
       @Operation getFreeAttName(class, newLevel)
         let name = "tempAtt"; counter = 0; result = null
         in
           @While result = null do
             let testName = name + counter in
               if self.checkAddAttribute(class, testName, newLevel, Boolean).isEmpty() then// i.e. no problem
                 result := testName
               end               
             end
           end;
           result
         end
       end
       
    