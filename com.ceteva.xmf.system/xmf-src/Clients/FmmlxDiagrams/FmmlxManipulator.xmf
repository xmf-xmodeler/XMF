parserImport XOCL;

import Clients;
import FmmlxDiagrams;

context FmmlxDiagrams

@Class FmmlxManipulator

    /* this operation tries to find out which Class/Classifier Corresponds to the String supplied */
    @Operation getTypeForName(typeName)
      let
        parseResult = self.evalString(typeName)
      in
        if parseResult.at(1) = null then 
          if parseResult.at(0).isKindOf(Classifier) then
            parseResult.at(0)
          else
            self.error(typeName + " is not a Classifier")
          end
        else
          self.error("parse failed: " + parseResult.at(1))
        end
      end
    end
    
    @Operation instanceHasAttribute(instance, attName, instLevel)
      let found = false in
        @For attribute in instance.of().allAttributes() do 
          if attribute.name.toString() = attName 
            then found:=true
          end
        end;
      found   
      end
    end
    
    @Operation evalString(text)
      if text.indexOf("(") >= 0 or text.indexOf(")") >= 0 then
        [null, "This is dangerous. Don't use '(' or ')' here!"]
      else
        try
          let 
            exp = OCL::OCL.grammar.parseString(text,"Exp1",Seq{XOCL})
          then 
            value = exp.eval(self,Env::NullEnv(),Seq{XCore,Root})
          in
            [value, null]
          end
        catch(exception)
        //xmf.message(exception.toString()); null
          [null, exception.toString()]
        end
      end
    end
    
    @Operation isInstanceOf(objectS, typeS, instLevelS)
      objectS.isKindOf(typeS) andthen objectS.level = instLevelS
    end

end // Class