parserImport XOCL;

import Clients;
import FmmlxDiagrams;

context FmmlxDiagrams

@Class FmmlxManipulator

    /* this operation tries to find out which Class/Classifier Corresponds to the String supplied */
    @Operation getTypeForName(typeName, env:Package)
      let
        parseResult = self.evalString(typeName, env)
      in
        if parseResult.at(0) <> null andthen parseResult.at(1) = null then 
          if parseResult.at(0).isKindOf(Classifier) then
            parseResult.at(0)
          else
            self.error(typeName + " is not a Classifier")
          end
        else
          self.error("parse failed: " + parseResult.at(1))
        end
      end
    end
    
    @Operation instanceHasAttribute(instance, attName, instLevel)
      let found = false in
        @For attribute in instance.of().allAttributes() do 
          if attribute.name.toString() = attName 
            then found:=true
          end
        end;
      found   
      end
    end
    
    @Operation evalString(text, env:Package)
//      if text.indexOf("(") >= 0 or text.indexOf(")") >= 0 then
//        [null, "This is dangerous. Don't use '(' or ')' here!"] // TODO: Seq(, Set(: OK (: not OK
//      else
        try
          let 
            exp = OCL::OCL.grammar.parseString(text,"Exp1",Seq{XOCL})
          then 
            value = exp.eval(self,Env::NullEnv(),if env = null then Seq{XCore,Root,Auxiliary} else Seq{env,XCore,Root,Auxiliary} end)
          in
            [value, null]
          end
        catch(exception)
        //xmf.message(exception.toString()); null
          [null, exception.toString()]
        end
//      end
    end
    
    @Operation isInstanceOf(objectS, typeS, instLevelS)
      if 
        objectS.level = instLevelS // orelse instLevelS == null
      then // instLevel given and matching
        let
          ancestors = {objectS.of()};
          nextIterationAncestors = null;
          searchExhausted = false
        in
          @While (not searchExhausted) and (not ancestors.contains(typeS)) do
            nextIterationAncestors := {} + ancestors;
            @For a in ancestors do
              nextIterationAncestors := nextIterationAncestors + {a.of()};
              nextIterationAncestors := nextIterationAncestors + a.parents
            end; // for all ancestors
            searchExhausted := ancestors.size() = nextIterationAncestors.size();
            ancestors := nextIterationAncestors
          end; // while
          ancestors.contains(typeS)
        end
      else // wrong instLevel
        false
      end
      
      
//      objectS.isKindOf(typeS) andthen objectS.level = instLevelS
    end
    
    @Operation multiplicity2ValueList(multiplicity) 
      if multiplicity.isKindOf(Multiplicities::SingleMult)
        then [if multiplicity.isMandatory then 1 else 0 end, 1, true, true]
      else if multiplicity.isKindOf(Multiplicities::CollectionMult) 
        then [multiplicity.lowerBound, 
              if multiplicity.hasUpperBound then multiplicity.upperBound else -1 end, 
              multiplicity.hasUpperBound, 
              multiplicity.isOrdered]
      else xmf.error(multiplicity.of() + "not recognised")
      end end
    end
    
    @Operation valueList2Multiplicity(list)
      let
        min =           list.at(0);
        max =           list.at(1);
        hasUpperBound = list.at(2);
        isOrdered =     list.at(3)
      in
        Multiplicities::CollectionMult(isOrdered, hasUpperBound, min, max)
      end
    end

end // Class