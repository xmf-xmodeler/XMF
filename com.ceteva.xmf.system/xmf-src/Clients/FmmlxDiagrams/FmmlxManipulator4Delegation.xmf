parserImport XOCL;

import Clients;
import FmmlxDiagrams;

  context FmmlxManipulator
    @Operation setDelegation(delegateFrom, delegateTo, delegateToLevel)
      /*if // replacing delegation is ok
        delegateFrom.delegatesTo <> null 
      then 
        ["The class " + delegateFrom.name + " already delegates to " + delegateFrom.delegatesTo.name]
      else*/if
        delegateFrom.level.minLevel <> delegateTo.level.minLevel or delegateFrom.level.maxLevel <> delegateTo.level.maxLevel
      then 
        ["The class " + delegateFrom.name + " is not on the same level as " + delegateTo.name]
      elseif
        self.transitivelyDelegatesTo(delegateTo, delegateFrom)
      then
        ["The class " + delegateTo.name + " already delegates to " + delegateFrom.name]
      elseif
        delegateToLevel.minLevel < 0
      then
        ["Delegation level cannot be negative"]
      elseif
        delegateFrom.allParents().contains(delegateTo)
      then
        ["The class " + delegateTo.name + " is already superclass of " + delegateFrom.name]
      elseif
        delegateTo.allParents().contains(delegateFrom)
      then
        ["The class " + delegateFrom.name + " is already superclass of " + delegateTo.name]
      elseif
        delegateTo.isKindOf(delegateFrom)
      then
        ["The class " + delegateTo.name + " is already kind of " + delegateFrom.name]
      elseif
        delegateFrom.isKindOf(delegateTo)
      then
        ["The class " + delegateFrom.name + " is already kind of " + delegateTo.name]
      elseif
        delegateToLevel.minLevel >= delegateTo.level.minLevel
      then
        ["Delegation level must be lower then the level where it is defined"]
      else
        delegateFrom.delegatesTo := delegateTo;
        delegateFrom.delegatesToLevel := delegateToLevel;
        []
      end
    end
    
  context FmmlxManipulator
    @Operation removeDelegation(delegateFrom) 
      if 
        delegateFrom = null
      then 
        ["delegateFrom is null"]
      else
        @For i in delegateFrom.allMetaInstances()->select(j | j.level = delegateFrom.delegatesToLevel) do
		  self.removeRoleFiller(i) 
        end;
        delegateFrom.delegatesTo := null;
        delegateFrom.delegatesToLevel := null;
        []
      end
    end     
    
  context FmmlxManipulator
    @Operation removeRoleFiller(role) 
      if 
        role = null
      then 
        ["role is null"]
      else
        role.roleFiller := null;
        []
      end
    end      
    
  context FmmlxManipulator
    @Operation setRoleFiller(delegateFrom, delegateTo)
      let
        delegatorClass = delegateFrom.of()
      in
        @While delegatorClass <> delegatorClass.of() andthen (delegatorClass.delegatesTo = null orelse delegatorClass.delegatesToLevel.minLevel <> delegateFrom.level.minLevel) do
          delegatorClass := delegatorClass.of()
        end;
        if 
          delegatorClass = delegatorClass.of() 
        then 
          ["no delegator class found"]
        elseif
          self.isInstanceOf(delegateTo, delegatorClass.delegatesTo, delegatorClass.delegatesToLevel)
        then
          delegateFrom.roleFiller := delegateTo;[]
        else
          [delegateTo + " cannot be role filler for " + delegateFrom +"."]
        end
      end
    end
    
  context FmmlxManipulator
    @Operation transitivelyDelegatesTo(delegateFrom, delegateTo)
      if 
        delegateFrom.delegatesTo = delegateTo 
      then 
        true
      else
        false // TODO: check more cases
      end
    end