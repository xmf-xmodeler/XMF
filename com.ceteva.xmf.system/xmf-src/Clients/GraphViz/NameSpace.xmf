parserImport XOCL;

import GraphViz;
import Clients;
import TextEditor;
import DocTables;
import Server;
import Basic;
import Forms;
import Env;
     
xmf.clearClassLoader();
     
context NameSpace
  @Operation populateGraphViz(browser:DiagramBrowser,gv)
    gv.setURL("diagram:" + self.path());  
    @For c in self.contents()->select(o | o<>null and o.isKindOf(Class) and not(o.isKindOf(Package))) when browser.canShowClass(c) do
      c.graphVizNode(browser,gv)
    end; 
    @For p in self.contents()->select(o | o<>null and o.isKindOf(Package)) when browser.canShowPackage(p) do
      p.graphVizNode(browser,gv)
    end; 
    @For p in self.imports->select(o | o<>null and o.isKindOf(NameSpace)) do
      @For c in p.contents()->select(o | o<>null and o.isKindOf(Class) and not(o.isKindOf(Package))) do
        if browser.canImportClass(p,c)
        then c.graphVizNode(browser,gv)
        end
      end
    end     
  end

context NameSpace
  @Operation graphViz()
    let browser = DiagramBrowser(self)
    in browser.browse();
       browser
    end
  end
  
context NameSpace
  @Operation toGraphVizPage(browser:DiagramBrowser)
    let back() = browser.back() then
        button = Button("Back",back) then
        left = Table("",[Row([Centre(button)])] + browser.elements.asSeq()->reverse->collect(ns | Row([Text(ns.path())])))
    in Page(self.path(),[
         Form("xxx",[
           Table("",[
             Row([
               if browser.elements.isEmpty()
               then Text("Top")
               else Col(NullEnv().bind("valign","top"),left)
               end,
               HTML(self.toSVG(browser))
             ])
           ])
         ])
       ])
     end
   end