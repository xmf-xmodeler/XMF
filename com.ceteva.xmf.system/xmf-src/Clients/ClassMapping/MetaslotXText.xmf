parserImport XOCL;
parserImport XMap;

import Clients;
import Diagrams;
import DiagramsMapping;
import ClassDiagrams;
import ClassMapping;

context ClassMapping

  @Class MetaslotXText extends ElementMap
  
    @Attribute object : Object end
    @Attribute metaAttribute : XCore::Attribute end
    @Attribute text : MetaslotText end
    @Attribute daemonPairs : Seq(Seq(Element)) end
    
    @Constructor(object,metaAttribute,text) ! 
      self.checkDaemons()  
    end
    
    @Operation checkDaemons()
      self.daemonPairs := Seq{};
      if metaAttribute.type.of()=AuxiliaryClasses::Unit then
          @SlotValueChanged multi once MetaslotXText::slotValueChanged_classDiagram_MetaslotXText(object.get(metaAttribute.name().toString()),"value") end
      elseif metaAttribute.type.of()=AuxiliaryClasses::ComposedType then
	      @SlotValueChanged multi once MetaslotXText::slotValueChanged_classDiagram_MetaslotXText(object.get(metaAttribute.name().toString()),"*") end
      else 
	      @SlotValueChanged multi once MetaslotXText::slotValueChanged_classDiagram_MetaslotXText(object,metaAttribute.name().toString()) end
      end;
      self.daemonPairs := daemonPairs->prepend(Seq{object,object.daemons()->last});
      @SlotValueChanged multi once MetaslotXText::textChanged_classDiagram_MetaslotXText(text.value.text,"text") end;
      self.daemonPairs := daemonPairs->prepend(Seq{object,object.daemons()->last});
      self
    end
    
    @Operation parseText(newText)
      let
        type = metaAttribute.type;
        slotName = metaAttribute.name().toString()
      in
        try
          if type.inheritsFrom(String) then
            object.set(slotName,newText.toString())
          elseif type.inheritsFrom(Integer) then
            object.set(slotName,newText.asInt())
          elseif type.inheritsFrom(Float) then
            object.set(slotName,newText.asFloat())
          elseif type.inheritsFrom(Boolean) then
            object.set(slotName,newText.asBool())
          elseif type.of()=AuxiliaryClasses::Unit then
            object.get(slotName).set("value",type.parseValue(newText))
          elseif type.of()=AuxiliaryClasses::ComposedType then
            let value = object.get(slotName).parseValue(newText)
            in @WithoutDaemons(object.get(slotName))
		            object.get(slotName).setValue(value)
        	       end
        	    end
          end;
          
          if owner <> null then owner.elementChanged() end
          
        catch(exception)
          xmf.warning("Metaslot \"" + slotName + "\" expects a value of type " + type.name().toString() + ".\n"
                      + exception.message)
        end;
        text.setValue(object.get(slotName).toString())
      end
    end
    
    @Operation removeDaemons()
      // Called to tidy up when the mapping is no longer valid.
      @For dp in daemonPairs do
        dp.at(0).removeDaemon(dp.at(1),self)
      end;
      self.daemonPairs := Seq{};
      self
    end
    
    @Operation slotValueChanged_classDiagram_MetaslotXText(attribute,slot,newValue,oldValue)
      if metaAttribute.type.of()=AuxiliaryClasses::Unit or metaAttribute.type.of()=AuxiliaryClasses::ComposedType then
		text.setValue(object.get(metaAttribute.name().toString()).toString())  
      else
	      if text.value.text.toString() <> newValue.toString() then
    	    text.setValue(newValue.toString())  
    	  end
      end
    end
    
    @Operation textChanged_classDiagram_MetaslotXText(attribute,slot,newText,oldText)
      if newText.toString() <> oldText.toString() then
        self.parseText(newText)
      end
    end

    @Operation element()
      Seq{object,metaAttribute}
    end

    @Operation diagramElement()
      text
    end

  end