parserImport XOCL;
parserImport XMap;

import Clients;
import Diagrams;
import DiagramsMapping;
import Menus;
import ClassDiagrams;
import ClassMapping;

context ClassMapping

  @Class ObjectXNode extends ElementXNode, RightClickableProxy
  
    @Attribute slotMaps    : Seq(SlotXText) (+,-) end
    @Attribute attributes  : Set(Attribute) (+,-) end
    @Attribute allClasses  : Set(Class)           end

    @Operation add(element)
      @TypeCase(element)
        SlotXText do
          self.addSlotMap(element)
        end
        else self.error("ObjectXNode::add: unknown type of element " + element.toString())
      end
    end
    
    @Operation addSlot(slotName,value)
      if not self.element.hasSlot(slotName)
      then self.element.addStructuralFeature(slotName,value)
      end;
      let attribute = self.element.of().getAttribute(slotName)
      in if not self.nodeTextType(attribute.type)
         then
           if attribute.type.inheritsFrom(SetOfElement) or attribute.type.inheritsFrom(SeqOfElement)
           then self.addSetContentDaemon(slotName)
           else self.addSlotChangeDaemon(slotName)
           end;
           let attribute = element.of().getAttribute(slotName)
           in @SlotValueChanged multi once ObjectXNode::attributeNameChange(attribute,"name") end;
              @SlotValueChanged multi once ObjectXNode::attributeTypeChange(attribute,"type") end;
              self.attributes := self.attributes->including(attribute)
           end
         end
      end;
      self.elementChanged()
    end

    @Operation applyMapping()
      self.element.applyMapping_client()
    end

    @Operation attributeAdded(element,slot,attribute)
      self.addSlot(attribute.name(),attribute.getInitialValue());
      let type = attribute.type
      in if self.nodeTextType(type)
         then
           self.createSlotText(attribute);
           node.expand()
         end
      end
    end
    
    @Operation attributeNameChange(element,slot,newName,oldName)
      if element.hasSlot(oldName)
      then
        let value = element.get(oldName);
            daemons = element.daemons()
        in element.renameSlot(oldName,newName)
        end
      end;
      @For daemon in element.daemons() do
        let id = daemon.get("id")
        in if id.hasPrefix(oldName)
           then daemon.set("id",id.subst(newName,oldName,true))
           end
        end
      end
    end
    
    @Operation attributeTypeChange(element,slot,newType,oldType)
      self.removeSlot(element);
      self.addSlot(element.name(),element.getInitialValue())
    end
    
    @Operation attributeRemoved(removedAttribute)
      @For map in slotMaps when map.attribute = removedAttribute do
        map.text.delete();
        map.removeDaemons();
        self.remove(map)
      end
    end
    
    @Operation attributeRemoved(element,slot,attribute)
      self.attributeRemoved(attribute);
      self.removeSlot(attribute)
    end

    @Operation proxyElementTarget()
      xmf.menuManager().getProxy(self).object
    end

    @Operation createSlotText()
      let atts = element.of().allAttributes()->asSeq->reverse
      in @For a in atts do
          if a.type.inheritsFrom(String) or 
             a.type.inheritsFrom(Integer) or 
             a.type.inheritsFrom(Boolean) or
             a.type.inheritsFrom(Float)
          then self.createSlotText(a)
          end
         end
      end
    end
    
    @Operation createSlotText(attribute)
      let value = element.get(attribute.name) then
         text = node.newSlot(attribute.name,value,attribute.type.inheritsFrom(String)) then
         map = SlotXText(element,attribute.name,element.get(attribute.name),text)
      in self.slotMaps := self.slotMaps->prepend(map);
         map.setOwner(self);
         text
      end
    end
    
    @Operation elementChanged() 
      super();
      owner.elementChanged();
      node.pack()
    end
    
    @Operation hotLoaded() 
      self.checkDaemons();
      self.setGlobalMenu(node,Set{Object,node.of()},false)
    end
    
    @Operation nodeTextType(type)
      type.inheritsFrom(String) or 
      type.inheritsFrom(Integer) or 
      type.inheritsFrom(Boolean) or
      type.inheritsFrom(Float)
    end
    
    @Operation nonInstantiableClasses()
      Set{// the following cannot be created by raw instantiation
          // or cannot supported by snapshot diagrams...
            BasicArray,Bind,Buffer,Classifier,CodeBox,Collection,
            CompiledOperation,Constructor,Daemon,Doc,Exception,
            ForeignOperation,InitialisedAttribute,InterpretedOperation,
            MachineException,Operation,Parameter,Seq,Set,Snapshot,
            Table,Vector }
    end
    
    @Operation checkDaemons()
      super();
      self.checkNodeDaemons();
      self.checkSlotDaemons();
      self.checkAttributeDaemons()
    end
    
    @Operation checkAttributeDaemons()
      
      // monitor the attributes of the object's class and all the object's class parents
      
      let class = element.of() then
          classes = class.allParents()->including(class)
      in
        @For class in classes
        do
          @SlotValueChanged multi once + ObjectXNode::attributeAdded(class,"attributes") end;
          @SlotValueChanged multi once - ObjectXNode::attributeRemoved(class,"attributes") end;
          @SlotValueChanged multi once + ObjectXNode::parentAdded(class,"parents") end;
          @SlotValueChanged multi once - ObjectXNode::parentRemoved(class,"parents") end
        end;
        self.allClasses := classes
      end;
      
      @SlotValueChanged multi once   ObjectXNode::classNameChanged(element.of(),"name") end;
      
      @For slot in element.getStructuralFeatureNames()  do
        let attribute = element.of().getAttribute(slot)
        in if not self.nodeTextType(attribute.type)
           then
             let attribute = element.of().getAttribute(slot)
             in @SlotValueChanged multi once ObjectXNode::attributeTypeChange(attribute,"type") end;
                @SlotValueChanged multi once ObjectXNode::attributeNameChange(attribute,"name") end;
                self.attributes := self.attributes->including(attribute)
             end
           end
        end
      end
    end
    
    @Operation checkNodeDaemons()
      @SlotValueChanged multi once ObjectXNode::changeObjectName(node.nameBox.name,"text") end
    end
    
    @Operation checkSlotDaemons()
      let slots = element.getStructuralFeatureNames() in
        @For slot in slots do
          let attribute = element.of().getAttribute(slot)
          in if attribute <> null 
             then
              if not self.nodeTextType(attribute.type)
              then
                if attribute.type.inheritsFrom(SetOfElement) or attribute.type.inheritsFrom(SeqOfElement)
                then self.addSetContentDaemon(slot)
                else self.addSlotChangeDaemon(slot)
                end
              end
            end
          end
        end
      end
    end
    
    @Operation classNameChanged(newName)
      self.node.setType(newName)
    end
    
    @Operation classNameChanged(object,slot,newValue,oldValue)
      if newValue <> oldValue
      then self.classNameChanged(newValue)
      end;
      self.elementChanged()
    end
    
    @Operation addSetContentDaemon(slot)
      let setAddId = slot + "setElementAdded";
          setRemId = slot + "setElementRemoved"
      in @SlotValueChanged once + ObjectXNode::setElementAdded(element,slot) end.set("id",setAddId);
         @SlotValueChanged once - ObjectXNode::setElementRemoved(element,slot) end.set("id",setRemId)
      end
    end
    
    @Operation addSlotChangeDaemon(slot)
      let id = slot + "slotValueChanged"
      in  @SlotValueChanged once ObjectXNode::slotValueChanged(element,slot) end.set("id",id)
      end
    end
    
    @Operation changeObjectName(element,slot,newName,oldName)
      if newName <> oldName
      then
        self.owner.snapshot.nameChanged(element,newName,oldName);
        self.elementChanged()
      end
    end

    @Operation invokeOp()
      self.element.invokeOp()
    end

    @Operation remove(element)
      @TypeCase(element)
        SlotXText do
          self.deleteFromSlotMaps(element)
        end
        else self.error("ObjectXNode::add: unknown type of element " + element.toString())
      end
    end
    
    @Operation removeSlot(attribute)
      self.attributes := self.attributes->excluding(attribute);
      attribute.removeDaemonsWithTarget(self,true);
      attribute.type.removeDaemonsWithTarget(self,true);
      let
        id = attribute.name() + "slotValueChanged";
        setAddId = attribute.name() + "setElementAdded";
        setRemId = attribute.name() + "setElementRemoved"
      in
        self.element.destroyDaemon(element.daemonWithIdAndTarget(id,self));
        self.element.destroyDaemon(element.daemonWithIdAndTarget(setAddId,self));
        self.element.destroyDaemon(element.daemonWithIdAndTarget(setRemId,self))
      end;
      if self.element.hasSlot(attribute.name())
      then
        self.element.removeStructuralFeature(attribute.name())
      end
    end
   
    @Operation setElementAdded(object,slot,addedValue)
      self.owner.setElementAdded(object,slot,addedValue);
      self.elementChanged()
    end
    
    @Operation setElementRemoved(object,slot,removedValue)
      self.owner.setElementRemoved(object,slot,removedValue);
      self.elementChanged()
    end
    
    @Operation slotValueChanged(object,slot,newValue,oldValue)
      self.owner.slotValueChanged(object,slot,newValue);
      self.elementChanged()
    end
    
    @Operation orderSequence()
      self.element.orderSequence()
    end
    
    @Operation parentAdded(element,slot,parent)
      self.node.delete()
    end
    
    @Operation parentRemoved(element,slot,parent)
      self.node.delete()
    end

    @Operation removeDaemons()
      super();
      
      // remove daemons from the object
      
      element.removeDaemonsWithTarget(self,true);
      element.of().removeDaemonsWithTarget(self,true);
      
      // remove daemons from the class
      
      // -- remove daemons from attributes
      
      @For attribute in self.attributes
      do
        attribute.removeDaemonsWithTarget(self,true);
        attribute.type.removeDaemonsWithTarget(self,true)
      end;
      
      // -- remove deamons from the attribute slot of each classes
      
      @For class in allClasses do
        class.removeDaemonsWithTarget(self,true)
      end;
      
      // remove daemons from the node
      
      node.removeDaemonsWithTarget(self,true);
      node.nameBox.name.removeDaemonsWithTarget(self,true);
      @For map in slotMaps do
        map.removeDaemons()
      end
    end

    @Operation subMaps()
      slotMaps
    end
    
    @Operation validObject(object)
      object <> null andthen 
      object.of().isKindOf(XCore::Class) andthen 
      (not self.nonInstantiableClasses()->includes(object.of())) andthen
      (not self.owner.objectMaps->exists(m | m.object = object))
    end

  end