parserImport XOCL;

import Clients;
import Diagrams;

context ClassMapping

  @Class PackageConstraintChecker extends DiagramListener
  
    // This class monitors changes to a diagram and performs constraint
    // checks on the package when appropriate changes occur.
    
    @Attribute mapping:ClassMapping::PackageXClassDiagram end
    
    @Constructor(mapping) ! end
    
    @Operation checkConstraints() 
      try
        let report:ConstraintReport = mapping.package.checkConstraints()
        in @Command(mapping.diagram) resetErrors(mapping.diagram) end;
           self.processConstraints(report)
        end
      catch(x)
        ("PackageConstraintChecker::checkConstraints() " + x).println()
      end
    end
    
    @Operation processConstraints(report:ConstraintReport) 
      if not(report.satisfied)
      then 
        let diagramElement = self.find(report.candidate)
        in if diagramElement <> null
           then @Command(diagramElement) error(diagramElement,report.reason) end
           end;
           @For child in report.children do
             self.processConstraints(child)
           end
        end
      end
    end
    
    @Operation find(o:Object)
      // See if there is a mapping for this object and return
      // the diagram element. Otherwise return null...
      let node = self.findNode(o)
      in if node <> null
         then node
         else self.findEdge(o)
         end
      end
    end
    
    @Operation findNode(o:Object)
      @Find(map,mapping.classMaps) when map.class = o do map.node else null end
    end
    
    @Operation findEdge(o:Object)
      @Find(map,mapping.attributeEdges) when map.attribute = o do map.edge else null end
    end
        
    @Operation handleDeleteBoxEvent(diagram:Diagram,event:[Element])
      self.checkConstraints() 
    end
    
    @Operation handleDeleteEdgeEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleDeleteLabelEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleDeleteNodeEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleDeleteTextEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleDeleteWayPointEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleNewBoxEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleNewEdgeEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleNewLabelEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleNewNodeEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleNewTextEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleNewWayPointEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleNodeResizedEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleSourceReconnectedEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleTargetReconnectedEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
    
    @Operation handleTextChangedEvent(diagram:Diagram,event:[Element])
      self.checkConstraints()
    end
  
  end