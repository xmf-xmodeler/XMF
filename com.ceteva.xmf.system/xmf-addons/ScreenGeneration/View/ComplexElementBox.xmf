//Version 1.0 XMF2
parserImport XOCL;

import Root::FMML;
import Root::Visualization;
import Root::WidgetLibrary;

context Root::WidgetLibrary
  
	@MetaClass ComplexElementBox metaclass Root::Visualization::Widget extends ContentElement	
		@Attribute label : String (?,!) end
		@Attribute element : Element (?,!) end

		@Slot Widget::triggers = {WidgetLibrary::EventDoubleClick} end

		@Constructor(label, element) end
		
		@Constructor(id, label, element) ! end
		
		@Operation getValueField()
			"element"
		end

    	@Operation dispose()
      self.owner := null;
      //self.disposeCollection(contents);
      super()
    	end

     @Operation new()
/*     	let id = self.commandInterpreter().allocateId(self) in	
			self.owner.forwardCommand("addTextBox",[id, label, text]);
  		id
      end */
      	self.commandInterpreter().newElement(self,self.owner.id,"addComplexElementBox",[self.label, self.element.name])
      end
      
/*     @Operation newAsNavClass()
           	let id = self.commandInterpreter().allocateId(self) in	
			self.owner.forwardCommand("createNavigationClass",[id, text]);
  		id
      end
      end */
      
     @Operation textChanged(newText:String)
			if newText <> self.text
		    then
				self.text := newText
			end
     end
     
  	@Operation command(command,values)
  		if command = "valueChanged" then
  			self.text := values.ref(0)
  		//elseif command = "doubleClick" then
  			
  		else
  			@Find (event, self.of().triggers)
				 when event.command = command
				 do self.eventManager().raiseEvent(event(self,self.element))
				 else super(command,values)
				 end
    		end
   	end
		
	end


