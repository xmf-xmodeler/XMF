parserImport XOCL;

import Clients;
import FmmlxDiagrams;

context Root
@Class BikeSetup

  @Operation setup(p:Package) // Level 5 only
    // Level 5

    let
      m = FmmlxDiagrams::FmmlxManipulator()
    in
      m.addMetaClass(p, "A",     FMMLx::Level(2), [], false, false);
      m.addMetaClass(p, "B",     FMMLx::Level(2), [], false, false);
      m.addMetaClass(p, "Component",     FMMLx::Level(5), [], false, false);
      m.addMetaClass(p, "Configuration", FMMLx::Level(5), [], false, false);
      m.addMetaClass(p, "Part",          FMMLx::Level(5), [p::Component], false, false);
      m.addMetaClass(p, "CompPart",      FMMLx::Level(5), [p::Component], false, false);
      
      m.addAttribute(p::Component, "foo", FMMLx::Level(4), Auxiliary::Complex, m.valueList2Multiplicity([0,3,true,false]), false, false);
      m.addAttribute(p::Component, "weight", FMMLx::Level(1), Float, m.valueList2Multiplicity([0,1,true,false]), false, false);
      
      m.addAssociation(p, p::Configuration, p::Part, "role1", "role2", "has", Associations::DefaultAssociation, 
          m.valueList2Multiplicity([0,-1,false,false]),
          m.valueList2Multiplicity([0, 2,true, false]),
  	      FMMLx::Level(4),FMMLx::Level(4), true, true, false, false);
  	      
  	  let 
        a = Associations::AssociationType("SpecialAssociation", p::A, p::B)
      in
        a.sourceLevel     := FMMLx::Level(1,null);
        a.targetLevel     := FMMLx::Level(1,null);
        a.color           := "0088ff";           
        a.strokeWidth     := 3;           
        a.dashArray       := "";           
        a.startDeco       := "arrow";           
        a.endDeco         := "arrow";
        a.colorLink       := "88ccff";           
        a.strokeWidthLink := 2;           
        a.dashArrayLink   := "20,10";           
        a.startDecoLink   := "arrow";           
        a.endDecoLink     := "arrow";
        p.associationTypes := {a} + p.associationTypes;
        p.add(a)
      end;

  	      
  	  m.addOperation(p::Configuration, FMMLx::Level(4),  
      "  @Operation time[monitor=true]()
"+    "    xmf.date()
"+    "  end");
  	  
  	      
  	  m.addOperation(p::Configuration, FMMLx::Level(3),  
      "  @Operation totalRevenues[monitor=true]()
"+    "    self.allInstances().size() * 3.141592654
"+    "  end");

      null
    end
    
    // Some enums as well
    
    ;p.add(Enum("Ternary", ["Dunno","False", "True"]))
    ;p.add(Enum("USState", ["DistrictOfColumbia",
    "Alabama","Alaska","AmericanSamoa","Arizona","Arkansas","California","Colorado","Connecticut",
    "Delaware","Florida","Georgia","Guam","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas",
    "Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi",
    "Missouri","Montana","Nebraska","Nevada","NewHampshire","NewJersey","NewMexico","NewYork",
    "NorthCarolina","NorthDakota","NorthernMarianaIslands","Ohio","Oklahoma","Oregon","Pennsylvania",
    "PuertoRico","RhodeIsland","SouthCarolina","SouthDakota","Tennessee","Texas",
    "USVirginIslands","Utah","Vermont","Virginia","Washington","WestVirginia","Wisconsin","Wyoming"]))
  end

  @Operation setup4(p:Package)
    
    // Level 4
    
    let
      m = FmmlxDiagrams::FmmlxManipulator()
    in
      m.addInstance(p, p::Configuration, "Bicycle", FMMLx::Level(4),[], false, false, []);
      m.addInstance(p, p::A, "AA", FMMLx::Level(1),[], false, false, []);
      m.addInstance(p, p::B, "BB", FMMLx::Level(1),[], false, false, []);
      m.addInstance(p, p::AA, "a0", FMMLx::Level(0),[], false, false, []);
      m.addInstance(p, p::BB, "b0", FMMLx::Level(0),[], false, false, []);
      m.addAttribute(p::Bicycle, "allTerrain",     FMMLx::Level(3), Boolean, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Bicycle, "race",           FMMLx::Level(3), Boolean, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Bicycle, "city",           FMMLx::Level(3), Boolean, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Bicycle, "salesPrice",     FMMLx::Level(1), Float, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Bicycle, "weight",         FMMLx::Level(1), Float, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Bicycle, "partSalesPrice", FMMLx::Level(0), Float, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Bicycle, "serialNo",       FMMLx::Level(0), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      
      m.addAssociation(p, p::AA, p::BB, "roleA", "roleB", "testAssoc", BikePackage::SpecialAssociation, 
          m.valueList2Multiplicity([0,-1,false ,false]),
          m.valueList2Multiplicity([0,-1,false, false]),
  	      FMMLx::Level(0),FMMLx::Level(0), false, true, false, false);
  	      
  	  m.addOperation(p::Configuration, FMMLx::Level(2), 
      "  @Operation highestPrice[monitor=true]()
"+    "    if self.allInstances().size() = 0
"+    "    then \"N/A\"
"+    "    else
"+    "      let max = 0
"+    "      in
"+    "        @For x in self.allInstances() do
"+    "          if x.salesPrice>max then max := x.salesPrice end
"+    "        end;
"+    "        max
"+    "      end
"+    "    end
"+    "  end");

  	  m.addOperation(p::Configuration, FMMLx::Level(2), 
      "  @Operation averagePrice[monitor=true]()
"+    "    if self.allInstances().size() = 0
"+    "    then \"div/zero\"
"+    "    else
"+    "      let sum = 0; count = 0
"+    "      in
"+    "        @For x in self.allInstances() do
"+    "          sum := sum + x.salesPrice;
"+    "          count := count + 1
"+    "        end;
"+    "        sum/count
"+    "      end
"+    "    end
"+    "  end");

  	  m.addOperation(p::Configuration, FMMLx::Level(0), 
      "  @Operation isBikeComplete[monitor=true]()
"+    "    if self.frame = null then \"a Frame is missing\"
"+    "    elseif self.fork = null then \"a Fork is missing\"
"+    "    elseif self.wheel = null then \"a Wheel is missing\"
"+    "    else \"complete\"
"+    "    end
"+    "  end");

      m.addInstance(p, p::Part, "Fork", FMMLx::Level(4), [], false, false, []);
	  let c = Auxiliary::Complex() in
	    c.real := 1; 
	    c.imaginary := 0.5;
	    p::Fork.foo := c
	  end;
	  
      m.addAttribute(p::Fork, "color",        FMMLx::Level(1), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Fork, "suspension",   FMMLx::Level(2), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Fork, "material",     FMMLx::Level(1), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Fork, "serialNo",     FMMLx::Level(0), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Fork, "mudMount",     FMMLx::Level(0), Boolean, m.valueList2Multiplicity([1,1,true,false]), false, false);
      
      
      m.addInstance(p, p::Part, "Frame", FMMLx::Level(4), [], false, false, []);
      m.addAttribute(p::Frame, "allTerrain",   FMMLx::Level(3), Boolean, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Frame, "race",         FMMLx::Level(3), Boolean, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Frame, "color",        FMMLx::Level(1), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Frame, "height",       FMMLx::Level(1), Float, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Frame, "width",        FMMLx::Level(1), Float, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Frame, "material",     FMMLx::Level(1), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Frame, "serialNo",     FMMLx::Level(0), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      
      
      m.addInstance(p, p::Part, "Wheel", FMMLx::Level(4), [], false, false, []);
      m.addAttribute(p::Wheel, "safetyRefl",   FMMLx::Level(3), Boolean, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Wheel, "size",         FMMLx::Level(1), Float, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Wheel, "material",     FMMLx::Level(1), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Wheel, "width",        FMMLx::Level(1), Float, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Wheel, "tubeless",     FMMLx::Level(2), Boolean, m.valueList2Multiplicity([1,1,true,false]), false, false);
      m.addAttribute(p::Wheel, "serialNo",     FMMLx::Level(0), String, m.valueList2Multiplicity([1,1,true,false]), false, false);
      
      null
    end    
  end
  
  @Operation setup3210(p:Package)
    
    let
      m = FmmlxDiagrams::FmmlxManipulator()
    in
    
    // Level 3
      m.addInstance(p, p::Bicycle, "RacingBike", FMMLx::Level(3), [], false, false, []);
      m.addInstance(p, p::Fork, "RacingFork", FMMLx::Level(3), [], false, false, []);
      m.addInstance(p, p::Frame, "RacingFrame", FMMLx::Level(3), [], false, false, []);
      m.addInstance(p, p::Wheel, "RacingWheel", FMMLx::Level(3), [], false, false, []);
    
      m.addInstance(p, p::RacingBike, "ProRacer", FMMLx::Level(2), [], false, false, []);
      m.addInstance(p, p::RacingFork, "LightFork", FMMLx::Level(2), [], false, false, []);
      m.addInstance(p, p::RacingFrame, "ProRaceFrame", FMMLx::Level(2), [], false, false, []);
      m.addInstance(p, p::RacingWheel, "ProRaceWheel", FMMLx::Level(2), [], false, false, []);
      
      m.addInstance(p, p::ProRacer, "ChallengerA2XL", FMMLx::Level(1), [], false, false, []);
      m.addInstance(p, p::LightFork, "Superfork800", FMMLx::Level(1), [], false, false, []);
      m.addInstance(p, p::ProRaceFrame, "RocketA1XL", FMMLx::Level(1), [], false, false, []);
      m.addInstance(p, p::ProRaceWheel, "XForceDJ", FMMLx::Level(1), [], false, false, []);
      null
    end
  end
  
  
  @Operation pi()
	3.141592654
  end
  
end

