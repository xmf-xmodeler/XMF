parserImport XOCL;
parserImport XMap;

import Clients;
import Diagrams;
import DiagramsMapping;
import ClassDiagrams;
import ClassMapping;
import Menus;
import IO;
import SnapshotDiagrams;

context Clients::ClassDiagrams::NameBox 
    @Attribute sourcePackageText : Text	end
    
context Clients::ClassDiagrams::NameBox     
    @Attribute stereotypeText    : Text end 

context Clients::ClassDiagrams::NameBox 
  @Operation checkDaemons()
  	@SlotValueChanged multi once Clients::ClassDiagrams::NameBox::widthChanged(self,"width") end
  end
  
  context Clients::ClassDiagrams::NameBox
  @Operation widthChanged(obj, slot, new, old)
  	 @For d in obj.displays do
  		d.center(d.width,new)
  	 end
  end
  
  context Clients::ClassDiagrams::NameBox
  @Operation setStereotypeText(text)
  	 self.stereotypeText.setText("^" + text + "^")
  end
  
  context Clients::ClassDiagrams::NameBox
  @Operation addDisplays():XCore::Element
      if sourcePackage <> ""
      then
        self.add(self.sourcePackageText)
      else
        false
      end;
      if stereotype <> ""
      then
        self.add(self.stereotypeText)
      else
        false
      end;
      self.add(name)
    end

Clients::ClassDiagrams::NameBox.constructors := Seq{};
    
  context Clients::ClassDiagrams::NameBox
  @Constructor(name,sourcePackage,isAbstract,stereotype,x,y,width)
	self.cornerCurve := 0;
	self.name := if name.isKindOf(String)
	then
  		let t = Text(name,5,0,true,false,isAbstract)
  		in
   			t.checkDaemons();
   			t
  		end
	else
  		name
	end;
	if sourcePackage <> ""
      then
        self.sourcePackageText := Text(sourcePackage,5,0,false);
        self.sourcePackageText.checkDaemons()
      else
        false
      end;
	if stereotype <> ""
      then
    	self.stereotypeText := Text(stereotype,5,0,false,false,false,grey);
        self.stereotypeText.checkDaemons()
      else
        false
    end;
	self.checkDaemons();
	self.showAllEdges()
  end  