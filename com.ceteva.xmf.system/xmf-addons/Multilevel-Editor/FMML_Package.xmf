parserImport XOCL;

context Root

  @Package FMML metapackage XCore extends XCore
  end

context Root
  @Package Auxiliary end
  
context Root::Auxiliary
  @Class Complex
    @Attribute real:Number end
    @Attribute imaginary:Number end
    
    @Constructor(real,imaginary) end
        
    @Operation toString()  
      let 
        iText = 
          if     imaginary =  1 then  "i"
          elseif imaginary = -1 then "-i"
          else  (imaginary + "i") end
      in
        ""+
        if 
          imaginary = 0 
        then 
          real
        else
          if 
            real = 0
          then
            iText
          else
            real + if imaginary > 0 then "+" else "" end + iText
          end
        end
      end
    end
    
    @Operation magnitude() ((self.real*self.real)+(self.imaginary*self.imaginary)).sqrt() end
    @Operation argument() xmf.javaClass("java.lang.Math").atan2(self.imaginary+0.0,self.real+0.0) end
    
    @Operation add(other) Complex(self.real+other.real,self.imaginary+other.imaginary) end
    @Operation sub(other) Complex(self.real-other.real,self.imaginary-other.imaginary) end
    @Operation mul(other) Complex((self.real*other.real)-(self.imaginary*other.imaginary),(self.real*other.imaginary)+(other.real*self.imaginary)) end
    @Operation div(other) Complex(
        ((self.real*other.real)+(self.imaginary*other.imaginary))/((other.real*other.real)+(other.imaginary*other.imaginary)),
        ((self.real*other.imaginary)-(other.real*self.imaginary))/((other.real*other.real)+(other.imaginary*other.imaginary)))
    end
    
    @Operation createFromPolar(magnitude, argument) 
      Complex(magnitude * xmf.javaClass("java.lang.Math").cos(argument), magnitude * xmf.javaClass("java.lang.Math").sin(argument))
    end
    
    @Operation rotate(angle) 
      Complex::createFromPolar(self.magnitude(), self.argument() + angle)
    end
    
    @Operation exp(z:Complex)
      let 
        a = xmf.javaClass("java.lang.Math").exp(z.real) 
      in
      Complex(
        a * xmf.javaClass("java.lang.Math").cos(z.imaginary),
        a * xmf.javaClass("java.lang.Math").sin(z.imaginary)
        )
      end
    end
    
    @Operation pi() Complex(-1,0).argument() end
    
  end
  