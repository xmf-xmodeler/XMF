parserImport XOCL;

context Root

@Package Extensions metapackage XCore extends XCore
end

//import Root::Extensions;

context Root::Extensions

  @Class MetaAdaptor metaclass Class extends Class

    @Attribute created : Integer end
    @Attribute level : Integer end

    //@Attribute model : 1..1 Model end

	@Operation new():Object
      let o = Kernel_mkObj();
          A = self.allAttributes();
          intrinsicA = Set{}
      in Kernel_setOf(o,self);
         @While not A->isEmpty do
           let a = A->sel
           in if a.isIntrinsic andthen a.instLevel < o.of().level - 1
              then
                intrinsicA := intrinsicA.including(a)
              else
                if a.init <> null
                then
                  Kernel_addAtt(o,a.name,a.init.invoke(o,Seq{}))
                else
                  Kernel_addAtt(o,a.name,a.type.default())
                end
              end;
              A := A->excluding(a)
           end
         end;
         if self.inheritsFrom(Classifier)
         then
           o.parents := o.defaultParents()
         else
           false
         end;
         o.init();
		 if self.of() = Extensions::MetaAdaptor
         then
			let
               level = xmf.getString("Meta-level","Meta-level of the meta type:",3.toString())
        	in
               if level = null
               then
                   o.level := 3
               else
                   o.level := level.asInt()
               end
           end;          
           o.addParent(FMML::MetaClass)
         else
           if o.of().level > 2
           then
             o.addParent(FMML::MetaClass);
             if o.of().of().allAttributes()->exists(a |
               a.name = "level".asSymbol())
             then
               o.level := o.of().level - 1
             else
               o.level := 2
             end
           else
             o.level := o.of().level - 1
           end
         end;
         @While not intrinsicA.isEmpty() do
           let intA = intrinsicA.sel()
           in 
			   //let newIntA = Attribute(intA.name,intA.type)
			   //in
			//	newIntA.isIntrinsic := intA.isIntrinsic;
			//	newIntA.instLevel := intA.instLevel;
			//	newIntA.intrinsicParent := intA;
			//	intA.intrinsicChildren := intA.intrinsicChildren.including(newIntA);
			//	o.add(newIntA)
			//   end;
			o.add(intA);
              intrinsicA := intrinsicA.excluding(intA)
           end
		 end;
		 //(o + " delegates to "+ delegatesTo).println();
		 //("self: " + self).println();
		 //("o: " + o).println();
		 //(o.delegatesTo).println();
		 //(o.delegatesTo <> null).println();
		 //(self.delegatesTo).println();
		 //(self.delegatesTo <> null).println();
		 if self.delegatesTo <> null	
		 then self.selectRoleFiller(o, self) end;
		   //"Start Delegation Dialog".println();	   
		   //xmf.select("Role-filler of type " + type + " required","Select role-filler",{"Choose this"},"Choose this",null)
		   //end;
         if Root.contents.keys().includes("TargetPackage".asSymbol())
         then
           TargetPackage.add(o)
         else
           false
         end;
         o
      end
    end
    
    @Operation selectRoleFiller(object, class)
      let type = class.delegatesTo
	  then list = Root.allContentsOf(type)
	  then size = list.size()
	  in 
		if size = 0 
		then xmf.questionYesOnly("No instance of roll filler class found! This instance will behave erratically until the roleFiller slot is set to a non-null value.")
		elseif size = 1
		then xmf.questionYesOnly("The only known instance of the roll filler class (" + type.name + ") will be used as role filler.");
				object.setDelegation(list.asSeq().head())
		else // if size > 1
		  let choice = xmf.select("Role-filler of type " + type.name + " required","Select role-filler", list.asSeq(), list.asSeq().head(),null) 
		  //then name = exp
		  in //(choice.name + " selected.").println();
			 //(choice.of()).println();
			if choice <> null then object.setDelegation(choice) end
		  end // let/in
        end // if
	  end // let/in
	end //@Operation

end
 
