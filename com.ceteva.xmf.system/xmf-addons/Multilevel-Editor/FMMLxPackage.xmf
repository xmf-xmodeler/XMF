parserImport XOCL;

import Root::FMML;

context Root::FMML
@Class FMMLxPackage extends Package

  @Attribute fmmlxAssociationInstances : Set end
  
  @Operation addAssociationInstance(source, target, association)
    if self.fmmlxAssociationInstances = null then self.fmmlxAssociationInstances := {} end;
    self.fmmlxAssociationInstances := self.fmmlxAssociationInstances + {[source,target,association]}
   end
  
  @Operation removeAssociationInstance(source, target, association) 
    if self.fmmlxAssociationInstances = null then self.fmmlxAssociationInstances := {} end;
    let
      toBeRemoved = {}
    in
      @For link in self.fmmlxAssociationInstances do
        if 
          source = link.at(0) andthen target = link.at(1) andthen association = link.at(2)
        then
          toBeRemoved := toBeRemoved + {link}
        end
      end;
      if 
        toBeRemoved.size() <> 1 
      then 
        throw Exception("associationInstance not found") 
      else
        self.fmmlxAssociationInstances := self.fmmlxAssociationInstances - toBeRemoved
      end
    end
  end
   
  @Operation hasAssociationInstance(source, target, association)
    if self.fmmlxAssociationInstances = null then false 
      else
      let 
        found = false
      in
        @For link in self.fmmlxAssociationInstances do
          if link.at(0) = source andthen link.at(1) = target andthen link.at(2) = association then found := true end;
          if link.at(1) = source andthen link.at(0) = target andthen link.at(2) = association then found := true end
        end;
        found
      end
    end 
  end
  
  @Operation getLinkEnds(obj:MetaClass, assocName:String)
    let
      result = {}
    in
      @For link in self.fmmlxAssociationInstances do
        if link.at(0) = obj andthen link.at(2).name.toString() = assocName.toString() then result := result + {link.at(1)} end;
        if link.at(1) = obj andthen link.at(2).name.toString() = assocName.toString() then result := result + {link.at(0)} end
      end;
      result
    end
  end
end