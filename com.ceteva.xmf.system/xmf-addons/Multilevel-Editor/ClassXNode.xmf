parserImport XOCL;
parserImport XMap;

import Clients;
import Diagrams;
import DiagramsMapping;
import ClassDiagrams;
import ClassMapping;
import Menus;
import IO;
import SnapshotDiagrams;

context ClassXNode
  @Operation setColor(level:Integer)
    if level >= 5
    then node.name.name.setColor(white); 
    //(0.825-((level*2.0)/(1.0+(5.0.sqrt())))).println();
    node.name.setFillColor(Color::makeHSV(0.44-((level*2.0)/(1.0+(5.0.sqrt()))), (4.0/level), 1.0-(2.5/level)))
    elseif level = 4
    then node.name.name.setColor(white); node.name.setFillColor(red)
    elseif level = 3
    then node.name.name.setColor(white); node.name.setFillColor(blue)
    elseif level = 2
    then node.name.name.setColor(white); node.name.setFillColor(black)
    elseif level = 1
    then node.name.name.setColor(black); node.name.setFillColor(white)
    else 
         node.name.name.setColor(black); node.name.setFillColor(white)
    end
  end 
  

context ClassXNode
  @Operation levelChanged(obj,slot,new,old)
      self.setColor(class.level)
  end

context ClassXNode
  @Operation init(args)
    super(args);
    node.showMetaslots := true;
    self.setColor(class.level);
    @SlotValueChanged multi once ClassXNode::levelChanged(class,"level") end;
    self
  end
  
    context ClassXNode	

    // overwrite existing operation to avoid creation of slots on too high meta levels, and to exclude MetaAdaptor's attributes from slot creation 
    
    @Operation generateMetaslots()
      @For metaAttribute in class.of().allAttributes() do
        if metaAttribute.underlyingType().isKindOf(DataType) and (not Root::Extensions::MetaAdaptor.allAttributes().contains(metaAttribute)) and ( (not metaAttribute.isIntrinsic) or (metaAttribute.instLevel.asInt() >= class.level.asInt())) then
          @WithoutRendering(node.owner)
            self.metaslotAdded(metaAttribute)
          end
        end
      end
    end   
  